// src/app/pages/services/navigation-history.service.ts
import { Injectable } from '@angular/core';
import { Router, NavigationEnd, Event } from '@angular/router';
import { filter } from 'rxjs/operators';

export interface NavigationHistoryEntry {
  url: string; // –ü–æ–ª–Ω—ã–π URL —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  timestamp: Date;
}

@Injectable({
  providedIn: 'root'
})
export class NavigationHistoryService {
  private history: NavigationHistoryEntry[] = [];
  private maxHistoryLength = 50;

  constructor(private router: Router) {
    this.setupNavigationTracking();
  }

  private setupNavigationTracking(): void {
    this.router.events
      .pipe(
        filter((event: Event): event is NavigationEnd => event instanceof NavigationEnd)
      )
      .subscribe((event: NavigationEnd) => {
        this.addToHistory(event.urlAfterRedirects);
        this.printHistoryToConsole();
      });
  }

  private addToHistory(fullUrl: string): void {
    if (!this.isPagesModuleUrl(fullUrl)) {
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –±–µ–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const pathWithoutParams = this.removeQueryParams(fullUrl);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –ø—É—Ç—å –¥—É–±–ª–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ (–±–µ–∑ —É—á–µ—Ç–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    if (this.isSamePath(pathWithoutParams)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤—ã–º–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      this.updateLastEntry(fullUrl);
      return;
    }

    // –ï—Å–ª–∏ –ø—É—Ç—å –∏–∑–º–µ–Ω–∏–ª—Å—è - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const navigationEntry: NavigationHistoryEntry = {
      url: fullUrl,
      timestamp: new Date()
    };

    this.history.push(navigationEntry);

    if (this.history.length > this.maxHistoryLength) {
      this.history.shift();
    }
  }

  private isPagesModuleUrl(url: string): boolean {
    return url.startsWith('/pages') || url === '/pages';
  }

  private removeQueryParams(url: string): string {
    return url.split('?')[0];
  }

  private isSamePath(currentPath: string): boolean {
    if (this.history.length === 0) return false;
    
    const lastEntry = this.history[this.history.length - 1];
    const lastEntryPath = this.removeQueryParams(lastEntry.url);
    return lastEntryPath === currentPath;
  }

  private updateLastEntry(newUrl: string): void {
    if (this.history.length > 0) {
      this.history[this.history.length - 1].url = newUrl;
      this.history[this.history.length - 1].timestamp = new Date();
    }
  }

  private printHistoryToConsole(): void {
    console.log('üìú Navigation History Array:', this.history);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
   * @param fallbackUrl - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è
   */
  back(fallbackUrl: string): void {
    if (this.history.length > 1) {
      // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      this.history.pop();
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      const previousEntry = this.history[this.history.length - 1];
      this.router.navigateByUrl(previousEntry.url);
    } else if (this.history.length === 1) {
      // –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å - —É–¥–∞–ª—è–µ–º –µ–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ fallback
      this.history.pop();
      this.router.navigateByUrl(fallbackUrl);
    } else {
      // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–∞—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      this.router.navigateByUrl(fallbackUrl);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  getHistory(): NavigationHistoryEntry[] {
    return [...this.history];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
   */
  getLastEntry(): NavigationHistoryEntry | null {
    return this.history.length > 0 ? this.history[this.history.length - 1] : null;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  clearHistory(): void {
    this.history = [];
    console.log('üóëÔ∏è Navigation history cleared');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
   */
  getHistoryLength(): number {
    return this.history.length;
  }
}