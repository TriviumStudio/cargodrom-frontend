{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AAC2E;;AAGrE,MAAOC,iBAAkB,SAAQD,qEAAiB;EAC7CE,iBAAiBA,CAAA;IACxB,OAAO,CAAC,CAAC,CAAC;EACZ;;EAESC,MAAMA,CAACC,IAAU,EAAEC,aAAqB;IAC/C,IAAIA,aAAa,KAAK,OAAO,EAAE;MAC7B,MAAMC,GAAG,GAAGF,IAAI,CAACG,OAAO,EAAE;MAC1B,MAAMC,KAAK,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAG,CAAC;MACjC,MAAMC,IAAI,GAAGN,IAAI,CAACO,WAAW,EAAE;MAC/B,OAAO,GAAG,IAAI,CAACC,SAAS,CAACN,GAAG,CAAC,IAAI,IAAI,CAACM,SAAS,CAACJ,KAAK,CAAC,IAAIE,IAAI,EAAE;;IAElE,OAAO,KAAK,CAACP,MAAM,CAACC,IAAI,EAAEC,aAAa,CAAC;EAC1C;EAEQO,SAASA,CAACC,CAAS;IACzB,OAAO,CAAC,IAAI,GAAGA,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC7B;;;;;wJAjBWb,iBAAiB,IAAAc,CAAA,IAAjBd,iBAAiB;MAAA;IAAA;EAAA;;;aAAjBA,iBAAiB;MAAAe,OAAA,EAAjBf,iBAAiB,CAAAgB;IAAA;EAAA;;;;;;;;;;;;;;;;;ACA9B;;;AAMM,MAAOC,gBAAgB;EAH7BC,YAAA;IAIE,KAAAC,OAAO,GAAW,mCAAmC;;;;uBAD1CF,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAF,OAAA,EAAhBE,gBAAgB,CAAAD,IAAA;MAAAI,UAAA,EAFf;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;ACFpB;;;AAIM,MAAOC,WAAW;EACtBH,YACYI,MAAwB,EACxBC,IAAgB;IADhB,KAAAD,MAAM,GAANA,MAAM;IACN,KAAAC,IAAI,GAAJA,IAAI;IAIR,KAAAC,QAAQ,GAAW,EAAE;EAF7B;EAIA;;;;EAIA,IAAIL,OAAOA,CAAA;IACT,OAAO,IAAI,CAACK,QAAQ,IAAI,IAAI,CAACF,MAAM,CAACH,OAAO;EAC7C;EAEA;;;EAGA,IAAIA,OAAOA,CAACA,OAAe;IACzB,IAAI,CAACK,QAAQ,GAAGL,OAAO;EACzB;;;uBAtBWE,WAAW,EAAAI,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAXP,WAAW;MAAAN,OAAA,EAAXM,WAAW,CAAAL;IAAA;EAAA;;;;;;;;;;;;;;;;ACVxB;AACA;AAC6G;AAE7G;;;;AAIA,MAAMiB,cAAc;EAClBC,SAASA,CAACC,GAAW;IACnB,OAAOC,kBAAkB,CAACD,GAAG,CAAC;EAChC;EAEAE,WAAWA,CAACC,KAAa;IACvB,OAAOF,kBAAkB,CAACE,KAAK,CAAC;EAClC;EAEAC,SAASA,CAACJ,GAAW;IACnB,OAAOK,kBAAkB,CAACL,GAAG,CAAC;EAChC;EAEAM,WAAWA,CAACH,KAAa;IACvB,OAAOE,kBAAkB,CAACF,KAAK,CAAC;EAClC;;AAEF,MAAMI,sBAAsB,GAAG,IAAIT,cAAc,EAAE;AAUnD;;;AAGA,MAAeU,SAAS;EACtBzB,YAAmB0B,IAAY,EAASN,KAAU,EAASO,OAAyB,EAAEC,YAAoB,EAAEC,cAAuB;IAAhH,KAAAH,IAAI,GAAJA,IAAI;IAAiB,KAAAN,KAAK,GAALA,KAAK;IAAc,KAAAO,OAAO,GAAPA,OAAO;IAChE,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,IAAI,CAACA,OAAO,CAACG,KAAK,KAAK,IAAI,IAAI,IAAI,CAACH,OAAO,CAACG,KAAK,KAAKC,SAAS,EAAE;MACnE,IAAI,CAACJ,OAAO,CAACG,KAAK,GAAGF,YAAY;;IAEnC,IAAI,IAAI,CAACD,OAAO,CAACK,OAAO,KAAK,IAAI,IAAI,IAAI,CAACL,OAAO,CAACK,OAAO,KAAKD,SAAS,EAAE;MACvE,IAAI,CAACJ,OAAO,CAACK,OAAO,GAAGH,cAAc;;EAEzC;EAEAI,cAAcA,CAACb,KAAU,EAAEc,SAAS,GAAG,GAAG;IACxC,IAAId,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKW,SAAS,EAAE;MACzC,OAAO,EAAE;KACV,MAAM,IAAIX,KAAK,YAAYe,KAAK,EAAE;MACjC,OAAOf,KAAK,CAACgB,GAAG,CAACC,CAAC,IAAI,IAAI,CAACJ,cAAc,CAACI,CAAC,CAAC,CAACC,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAACrB,kBAAkB,CAACgB,SAAS,CAAC,CAAC,CAAC,CAACK,IAAI,CAACL,SAAS,CAAC;KACnH,MAAM,IAAI,OAAOd,KAAK,KAAK,QAAQ,EAAE;MACpC,MAAMoB,KAAK,GAAa,EAAE;MAC1B,KAAK,MAAMvB,GAAG,IAAIwB,MAAM,CAACC,IAAI,CAACtB,KAAK,CAAC,EAAE;QACpC,IAAIuB,OAAO,GAAGvB,KAAK,CAACH,GAAG,CAAC;QACxB,IAAI0B,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKZ,SAAS,EAAE;UAC7CY,OAAO,GAAG,IAAI,CAACV,cAAc,CAACU,OAAO,CAAC,CAACL,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAACrB,kBAAkB,CAACgB,SAAS,CAAC,CAAC;UAC3F,IAAI,IAAI,CAACP,OAAO,CAACK,OAAO,EAAE;YACxBQ,KAAK,CAACI,IAAI,CAAC,GAAG3B,GAAG,IAAI0B,OAAO,EAAE,CAAC;WAChC,MAAM;YACLH,KAAK,CAACI,IAAI,CAAC3B,GAAG,CAAC;YACfuB,KAAK,CAACI,IAAI,CAACD,OAAO,CAAC;;;;MAIzB,OAAOH,KAAK,CAACD,IAAI,CAACL,SAAS,CAAC;KAC7B,MAAM;MACL,OAAOW,MAAM,CAACzB,KAAK,CAAC;;EAExB;;AAGF;;;AAGA,MAAM0B,aAAc,SAAQrB,SAAS;EACnCzB,YAAY0B,IAAY,EAAEN,KAAU,EAAEO,OAAyB;IAC7D,KAAK,CAACD,IAAI,EAAEN,KAAK,EAAEO,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;EAC9C;EAEAoB,MAAMA,CAACC,IAAY;IACjB,IAAI5B,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKW,SAAS,EAAE;MACzCX,KAAK,GAAG,EAAE;;IAEZ,IAAI6B,MAAM,GAAG,IAAI,CAACtB,OAAO,CAACG,KAAK,KAAK,OAAO,GAAG,GAAG,GAAG,EAAE;IACtD,IAAII,SAAS,GAAG,IAAI,CAACP,OAAO,CAACK,OAAO,GAAGiB,MAAM,KAAK,EAAE,GAAG,GAAG,GAAGA,MAAM,GAAG,GAAG;IACzE,IAAIC,iBAAiB,GAAG,KAAK;IAC7B,IAAI,IAAI,CAACvB,OAAO,CAACG,KAAK,KAAK,QAAQ,EAAE;MACnC;MACAmB,MAAM,GAAG,IAAI,IAAI,CAACvB,IAAI,GAAG;MACzB,IAAI,IAAI,CAACC,OAAO,CAACK,OAAO,IAAI,OAAOZ,KAAK,KAAK,QAAQ,EAAE;QACrD6B,MAAM,GAAG,GAAG;QACZ,IAAI7B,KAAK,YAAYe,KAAK,EAAE;UAC1B;UACAf,KAAK,GAAGA,KAAK,CAACgB,GAAG,CAACC,CAAC,IAAI,GAAG,IAAI,CAACX,IAAI,IAAI,IAAI,CAACO,cAAc,CAACI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;UACrEjB,KAAK,GAAGA,KAAK,CAACmB,IAAI,CAAC,GAAG,CAAC;UACvBW,iBAAiB,GAAG,IAAI;SACzB,MAAM;UACL;UACA9B,KAAK,GAAG,IAAI,CAACa,cAAc,CAACb,KAAK,EAAE,GAAG,CAAC;UACvC8B,iBAAiB,GAAG,IAAI;;;;IAI9B9B,KAAK,GAAG6B,MAAM,IAAIC,iBAAiB,GAAG9B,KAAK,GAAG,IAAI,CAACa,cAAc,CAACb,KAAK,EAAEc,SAAS,CAAC,CAAC;IACpF;IACAc,IAAI,GAAGA,IAAI,CAACG,OAAO,CAAC,IAAI,IAAI,CAACzB,IAAI,GAAG,EAAEN,KAAK,CAAC;IAC5C4B,IAAI,GAAGA,IAAI,CAACG,OAAO,CAAC,IAAIF,MAAM,GAAG,IAAI,CAACvB,IAAI,GAAG,IAAI,CAACC,OAAO,CAACK,OAAO,GAAG,GAAG,GAAG,EAAE,GAAG,EAAEZ,KAAK,CAAC;IACvF,OAAO4B,IAAI;EACb;EAEA;EACAf,cAAcA,CAACb,KAAU,EAAEc,SAAS,GAAG,GAAG;IACxC,IAAIkB,MAAM,GAAG,OAAOhC,KAAK,KAAK,QAAQ,GAAGF,kBAAkB,CAACE,KAAK,CAAC,GAAG,KAAK,CAACa,cAAc,CAACb,KAAK,EAAEc,SAAS,CAAC;IAC3GkB,MAAM,GAAGA,MAAM,CAACD,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACpCC,MAAM,GAAGA,MAAM,CAACD,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACpCC,MAAM,GAAGA,MAAM,CAACD,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IACpC,OAAOC,MAAM;EACf;;AAGF;;;AAGA,MAAMC,cAAe,SAAQ5B,SAAS;EACpCzB,YAAY0B,IAAY,EAAEN,KAAU,EAAEO,OAAyB;IAC7D,KAAK,CAACD,IAAI,EAAEN,KAAK,EAAEO,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC;EAC3C;EAEAoB,MAAMA,CAACO,MAAkB;IACvB,IAAI,IAAI,CAAClC,KAAK,YAAYe,KAAK,EAAE;MAC/B;MACA,IAAI,IAAI,CAACR,OAAO,CAACK,OAAO,EAAE;QACxB,KAAK,MAAMK,CAAC,IAAI,IAAI,CAACjB,KAAK,EAAE;UAC1BkC,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAACI,CAAC,CAAC,CAAC;;OAE5D,MAAM;QACL,MAAMH,SAAS,GAAG,IAAI,CAACP,OAAO,CAACG,KAAK,KAAK,gBAAgB,GACrD,GAAG,GAAG,IAAI,CAACH,OAAO,CAACG,KAAK,KAAK,eAAe,GAC1C,GAAG,GAAG,GAAG;QACf,OAAOwB,MAAM,CAACP,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAAC,IAAI,CAACb,KAAK,EAAEc,SAAS,CAAC,CAAC;;KAE9E,MAAM,IAAI,IAAI,CAACd,KAAK,KAAK,IAAI,IAAI,OAAO,IAAI,CAACA,KAAK,KAAK,QAAQ,EAAE;MAChE;MACA,IAAI,IAAI,CAACO,OAAO,CAACG,KAAK,KAAK,YAAY,EAAE;QACvC;QACA,KAAK,MAAMb,GAAG,IAAIwB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACtB,KAAK,CAAC,EAAE;UACzC,MAAMuB,OAAO,GAAG,IAAI,CAACvB,KAAK,CAACH,GAAG,CAAC;UAC/B,IAAI0B,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKZ,SAAS,EAAE;YAC7CuB,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC,GAAG,IAAI,CAACrB,IAAI,IAAIT,GAAG,GAAG,EAAE,IAAI,CAACgB,cAAc,CAACU,OAAO,CAAC,CAAC;;;OAGjF,MAAM,IAAI,IAAI,CAAChB,OAAO,CAACK,OAAO,EAAE;QAC/B;QACA,KAAK,MAAMf,GAAG,IAAIwB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACtB,KAAK,CAAC,EAAE;UACzC,MAAMuB,OAAO,GAAG,IAAI,CAACvB,KAAK,CAACH,GAAG,CAAC;UAC/B,IAAI0B,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKZ,SAAS,EAAE;YAC7CuB,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC9B,GAAG,EAAE,IAAI,CAACgB,cAAc,CAACU,OAAO,CAAC,CAAC;;;OAG9D,MAAM;QACL;QACA,MAAMH,KAAK,GAAU,EAAE;QACvB,KAAK,MAAMvB,GAAG,IAAIwB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACtB,KAAK,CAAC,EAAE;UACzC,MAAMuB,OAAO,GAAG,IAAI,CAACvB,KAAK,CAACH,GAAG,CAAC;UAC/B,IAAI0B,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKZ,SAAS,EAAE;YAC7CS,KAAK,CAACI,IAAI,CAAC3B,GAAG,CAAC;YACfuB,KAAK,CAACI,IAAI,CAACD,OAAO,CAAC;;;QAGvBW,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAACO,KAAK,CAAC,CAAC;;KAEhE,MAAM,IAAI,IAAI,CAACpB,KAAK,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,KAAKW,SAAS,EAAE;MAC1D;MACAuB,MAAM,GAAGA,MAAM,CAACP,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAAC,IAAI,CAACb,KAAK,CAAC,CAAC;;IAEpE,OAAOkC,MAAM;EACf;;AAGF;;;AAGA,MAAMC,eAAgB,SAAQ9B,SAAS;EACrCzB,YAAY0B,IAAY,EAAEN,KAAU,EAAEO,OAAyB;IAC7D,KAAK,CAACD,IAAI,EAAEN,KAAK,EAAEO,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC;EAC9C;EAEAoB,MAAMA,CAACS,OAAoB;IACzB,IAAI,IAAI,CAACpC,KAAK,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,KAAKW,SAAS,EAAE;MACnD,IAAI,IAAI,CAACX,KAAK,YAAYe,KAAK,EAAE;QAC/B,KAAK,MAAME,CAAC,IAAI,IAAI,CAACjB,KAAK,EAAE;UAC1BoC,OAAO,GAAGA,OAAO,CAACT,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAACI,CAAC,CAAC,CAAC;;OAE9D,MAAM;QACLmB,OAAO,GAAGA,OAAO,CAACT,MAAM,CAAC,IAAI,CAACrB,IAAI,EAAE,IAAI,CAACO,cAAc,CAAC,IAAI,CAACb,KAAK,CAAC,CAAC;;;IAGxE,OAAOoC,OAAO;EAChB;;AAGF;;;AAGM,MAAOC,cAAc;EAQzBzD,YACSC,OAAe,EACfyD,aAAqB,EACrBC,MAAc;IAFd,KAAA1D,OAAO,GAAPA,OAAO;IACP,KAAAyD,aAAa,GAAbA,aAAa;IACb,KAAAC,MAAM,GAANA,MAAM;IATP,KAAAC,KAAK,GAAG,IAAIC,GAAG,EAAyB;IACxC,KAAAC,MAAM,GAAG,IAAID,GAAG,EAA0B;IAC1C,KAAAE,OAAO,GAAG,IAAIF,GAAG,EAA2B;EAQpD;EAEA;;;EAGAb,IAAIA,CAACtB,IAAY,EAAEN,KAAU,EAAEO,OAA0B;IACvD,IAAI,CAACiC,KAAK,CAACI,GAAG,CAACtC,IAAI,EAAE,IAAIoB,aAAa,CAACpB,IAAI,EAAEN,KAAK,EAAEO,OAAO,IAAI,EAAE,CAAC,CAAC;EACrE;EAEA;;;EAGAsC,KAAKA,CAACvC,IAAY,EAAEN,KAAU,EAAEO,OAA0B;IACxD,IAAI,CAACmC,MAAM,CAACE,GAAG,CAACtC,IAAI,EAAE,IAAI2B,cAAc,CAAC3B,IAAI,EAAEN,KAAK,EAAEO,OAAO,IAAI,EAAE,CAAC,CAAC;EACvE;EAEA;;;EAGAuC,MAAMA,CAACxC,IAAY,EAAEN,KAAU,EAAEO,OAA0B;IACzD,IAAI,CAACoC,OAAO,CAACC,GAAG,CAACtC,IAAI,EAAE,IAAI6B,eAAe,CAAC7B,IAAI,EAAEN,KAAK,EAAEO,OAAO,IAAI,EAAE,CAAC,CAAC;EACzE;EAEA;;;EAGAwC,IAAIA,CAAC/C,KAAU,EAAEgD,WAAW,GAAG,kBAAkB;IAC/C,IAAIhD,KAAK,YAAYiD,IAAI,EAAE;MACzB,IAAI,CAACC,gBAAgB,GAAGlD,KAAK,CAACmD,IAAI;KACnC,MAAM;MACL,IAAI,CAACD,gBAAgB,GAAGF,WAAW;;IAErC,IAAI,IAAI,CAACE,gBAAgB,KAAK,mCAAmC,IAAIlD,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAChH;MACA,MAAMoD,KAAK,GAA4B,EAAE;MACzC,KAAK,MAAMvD,GAAG,IAAIwB,MAAM,CAACC,IAAI,CAACtB,KAAK,CAAC,EAAE;QACpC,IAAIqD,GAAG,GAAGrD,KAAK,CAACH,GAAG,CAAC;QACpB,IAAI,EAAEwD,GAAG,YAAYtC,KAAK,CAAC,EAAE;UAC3BsC,GAAG,GAAG,CAACA,GAAG,CAAC;;QAEb,KAAK,MAAMpC,CAAC,IAAIoC,GAAG,EAAE;UACnB,MAAMC,SAAS,GAAG,IAAI,CAACC,aAAa,CAACtC,CAAC,CAAC;UACvC,IAAIqC,SAAS,KAAK,IAAI,EAAE;YACtBF,KAAK,CAAC5B,IAAI,CAAC,CAAC3B,GAAG,EAAEyD,SAAS,CAAC,CAAC;;;;MAIlC,IAAI,CAACE,YAAY,GAAGJ,KAAK,CAACpC,GAAG,CAACyC,CAAC,IAAI,GAAG3D,kBAAkB,CAAC2D,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI3D,kBAAkB,CAAC2D,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAACtC,IAAI,CAAC,GAAG,CAAC;KACxG,MAAM,IAAI,IAAI,CAAC+B,gBAAgB,KAAK,qBAAqB,EAAE;MAC1D;MACA,MAAMQ,QAAQ,GAAG,IAAIC,QAAQ,EAAE;MAC/B,IAAI3D,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKW,SAAS,EAAE;QACzC,KAAK,MAAMd,GAAG,IAAIwB,MAAM,CAACC,IAAI,CAACtB,KAAK,CAAC,EAAE;UACpC,MAAMqD,GAAG,GAAGrD,KAAK,CAACH,GAAG,CAAC;UACtB,IAAIwD,GAAG,YAAYtC,KAAK,EAAE;YACxB,KAAK,MAAME,CAAC,IAAIoC,GAAG,EAAE;cACnB,MAAMO,QAAQ,GAAG,IAAI,CAACL,aAAa,CAACtC,CAAC,CAAC;cACtC,IAAI2C,QAAQ,KAAK,IAAI,EAAE;gBACrBF,QAAQ,CAAC/B,MAAM,CAAC9B,GAAG,EAAE+D,QAAQ,CAAC;;;WAGnC,MAAM;YACL,MAAMA,QAAQ,GAAG,IAAI,CAACL,aAAa,CAACF,GAAG,CAAC;YACxC,IAAIO,QAAQ,KAAK,IAAI,EAAE;cACrBF,QAAQ,CAACd,GAAG,CAAC/C,GAAG,EAAE+D,QAAQ,CAAC;;;;;MAKnC,IAAI,CAACJ,YAAY,GAAGE,QAAQ;KAC7B,MAAM;MACL;MACA,IAAI,CAACF,YAAY,GAAGxD,KAAK;;EAE7B;EAEQuD,aAAaA,CAACvD,KAAU;IAC9B,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKW,SAAS,EAAE;MACzC,OAAO,IAAI;;IAEb,IAAIX,KAAK,YAAYiD,IAAI,EAAE;MACzB,OAAOjD,KAAK;;IAEd,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO6D,IAAI,CAACC,SAAS,CAAC9D,KAAK,CAAC;;IAE9B,OAAOyB,MAAM,CAACzB,KAAK,CAAC;EACtB;EAEA;;;EAGA+D,KAAKA,CAAUxD,OAYd;IAECA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAEvB;IACA,IAAIqB,IAAI,GAAG,IAAI,CAACU,aAAa;IAC7B,KAAK,MAAM0B,SAAS,IAAI,IAAI,CAACxB,KAAK,CAACyB,MAAM,EAAE,EAAE;MAC3CrC,IAAI,GAAGoC,SAAS,CAACrC,MAAM,CAACC,IAAI,CAAC;;IAE/B,MAAMsC,GAAG,GAAG,IAAI,CAACrF,OAAO,GAAG+C,IAAI;IAE/B;IACA,IAAIuC,UAAU,GAAG,IAAI1E,4DAAU,CAAC;MAC9B2E,OAAO,EAAEhE;KACV,CAAC;IACF,KAAK,MAAMiE,UAAU,IAAI,IAAI,CAAC3B,MAAM,CAACuB,MAAM,EAAE,EAAE;MAC7CE,UAAU,GAAGE,UAAU,CAAC1C,MAAM,CAACwC,UAAU,CAAC;;IAG5C;IACA,IAAIG,WAAW,GAAG,IAAI5E,6DAAW,EAAE;IACnC,IAAIa,OAAO,CAACgE,MAAM,EAAE;MAClBD,WAAW,GAAGA,WAAW,CAAC3C,MAAM,CAAC,QAAQ,EAAEpB,OAAO,CAACgE,MAAM,CAAC;;IAE5D,KAAK,MAAMC,WAAW,IAAI,IAAI,CAAC7B,OAAO,CAACsB,MAAM,EAAE,EAAE;MAC/CK,WAAW,GAAGE,WAAW,CAAC7C,MAAM,CAAC2C,WAAW,CAAC;;IAG/C;IACA,IAAI,IAAI,CAACpB,gBAAgB,IAAI,EAAE,IAAI,CAACM,YAAY,YAAYG,QAAQ,CAAC,EAAE;MACrEW,WAAW,GAAGA,WAAW,CAAC1B,GAAG,CAAC,cAAc,EAAE,IAAI,CAACM,gBAAgB,CAAC;;IAGtE;IACA,OAAO,IAAI1D,6DAAW,CAAI,IAAI,CAAC+C,MAAM,CAACkC,WAAW,EAAE,EAAEP,GAAG,EAAE,IAAI,CAACV,YAAY,EAAE;MAC3EtB,MAAM,EAAEiC,UAAU;MAClB/B,OAAO,EAAEkC,WAAW;MACpBI,YAAY,EAAEnE,OAAO,CAACmE,YAAY;MAClCC,cAAc,EAAEpE,OAAO,CAACoE,cAAc;MACtCC,OAAO,EAAErE,OAAO,CAACqE;KAClB,CAAC;EACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9WsD;AACI;AACM;AACJ;AACR;AACU;AACV;AACM;AACJ;AACI;AACE;AACJ;AACM;;;;;;;;;;;;;;;;;;;;;;ACZhE;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOC,YAAa,SAAQ9F,sDAAW;EAC3CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAA4G,gBAAgB,GAAG,gBAAgB;EAAC;EAEpD;;;;;;;;;;EAUAC,qBAAqBA,CACnB5D,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEgG,YAAY,CAACgB,gBAAgB,EAAE,KAAK,CAAC;IACjF,IAAI3D,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAC,YAAYA,CACVjE,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACkB,qBAAqB,CAAC5D,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAqD,aAAa,GAAG,aAAa;EAAC;EAE9C;;;;;;;;;;EAUAC,kBAAkBA,CAChBnE,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEgG,YAAY,CAACuB,aAAa,EAAE,KAAK,CAAC;IAC9E,IAAIlE,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAI,SAASA,CACPpE,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACyB,kBAAkB,CAACnE,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAClDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;;;uBAlPW8B,YAAY,EAAA1F,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAZuF,YAAY;MAAApG,OAAA,EAAZoG,YAAY,CAAAnG,IAAA;MAAAI,UAAA,EADC;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOgG,cAAe,SAAQ/F,sDAAW;EAC7CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAsH,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClBtE,MA2BC,EACD0C,OAAqB;IA+OrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACyB,eAAe,EAAE,KAAK,CAAC;IAClF,IAAIrE,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA6OL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAU,WAAWA,CACT1E,MA2BC,EACD0C,OAAqB;IA+OrB,OAAO,IAAI,CAAC4B,oBAAoB,CAACtE,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CA6OT,IA6OGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8D,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClB5E,MAMC,EACD0C,OAAqB;IAoOrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAAC+B,eAAe,EAAE,KAAK,CAAC;IAClF,IAAI3E,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAkOL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAc,WAAWA,CACT9E,MAMC,EACD0C,OAAqB;IAoOrB,OAAO,IAAI,CAACkC,oBAAoB,CAAC5E,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAkOT,IAkOGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAkE,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBhF,MAgNC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACmC,iBAAiB,EAAE,MAAM,CAAC;IACrF,IAAI/E,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAiB,aAAaA,CACXjF,MAgNC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACsC,sBAAsB,CAAChF,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAqE,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBnF,MAqNC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACsC,iBAAiB,EAAE,MAAM,CAAC;IACrF,IAAIlF,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAoB,aAAaA,CACXpF,MAqNC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACyC,sBAAsB,CAACnF,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAwE,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBtF,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACyC,iBAAiB,EAAE,MAAM,CAAC;IACrF,IAAIrF,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAuB,aAAaA,CACXvF,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC4C,sBAAsB,CAACtF,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA2E,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5BzF,MA2BC,EACD0C,OAAqB;IA2DrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAAC4C,yBAAyB,EAAE,KAAK,CAAC;IAC5F,IAAIxF,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAyDL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0B,qBAAqBA,CACnB1F,MA2BC,EACD0C,OAAqB;IA2DrB,OAAO,IAAI,CAAC+C,8BAA8B,CAACzF,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAyDT,IAyDGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8E,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5B5F,MAMC,EACD0C,OAAqB;IA2CrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAAC+C,yBAAyB,EAAE,KAAK,CAAC;IAC5F,IAAI3F,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAyCL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6B,qBAAqBA,CACnB7F,MAMC,EACD0C,OAAqB;IA2CrB,OAAO,IAAI,CAACkD,8BAA8B,CAAC5F,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAyCT,IAyCGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAiF,2BAA2B,GAAG,4BAA4B;EAAC;EAE3E;;;;;;;;;;EAUAC,gCAAgCA,CAC9B/F,MAaC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACkD,2BAA2B,EAAE,MAAM,CAAC;IAC/F,IAAI9F,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgC,uBAAuBA,CACrBhG,MAaC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACqD,gCAAgC,CAAC/F,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAoF,2BAA2B,GAAG,4BAA4B;EAAC;EAE3E;;;;;;;;;;EAUAC,gCAAgCA,CAC9BlG,MAkBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACqD,2BAA2B,EAAE,MAAM,CAAC;IAC/F,IAAIjG,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmC,uBAAuBA,CACrBnG,MAkBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACwD,gCAAgC,CAAClG,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAuF,2BAA2B,GAAG,4BAA4B;EAAC;EAE3E;;;;;;;;;;EAUAC,gCAAgCA,CAC9BrG,MAkBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACwD,2BAA2B,EAAE,MAAM,CAAC;IAC/F,IAAIpG,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsC,uBAAuBA,CACrBtG,MAkBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC2D,gCAAgC,CAACrG,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0F,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1BxG,MA2BC,EACD0C,OAAqB;IA6CrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAAC2D,uBAAuB,EAAE,KAAK,CAAC;IAC1F,IAAIvG,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA2CL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyC,mBAAmBA,CACjBzG,MA2BC,EACD0C,OAAqB;IA6CrB,OAAO,IAAI,CAAC8D,4BAA4B,CAACxG,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CA2CT,IA2CGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6F,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1B3G,MAMC,EACD0C,OAAqB;IAkCrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAAC8D,uBAAuB,EAAE,KAAK,CAAC;IAC1F,IAAI1G,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgCL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4C,mBAAmBA,CACjB5G,MAMC,EACD0C,OAAqB;IAkCrB,OAAO,IAAI,CAACiE,4BAA4B,CAAC3G,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAgCT,IAgCGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgG,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5B9G,MAmBC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACiE,yBAAyB,EAAE,MAAM,CAAC;IAC7F,IAAI7G,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+C,qBAAqBA,CACnB/G,MAmBC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACoE,8BAA8B,CAAC9G,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmG,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5BjH,MAwBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACoE,yBAAyB,EAAE,MAAM,CAAC;IAC7F,IAAIhH,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAkD,qBAAqBA,CACnBlH,MAwBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACuE,8BAA8B,CAACjH,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAsG,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5BpH,MAaC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACuE,yBAAyB,EAAE,MAAM,CAAC;IAC7F,IAAInH,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqD,qBAAqBA,CACnBrH,MAaC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC0E,8BAA8B,CAACpH,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAyG,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1BvH,MAqCC,EACD0C,OAAqB;IAsIrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAAC0E,uBAAuB,EAAE,KAAK,CAAC;IAC1F,IAAItH,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,eAAe,EAAEX,MAAM,CAACwH,aAAa,EAAE,EAAE,CAAC;MACnD3D,EAAE,CAAClD,KAAK,CAAC,aAAa,EAAEX,MAAM,CAACyH,WAAW,EAAE,EAAE,CAAC;MAC/C5D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAoIL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0D,mBAAmBA,CACjB1H,MAqCC,EACD0C,OAAqB;IAsIrB,OAAO,IAAI,CAAC6E,4BAA4B,CAACvH,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAoIT,IAoIGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8G,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1B5H,MAMC,EACD0C,OAAqB;IA2HrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAAC+E,uBAAuB,EAAE,KAAK,CAAC;IAC1F,IAAI3H,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAyHL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6D,mBAAmBA,CACjB7H,MAMC,EACD0C,OAAqB;IA2HrB,OAAO,IAAI,CAACkF,4BAA4B,CAAC5H,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAyHT,IAyHGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAiH,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5B/H,MAmFC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACkF,yBAAyB,EAAE,MAAM,CAAC;IAC7F,IAAI9H,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgE,qBAAqBA,CACnBhI,MAmFC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACqF,8BAA8B,CAAC/H,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAoH,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5BlI,MAwFC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACqF,yBAAyB,EAAE,MAAM,CAAC;IAC7F,IAAIjI,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmE,qBAAqBA,CACnBnI,MAwFC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACwF,8BAA8B,CAAClI,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAuH,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5BrI,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEiG,cAAc,CAACwF,yBAAyB,EAAE,MAAM,CAAC;IAC7F,IAAIpI,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsE,qBAAqBA,CACnBtI,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC2F,8BAA8B,CAACrI,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBAh+OW+B,cAAc,EAAA3F,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAdwF,cAAc;MAAArG,OAAA,EAAdqG,cAAc,CAAApG,IAAA;MAAAI,UAAA,EADD;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOiG,iBAAkB,SAAQhG,sDAAW;EAChDH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAwL,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrBxI,MAiCC,EACD0C,OAAqB;IAuYrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAAC0F,kBAAkB,EAAE,KAAK,CAAC;IACxF,IAAIvI,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqYL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyE,cAAcA,CACZzI,MAiCC,EACD0C,OAAqB;IAuYrB,OAAO,IAAI,CAAC8F,uBAAuB,CAACxI,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAqYT,IAqYGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6H,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1B3I,MACC,EACD0C,OAAqB;IAuLrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAAC6F,uBAAuB,EAAE,KAAK,CAAC;IAC7F,IAAI1I,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqLL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4E,mBAAmBA,CACjB5I,MACC,EACD0C,OAAqB;IAuLrB,OAAO,IAAI,CAACiG,4BAA4B,CAAC3I,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAqLT,IAqLGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgI,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrB9I,MAMC,EACD0C,OAAqB;IA4XrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACgG,kBAAkB,EAAE,KAAK,CAAC;IACxF,IAAI7I,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA0XL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+E,cAAcA,CACZ/I,MAMC,EACD0C,OAAqB;IA4XrB,OAAO,IAAI,CAACoG,uBAAuB,CAAC9I,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CA0XT,IA0XGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmI,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvBjJ,MA+KC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACmG,oBAAoB,EAAE,MAAM,CAAC;IAC3F,IAAIhJ,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAkF,gBAAgBA,CACdlJ,MA+KC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACuG,yBAAyB,CAACjJ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAsI,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvBpJ,MAyLC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACsG,oBAAoB,EAAE,MAAM,CAAC;IAC3F,IAAInJ,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqF,gBAAgBA,CACdrJ,MAyLC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC0G,yBAAyB,CAACpJ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAyI,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvBvJ,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACyG,oBAAoB,EAAE,MAAM,CAAC;IAC3F,IAAItJ,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAwF,gBAAgBA,CACdxJ,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC6G,yBAAyB,CAACvJ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA4I,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5B1J,MAgCC,EACD0C,OAAqB;IA6GrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAAC4G,yBAAyB,EAAE,KAAK,CAAC;IAC/F,IAAIzJ,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;MAC7BhB,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA2GJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA2F,qBAAqBA,CACnB3J,MAgCC,EACD0C,OAAqB;IA6GrB,OAAO,IAAI,CAACgH,8BAA8B,CAAC1J,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CA2GR,IA2GGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA+I,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5B7J,MAMC,EACD0C,OAAqB;IA6GrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAAC+G,yBAAyB,EAAE,KAAK,CAAC;IAC/F,IAAI5J,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA2GL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA8F,qBAAqBA,CACnB9J,MAMC,EACD0C,OAAqB;IA6GrB,OAAO,IAAI,CAACmH,8BAA8B,CAAC7J,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CA2GT,IA2GGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAkJ,2BAA2B,GAAG,4BAA4B;EAAC;EAE3E;;;;;;;;;;EAUAC,gCAAgCA,CAC9BhK,MA8FC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACkH,2BAA2B,EAAE,MAAM,CAAC;IAClG,IAAI/J,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAiG,uBAAuBA,CACrBjK,MA8FC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACsH,gCAAgC,CAAChK,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAqJ,2BAA2B,GAAG,4BAA4B;EAAC;EAE3E;;;;;;;;;;EAUAC,gCAAgCA,CAC9BnK,MAmGC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACqH,2BAA2B,EAAE,MAAM,CAAC;IAClG,IAAIlK,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAoG,uBAAuBA,CACrBpK,MAmGC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACyH,gCAAgC,CAACnK,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAwJ,2BAA2B,GAAG,4BAA4B;EAAC;EAE3E;;;;;;;;;;EAUAC,gCAAgCA,CAC9BtK,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACwH,2BAA2B,EAAE,MAAM,CAAC;IAClG,IAAIrK,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAuG,uBAAuBA,CACrBvK,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC4H,gCAAgC,CAACtK,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA2J,2BAA2B,GAAG,4BAA4B;EAAC;EAE3E;;;;;;;;;;EAUAC,gCAAgCA,CAC9BzK,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAAC2H,2BAA2B,EAAE,KAAK,CAAC;IACjG,IAAIxK,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0G,uBAAuBA,CACrB1K,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC+H,gCAAgC,CAACzK,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA8J,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrB5K,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAAC8H,kBAAkB,EAAE,KAAK,CAAC;IACxF,IAAI3K,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6G,cAAcA,CACZ7K,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACkI,uBAAuB,CAAC5K,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAiK,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvB/K,MAuBC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACiI,oBAAoB,EAAE,KAAK,CAAC;IAC1F,IAAI9K,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgH,gBAAgBA,CACdhL,MAuBC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACqI,yBAAyB,CAAC/K,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAoK,4BAA4B,GAAG,6BAA6B;EAAC;EAE7E;;;;;;;;;;EAUAC,iCAAiCA,CAC/BlL,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACoI,4BAA4B,EAAE,KAAK,CAAC;IAClG,IAAIjL,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmH,wBAAwBA,CACtBnL,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACwI,iCAAiC,CAAClL,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACjEjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAuK,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvBrL,MAaC,EACD0C,OAAqB;IAcrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAACuI,oBAAoB,EAAE,MAAM,CAAC;IAC3F,IAAIpL,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAYL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsH,gBAAgBA,CACdtL,MAaC,EACD0C,OAAqB;IAcrB,OAAO,IAAI,CAAC2I,yBAAyB,CAACrL,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAYT,IAYGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0K,2BAA2B,GAAG,4BAA4B;EAAC;EAE3E;;;;;;;;;;EAUAC,gCAAgCA,CAC9BxL,MAMC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAAC0I,2BAA2B,EAAE,KAAK,CAAC;IACjG,IAAIvL,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyL,UAAU,EAAE,EAAE,CAAC;;IAG/C,OAAO,IAAI,CAAC1O,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0H,uBAAuBA,CACrB1L,MAMC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC8I,gCAAgC,CAACxL,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8K,0BAA0B,GAAG,2BAA2B;EAAC;EAEzE;;;;;;;;;;EAUAC,+BAA+BA,CAC7B5L,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEkG,iBAAiB,CAAC8I,0BAA0B,EAAE,KAAK,CAAC;IAChG,IAAI3L,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyL,UAAU,EAAE,EAAE,CAAC;;IAG/C,OAAO,IAAI,CAAC1O,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6H,sBAAsBA,CACpB7L,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACkJ,+BAA+B,CAAC5L,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC/DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBA9iRWgC,iBAAiB,EAAA5F,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAjByF,iBAAiB;MAAAtG,OAAA,EAAjBsG,iBAAiB,CAAArG,IAAA;MAAAI,UAAA,EADJ;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOkG,eAAgB,SAAQjG,sDAAW;EAC9CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAA+O,gBAAgB,GAAG,gBAAgB;EAAC;EAEpD;;;;;;;;;;EAUAC,qBAAqBA,CACnB/L,MAiCC,EACD0C,OAAqB;IAmVrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACgJ,gBAAgB,EAAE,KAAK,CAAC;IACpF,IAAI9L,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAiVL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgI,YAAYA,CACVhM,MAiCC,EACD0C,OAAqB;IAmVrB,OAAO,IAAI,CAACqJ,qBAAqB,CAAC/L,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CAiVT,IAiVGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAoL,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxBlM,MACC,EACD0C,OAAqB;IAuLrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACmJ,qBAAqB,EAAE,KAAK,CAAC;IACzF,IAAIjM,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqLL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmI,iBAAiBA,CACfnM,MACC,EACD0C,OAAqB;IAuLrB,OAAO,IAAI,CAACwJ,0BAA0B,CAAClM,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAqLT,IAqLGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAuL,gBAAgB,GAAG,gBAAgB;EAAC;EAEpD;;;;;;;;;;EAUAC,qBAAqBA,CACnBrM,MAMC,EACD0C,OAAqB;IA8UrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACsJ,gBAAgB,EAAE,KAAK,CAAC;IACpF,IAAIpM,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA4UL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsI,YAAYA,CACVtM,MAMC,EACD0C,OAAqB;IA8UrB,OAAO,IAAI,CAAC2J,qBAAqB,CAACrM,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CA4UT,IA4UGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0L,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrBxM,MAoOC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACyJ,kBAAkB,EAAE,MAAM,CAAC;IACvF,IAAIvM,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyI,cAAcA,CACZzM,MAoOC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC8J,uBAAuB,CAACxM,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6L,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrB3M,MAyOC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAAC4J,kBAAkB,EAAE,MAAM,CAAC;IACvF,IAAI1M,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4I,cAAcA,CACZ5M,MAyOC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACiK,uBAAuB,CAAC3M,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgM,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrB9M,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAAC+J,kBAAkB,EAAE,MAAM,CAAC;IACvF,IAAI7M,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+I,cAAcA,CACZ/M,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACoK,uBAAuB,CAAC9M,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmM,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBjN,MAWC,EACD0C,OAAqB;IAgDrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACkK,iBAAiB,EAAE,KAAK,CAAC;IACrF,IAAIhN,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACkN,OAAO,EAAE,EAAE,CAAC;MACvCrJ,EAAE,CAAClD,KAAK,CAAC,KAAK,EAAEX,MAAM,CAACmN,GAAG,EAAE,EAAE,CAAC;;IAGjC,OAAO,IAAI,CAACpQ,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA8CJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAoJ,aAAaA,CACXpN,MAWC,EACD0C,OAAqB;IAgDrB,OAAO,IAAI,CAACuK,sBAAsB,CAACjN,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CA8CR,IA8CGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAwM,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzBtN,MAkBC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACuK,sBAAsB,EAAE,MAAM,CAAC;IAC3F,IAAIrN,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,qBAAqB,CAAC;;IAG7C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAuJ,kBAAkBA,CAChBvN,MAkBC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC4K,2BAA2B,CAACtN,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA2M,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzBzN,MAkBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAAC0K,sBAAsB,EAAE,MAAM,CAAC;IAC3F,IAAIxN,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0J,kBAAkBA,CAChB1N,MAkBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC+K,2BAA2B,CAACzN,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8M,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxB5N,MA2BC,EACD0C,OAAqB;IA4CrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAAC6K,qBAAqB,EAAE,KAAK,CAAC;IACzF,IAAI3N,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA0CL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6J,iBAAiBA,CACf7N,MA2BC,EACD0C,OAAqB;IA4CrB,OAAO,IAAI,CAACkL,0BAA0B,CAAC5N,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CA0CT,IA0CGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAiN,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxB/N,MAMC,EACD0C,OAAqB;IAiCrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACgL,qBAAqB,EAAE,KAAK,CAAC;IACzF,IAAI9N,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA+BL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgK,iBAAiBA,CACfhO,MAMC,EACD0C,OAAqB;IAiCrB,OAAO,IAAI,CAACqL,0BAA0B,CAAC/N,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CA+BT,IA+BGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAoN,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1BlO,MAaC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACmL,uBAAuB,EAAE,MAAM,CAAC;IAC5F,IAAIjO,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmK,mBAAmBA,CACjBnO,MAaC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACwL,4BAA4B,CAAClO,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAuN,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1BrO,MAkBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACsL,uBAAuB,EAAE,MAAM,CAAC;IAC5F,IAAIpO,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsK,mBAAmBA,CACjBtO,MAkBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC2L,4BAA4B,CAACrO,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0N,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1BxO,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACyL,uBAAuB,EAAE,MAAM,CAAC;IAC5F,IAAIvO,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyK,mBAAmBA,CACjBzO,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC8L,4BAA4B,CAACxO,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6N,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrB3O,MAuBC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAAC4L,kBAAkB,EAAE,KAAK,CAAC;IACtF,IAAI1O,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4K,cAAcA,CACZ5O,MAuBC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACiM,uBAAuB,CAAC3O,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgO,0BAA0B,GAAG,2BAA2B;EAAC;EAEzE;;;;;;;;;;EAUAC,+BAA+BA,CAC7B9O,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAAC+L,0BAA0B,EAAE,KAAK,CAAC;IAC9F,IAAI7O,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+K,sBAAsBA,CACpB/O,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACoM,+BAA+B,CAAC9O,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC/DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmO,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrBjP,MAaC,EACD0C,OAAqB;IAcrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACkM,kBAAkB,EAAE,MAAM,CAAC;IACvF,IAAIhP,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAYL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAkL,cAAcA,CACZlP,MAaC,EACD0C,OAAqB;IAcrB,OAAO,IAAI,CAACuM,uBAAuB,CAACjP,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAYT,IAYGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAsO,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5BpP,MAMC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACqM,yBAAyB,EAAE,KAAK,CAAC;IAC7F,IAAInP,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyL,UAAU,EAAE,EAAE,CAAC;;IAG/C,OAAO,IAAI,CAAC1O,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqL,qBAAqBA,CACnBrP,MAMC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC0M,8BAA8B,CAACpP,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAyO,wBAAwB,GAAG,yBAAyB;EAAC;EAErE;;;;;;;;;;EAUAC,6BAA6BA,CAC3BvP,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEmG,eAAe,CAACwM,wBAAwB,EAAE,KAAK,CAAC;IAC5F,IAAItP,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyL,UAAU,EAAE,EAAE,CAAC;;IAG/C,OAAO,IAAI,CAAC1O,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAwL,oBAAoBA,CAClBxP,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC6M,6BAA6B,CAACvP,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBAlkPWiC,eAAe,EAAA7F,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAf0F,eAAe;MAAAvG,OAAA,EAAfuG,eAAe,CAAAtG,IAAA;MAAAI,UAAA,EADF;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOmG,WAAY,SAAQlG,sDAAW;EAC1CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAA0S,YAAY,GAAG,YAAY;EAAC;EAE5C;;;;;;EAMAC,iBAAiBA,CACf1P,MACC,EACD0C,OAAqB;IAwBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEoG,WAAW,CAAC0M,YAAY,EAAE,KAAK,CAAC;IAC5E,IAAIzP,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAsBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMA2L,QAAQA,CACN3P,MACC,EACD0C,OAAqB;IAwBrB,OAAO,IAAI,CAACgN,iBAAiB,CAAC1P,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACjDjF,mDAAG,CAAEkF,CAsBT,IAsBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA+O,YAAY,GAAG,YAAY;EAAC;EAE5C;;;;;;EAMAC,iBAAiBA,CACf7P,MACC,EACD0C,OAAqB;IAwBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEoG,WAAW,CAAC6M,YAAY,EAAE,KAAK,CAAC;IAC5E,IAAI5P,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAsBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMA8L,QAAQA,CACN9P,MACC,EACD0C,OAAqB;IAwBrB,OAAO,IAAI,CAACmN,iBAAiB,CAAC7P,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACjDjF,mDAAG,CAAEkF,CAsBT,IAsBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAkP,cAAc,GAAG,cAAc;EAAC;EAEhD;;;;;;EAMAC,mBAAmBA,CACjBhQ,MACC,EACD0C,OAAqB;IAwBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEoG,WAAW,CAACgN,cAAc,EAAE,KAAK,CAAC;IAC9E,IAAI/P,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAsBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAiM,UAAUA,CACRjQ,MACC,EACD0C,OAAqB;IAwBrB,OAAO,IAAI,CAACsN,mBAAmB,CAAChQ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnDjF,mDAAG,CAAEkF,CAsBT,IAsBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAqP,cAAc,GAAG,cAAc;EAAC;EAEhD;;;;;;EAMAC,mBAAmBA,CACjBnQ,MACC,EACD0C,OAAqB;IAwBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEoG,WAAW,CAACmN,cAAc,EAAE,KAAK,CAAC;IAC9E,IAAIlQ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAsBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAoM,UAAUA,CACRpQ,MACC,EACD0C,OAAqB;IAwBrB,OAAO,IAAI,CAACyN,mBAAmB,CAACnQ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnDjF,mDAAG,CAAEkF,CAsBT,IAsBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBA3mBWkC,WAAW,EAAA9F,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAX2F,WAAW;MAAAxG,OAAA,EAAXwG,WAAW,CAAAvG,IAAA;MAAAI,UAAA,EADE;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOoG,gBAAiB,SAAQnG,sDAAW;EAC/CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAsT,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBtQ,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAACqN,iBAAiB,EAAE,KAAK,CAAC;IACtF,IAAIrQ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAuM,aAAaA,CACXvQ,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAAC4N,sBAAsB,CAACtQ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA2P,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvBzQ,MACC,EACD0C,OAAqB;IAiCrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAACwN,oBAAoB,EAAE,KAAK,CAAC;IACzF,IAAIxQ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA+BJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0M,gBAAgBA,CACd1Q,MACC,EACD0C,OAAqB;IAiCrB,OAAO,IAAI,CAAC+N,yBAAyB,CAACzQ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CA+BR,IA+BGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA8P,wBAAwB,GAAG,yBAAyB;EAAC;EAErE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B5Q,MAMC,EACD0C,OAAqB;IAiCrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAAC2N,wBAAwB,EAAE,KAAK,CAAC;IAC7F,IAAI3Q,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA+BJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6M,oBAAoBA,CAClB7Q,MAMC,EACD0C,OAAqB;IAiCrB,OAAO,IAAI,CAACkO,6BAA6B,CAAC5Q,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CA+BR,IA+BGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAiQ,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpB/Q,MAWC,EACD0C,OAAqB;IAiCrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAAC8N,iBAAiB,EAAE,KAAK,CAAC;IACtF,IAAI9Q,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACgR,UAAU,EAAE,EAAE,CAAC;MAC7CnN,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAACiR,MAAM,EAAE,EAAE,CAAC;;IAGvC,OAAO,IAAI,CAAClU,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA+BJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAkN,aAAaA,CACXlR,MAWC,EACD0C,OAAqB;IAiCrB,OAAO,IAAI,CAACqO,sBAAsB,CAAC/Q,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CA+BR,IA+BGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAsQ,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxBpR,MAMC,EACD0C,OAAqB;IAiCrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAACmO,qBAAqB,EAAE,KAAK,CAAC;IAC1F,IAAInR,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA+BJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqN,iBAAiBA,CACfrR,MAMC,EACD0C,OAAqB;IAiCrB,OAAO,IAAI,CAAC0O,0BAA0B,CAACpR,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CA+BR,IA+BGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAyQ,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrBvR,MAqBC,EACD0C,OAAqB;IAsCrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAACsO,kBAAkB,EAAE,KAAK,CAAC;IACvF,IAAItR,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACgR,UAAU,EAAE,EAAE,CAAC;MAC7CnN,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACwR,OAAO,EAAE,EAAE,CAAC;MACvC3N,EAAE,CAAClD,KAAK,CAAC,mBAAmB,EAAEX,MAAM,CAACyR,iBAAiB,EAAE,EAAE,CAAC;MAC3D5N,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAACiR,MAAM,EAAE,EAAE,CAAC;;IAGvC,OAAO,IAAI,CAAClU,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAoCJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0N,cAAcA,CACZ1R,MAqBC,EACD0C,OAAqB;IAsCrB,OAAO,IAAI,CAAC6O,uBAAuB,CAACvR,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAoCR,IAoCGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA8Q,mBAAmB,GAAG,mBAAmB;EAAC;EAE1D;;;;;;;;;;EAUAC,wBAAwBA,CACtB5R,MAWC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAAC2O,mBAAmB,EAAE,KAAK,CAAC;IACxF,IAAI3R,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACgR,UAAU,EAAE,EAAE,CAAC;MAC7CnN,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAACiR,MAAM,EAAE,EAAE,CAAC;;IAGvC,OAAO,IAAI,CAAClU,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6N,eAAeA,CACb7R,MAWC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACkP,wBAAwB,CAAC5R,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACxDjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAiR,mBAAmB,GAAG,mBAAmB;EAAC;EAE1D;;;;;;;;;;EAUAC,wBAAwBA,CACtB/R,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAAC8O,mBAAmB,EAAE,KAAK,CAAC;IACxF,IAAI9R,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgO,eAAeA,CACbhS,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACqP,wBAAwB,CAAC/R,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACxDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAoR,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrBlS,MAyCC,EACD0C,OAAqB;IAwGrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEqG,gBAAgB,CAACiP,kBAAkB,EAAE,KAAK,CAAC;IACvF,IAAIjS,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;MACvCtO,EAAE,CAAClD,KAAK,CAAC,sBAAsB,EAAEX,MAAM,CAACoS,oBAAoB,EAAE,EAAE,CAAC;MACjEvO,EAAE,CAAClD,KAAK,CAAC,mBAAmB,EAAEX,MAAM,CAACqS,iBAAiB,EAAE,EAAE,CAAC;MAC3DxO,EAAE,CAAClD,KAAK,CAAC,oBAAoB,EAAEX,MAAM,CAACsS,kBAAkB,EAAE,EAAE,CAAC;MAC7DzO,EAAE,CAAClD,KAAK,CAAC,oBAAoB,EAAEX,MAAM,CAACuS,kBAAkB,EAAE,EAAE,CAAC;MAC7D1O,EAAE,CAAClD,KAAK,CAAC,iBAAiB,EAAEX,MAAM,CAACwS,eAAe,EAAE,EAAE,CAAC;MACvD3O,EAAE,CAAClD,KAAK,CAAC,kBAAkB,EAAEX,MAAM,CAACyS,gBAAgB,EAAE,EAAE,CAAC;MACzD5O,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAAC0S,UAAU,EAAE,EAAE,CAAC;;IAG/C,OAAO,IAAI,CAAC3V,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAsGJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA2O,cAAcA,CACZ3S,MAyCC,EACD0C,OAAqB;IAwGrB,OAAO,IAAI,CAACwP,uBAAuB,CAAClS,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAsGR,IAsGGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;;;uBAlpEWmC,gBAAgB,EAAA/F,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAhB4F,gBAAgB;MAAAzG,OAAA,EAAhByG,gBAAgB,CAAAxG,IAAA;MAAAI,UAAA,EADH;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOqG,WAAY,SAAQpG,sDAAW;EAC1CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAA6V,YAAY,GAAG,YAAY;EAAC;EAE5C;;;;;;;;;;EAUAC,iBAAiBA,CACf7S,MA0BC,EACD0C,OAAqB;IAgErB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEsG,WAAW,CAAC2P,YAAY,EAAE,KAAK,CAAC;IAC5E,IAAI5S,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACkN,OAAO,EAAE,EAAE,CAAC;MACvCrJ,EAAE,CAAClD,KAAK,CAAC,WAAW,EAAEX,MAAM,CAAC8S,SAAS,EAAE,EAAE,CAAC;MAC3CjP,EAAE,CAAClD,KAAK,CAAC,KAAK,EAAEX,MAAM,CAACmN,GAAG,EAAE,EAAE,CAAC;;IAGjC,OAAO,IAAI,CAACpQ,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA8DL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+O,QAAQA,CACN/S,MA0BC,EACD0C,OAAqB;IAgErB,OAAO,IAAI,CAACmQ,iBAAiB,CAAC7S,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACjDjF,mDAAG,CAAEkF,CA8DT,IA8DGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmS,YAAY,GAAG,YAAY;EAAC;EAE5C;;;;;;;;;;EAUAC,iBAAiBA,CACfjT,MAMC,EACD0C,OAAqB;IAqDrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEsG,WAAW,CAAC+P,YAAY,EAAE,KAAK,CAAC;IAC5E,IAAIhT,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAmDL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAkP,QAAQA,CACNlT,MAMC,EACD0C,OAAqB;IAqDrB,OAAO,IAAI,CAACuQ,iBAAiB,CAACjT,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACjDjF,mDAAG,CAAEkF,CAmDT,IAmDGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAsS,cAAc,GAAG,cAAc;EAAC;EAEhD;;;;;;;;;;EAUAC,mBAAmBA,CACjBpT,MAuBC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEsG,WAAW,CAACkQ,cAAc,EAAE,MAAM,CAAC;IAC/E,IAAInT,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,qBAAqB,CAAC;;IAG7C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqP,UAAUA,CACRrT,MAuBC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC0Q,mBAAmB,CAACpT,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAyS,cAAc,GAAG,cAAc;EAAC;EAEhD;;;;;;;;;;EAUAC,mBAAmBA,CACjBvT,MA4BC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEsG,WAAW,CAACqQ,cAAc,EAAE,MAAM,CAAC;IAC/E,IAAItT,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,qBAAqB,CAAC;;IAG7C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAwP,UAAUA,CACRxT,MA4BC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC6Q,mBAAmB,CAACvT,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA4S,cAAc,GAAG,cAAc;EAAC;EAEhD;;;;;;;;;;EAUAC,mBAAmBA,CACjB1T,MAuBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEsG,WAAW,CAACwQ,cAAc,EAAE,MAAM,CAAC;IAC/E,IAAIzT,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA2P,UAAUA,CACR3T,MAuBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACgR,mBAAmB,CAAC1T,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA+S,gBAAgB,GAAG,gBAAgB;EAAC;EAEpD;;;;;;;;;;EAUAC,qBAAqBA,CACnB7T,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEsG,WAAW,CAAC2Q,gBAAgB,EAAE,KAAK,CAAC;IAChF,IAAI5T,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA8P,YAAYA,CACV9T,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACmR,qBAAqB,CAAC7T,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBAjxCWoC,WAAW,EAAAhG,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAX6F,WAAW;MAAA1G,OAAA,EAAX0G,WAAW,CAAAzG,IAAA;MAAAI,UAAA,EADE;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOsG,cAAe,SAAQrG,sDAAW;EAC7CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAgX,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClBhU,MA2BC,EACD0C,OAAqB;IAsErB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEuG,cAAc,CAAC6Q,eAAe,EAAE,KAAK,CAAC;IAClF,IAAI/T,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAoEL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAiQ,WAAWA,CACTjU,MA2BC,EACD0C,OAAqB;IAsErB,OAAO,IAAI,CAACsR,oBAAoB,CAAChU,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAoET,IAoEGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAqT,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBnU,MACC,EACD0C,OAAqB;IAuLrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEuG,cAAc,CAACgR,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAIlU,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqLL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAoQ,gBAAgBA,CACdpU,MACC,EACD0C,OAAqB;IAuLrB,OAAO,IAAI,CAACyR,yBAAyB,CAACnU,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAqLT,IAqLGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAwT,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBtU,MACC,EACD0C,OAAqB;IASrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEuG,cAAc,CAACmR,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAIrU,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAOL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAuQ,gBAAgBA,CACdvU,MACC,EACD0C,OAAqB;IASrB,OAAO,IAAI,CAAC4R,yBAAyB,CAACtU,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAOT,IAOGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA2T,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClBzU,MA4CC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEuG,cAAc,CAACsR,eAAe,EAAE,MAAM,CAAC;IACnF,IAAIxU,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0Q,WAAWA,CACT1U,MA4CC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC+R,oBAAoB,CAACzU,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8T,kBAAkB,GAAG,mBAAmB;EAAC;EAEzD;;;;;;;;;;EAUAC,uBAAuBA,CACrB5U,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEuG,cAAc,CAACyR,kBAAkB,EAAE,MAAM,CAAC;IACtF,IAAI3U,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6Q,cAAcA,CACZ7U,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACkS,uBAAuB,CAAC5U,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAiU,iBAAiB,GAAG,kBAAkB;EAAC;EAEvD;;;;;;;;;;EAUAC,sBAAsBA,CACpB/U,MACC,EACD0C,OAAqB;IAuBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEuG,cAAc,CAAC4R,iBAAiB,EAAE,KAAK,CAAC;IACpF,IAAI9U,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgR,aAAaA,CACXhV,MACC,EACD0C,OAAqB;IAuBrB,OAAO,IAAI,CAACqS,sBAAsB,CAAC/U,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAqBR,IAqBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAoU,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBlV,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEuG,cAAc,CAAC+R,iBAAiB,EAAE,MAAM,CAAC;IACrF,IAAIjV,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmR,aAAaA,CACXnV,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACwS,sBAAsB,CAAClV,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBA99DWqC,cAAc,EAAAjG,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAd8F,cAAc;MAAA3G,OAAA,EAAd2G,cAAc,CAAA1G,IAAA;MAAAI,UAAA,EADD;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOuG,YAAa,SAAQtG,sDAAW;EAC3CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAqY,kBAAkB,GAAG,mBAAmB;EAAC;EAEzD;;;;;;;;;;EAUAC,uBAAuBA,CACrBrV,MACC,EACD0C,OAAqB;IAuLrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEwG,YAAY,CAACiS,kBAAkB,EAAE,KAAK,CAAC;IACnF,IAAIpV,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqLL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsR,cAAcA,CACZtV,MACC,EACD0C,OAAqB;IAuLrB,OAAO,IAAI,CAAC2S,uBAAuB,CAACrV,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAqLT,IAqLGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0U,kBAAkB,GAAG,mBAAmB;EAAC;EAEzD;;;;;;;;;;EAUAC,uBAAuBA,CACrBxV,MAMC,EACD0C,OAAqB;IAerB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEwG,YAAY,CAACoS,kBAAkB,EAAE,KAAK,CAAC;IACnF,IAAIvV,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAACpV,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAaL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyR,cAAcA,CACZzV,MAMC,EACD0C,OAAqB;IAerB,OAAO,IAAI,CAAC8S,uBAAuB,CAACxV,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAaT,IAaGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6U,aAAa,GAAG,aAAa;EAAC;EAE9C;;;;;;;;;;EAUAC,kBAAkBA,CAChB3V,MAiCC,EACD0C,OAAqB;IA6OrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEwG,YAAY,CAACuS,aAAa,EAAE,KAAK,CAAC;IAC9E,IAAI1V,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA2OL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4R,SAASA,CACP5V,MAiCC,EACD0C,OAAqB;IA6OrB,OAAO,IAAI,CAACiT,kBAAkB,CAAC3V,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAClDjF,mDAAG,CAAEkF,CA2OT,IA2OGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgV,aAAa,GAAG,aAAa;EAAC;EAE9C;;;;;;;;;;EAUAC,kBAAkBA,CAChB9V,MAMC,EACD0C,OAAqB;IAkOrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEwG,YAAY,CAAC0S,aAAa,EAAE,KAAK,CAAC;IAC9E,IAAI7V,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgOL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+R,SAASA,CACP/V,MAMC,EACD0C,OAAqB;IAkOrB,OAAO,IAAI,CAACoT,kBAAkB,CAAC9V,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAClDjF,mDAAG,CAAEkF,CAgOT,IAgOGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmV,sBAAsB,GAAG,wBAAwB;EAAC;EAElE;;;;;;;;;;EAUAC,2BAA2BA,CACzBjW,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEwG,YAAY,CAAC6S,sBAAsB,EAAE,MAAM,CAAC;IACxF,IAAIhW,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAkS,kBAAkBA,CAChBlW,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACuT,2BAA2B,CAACjW,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAsV,aAAa,GAAG,aAAa;EAAC;EAE9C;;;;;;;;;;EAUAC,kBAAkBA,CAChBpW,MA4IC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEwG,YAAY,CAACgT,aAAa,EAAE,MAAM,CAAC;IAC/E,IAAInW,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqS,SAASA,CACPrW,MA4IC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC0T,kBAAkB,CAACpW,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAClDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAyV,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClBvW,MAiJC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEwG,YAAY,CAACmT,eAAe,EAAE,MAAM,CAAC;IACjF,IAAItW,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAwS,WAAWA,CACTxW,MAiJC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC6T,oBAAoB,CAACvW,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA4V,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClB1W,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEwG,YAAY,CAACsT,eAAe,EAAE,MAAM,CAAC;IACjF,IAAIzW,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA2S,WAAWA,CACT3W,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACgU,oBAAoB,CAAC1W,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBA54IWsC,YAAY,EAAAlG,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAZ+F,YAAY;MAAA5G,OAAA,EAAZ4G,YAAY,CAAA3G,IAAA;MAAAI,UAAA,EADC;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOwG,cAAe,SAAQvG,sDAAW;EAC7CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAA6Z,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClB7W,MAiCC,EACD0C,OAAqB;IAugBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACwT,eAAe,EAAE,KAAK,CAAC;IAClF,IAAI5W,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqgBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA8S,WAAWA,CACT9W,MAiCC,EACD0C,OAAqB;IAugBrB,OAAO,IAAI,CAACmU,oBAAoB,CAAC7W,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAqgBT,IAqgBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAkW,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBhX,MACC,EACD0C,OAAqB;IAuLrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC2T,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAI/W,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqLL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAiT,gBAAgBA,CACdjX,MACC,EACD0C,OAAqB;IAuLrB,OAAO,IAAI,CAACsU,yBAAyB,CAAChX,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAqLT,IAqLGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAqW,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClBnX,MAMC,EACD0C,OAAqB;IAkgBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC8T,eAAe,EAAE,KAAK,CAAC;IAClF,IAAIlX,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAggBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAoT,WAAWA,CACTpX,MAMC,EACD0C,OAAqB;IAkgBrB,OAAO,IAAI,CAACyU,oBAAoB,CAACnX,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAggBT,IAggBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAwW,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBtX,MA0PC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACiU,iBAAiB,EAAE,MAAM,CAAC;IACrF,IAAIrX,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAuT,aAAaA,CACXvX,MA0PC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC4U,sBAAsB,CAACtX,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA2W,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBzX,MA8QC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACoU,iBAAiB,EAAE,MAAM,CAAC;IACrF,IAAIxX,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0T,aAAaA,CACX1X,MA8QC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC+U,sBAAsB,CAACzX,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8W,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpB5X,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACuU,iBAAiB,EAAE,MAAM,CAAC;IACrF,IAAI3X,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6T,aAAaA,CACX7X,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACkV,sBAAsB,CAAC5X,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAiX,gBAAgB,GAAG,gBAAgB;EAAC;EAEpD;;;;;;;;;;EAUAC,qBAAqBA,CACnB/X,MAWC,EACD0C,OAAqB;IAgDrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC0U,gBAAgB,EAAE,KAAK,CAAC;IACnF,IAAI9X,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACkN,OAAO,EAAE,EAAE,CAAC;MACvCrJ,EAAE,CAAClD,KAAK,CAAC,KAAK,EAAEX,MAAM,CAACmN,GAAG,EAAE,EAAE,CAAC;;IAGjC,OAAO,IAAI,CAACpQ,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA8CJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgU,YAAYA,CACVhY,MAWC,EACD0C,OAAqB;IAgDrB,OAAO,IAAI,CAACqV,qBAAqB,CAAC/X,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CA8CR,IA8CGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAoX,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxBlY,MAkBC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC6U,qBAAqB,EAAE,MAAM,CAAC;IACzF,IAAIjY,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,qBAAqB,CAAC;;IAG7C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmU,iBAAiBA,CACfnY,MAkBC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACwV,0BAA0B,CAAClY,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAuX,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxBrY,MAkBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACgV,qBAAqB,EAAE,MAAM,CAAC;IACzF,IAAIpY,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsU,iBAAiBA,CACftY,MAkBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC2V,0BAA0B,CAACrY,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0X,8BAA8B,GAAG,gCAAgC;EAAC;EAElF;;;;;;;;;;EAUAC,mCAAmCA,CACjCxY,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACmV,8BAA8B,EAAE,KAAK,CAAC;IACjG,IAAIvY,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyU,0BAA0BA,CACxBzY,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC8V,mCAAmC,CAACxY,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnEjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6X,iCAAiC,GAAG,mCAAmC;EAAC;EAExF;;;;;;;;;;EAUAC,sCAAsCA,CACpC3Y,MAkBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACsV,iCAAiC,EAAE,MAAM,CAAC;IACrG,IAAI1Y,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4U,6BAA6BA,CAC3B5Y,MAkBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACiW,sCAAsC,CAAC3Y,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgY,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzB9Y,MAaC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACyV,sBAAsB,EAAE,MAAM,CAAC;IAC1F,IAAI7Y,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+U,kBAAkBA,CAChB/Y,MAaC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACoW,2BAA2B,CAAC9Y,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmY,4BAA4B,GAAG,8BAA8B;EAAC;EAE9E;;;;;;;;;;EAUAC,iCAAiCA,CAC/BjZ,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC4V,4BAA4B,EAAE,KAAK,CAAC;IAC/F,IAAIhZ,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAkV,wBAAwBA,CACtBlZ,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACuW,iCAAiC,CAACjZ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACjEjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAsY,+BAA+B,GAAG,iCAAiC;EAAC;EAEpF;;;;;;;;;;EAUAC,oCAAoCA,CAClCpZ,MAkBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC+V,+BAA+B,EAAE,MAAM,CAAC;IACnG,IAAInZ,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqV,2BAA2BA,CACzBrZ,MAkBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC0W,oCAAoC,CAACpZ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAyY,8BAA8B,GAAG,gCAAgC;EAAC;EAElF;;;;;;;;;;EAUAC,mCAAmCA,CACjCvZ,MAaC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACkW,8BAA8B,EAAE,MAAM,CAAC;IAClG,IAAItZ,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAwV,0BAA0BA,CACxBxZ,MAaC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC6W,mCAAmC,CAACvZ,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA4Y,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpB1Z,MACC,EACD0C,OAAqB;IAuBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACqW,iBAAiB,EAAE,KAAK,CAAC;IACpF,IAAIzZ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA2V,aAAaA,CACX3Z,MACC,EACD0C,OAAqB;IAuBrB,OAAO,IAAI,CAACgX,sBAAsB,CAAC1Z,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAqBR,IAqBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA+Y,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvB7Z,MACC,EACD0C,OAAqB;IAuBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACwW,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAI5Z,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA8V,gBAAgBA,CACd9Z,MACC,EACD0C,OAAqB;IAuBrB,OAAO,IAAI,CAACmX,yBAAyB,CAAC7Z,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAqBR,IAqBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAkZ,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClBha,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC2W,eAAe,EAAE,KAAK,CAAC;IAClF,IAAI/Z,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAiW,WAAWA,CACTja,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACsX,oBAAoB,CAACha,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAqZ,mBAAmB,GAAG,mBAAmB;EAAC;EAE1D;;;;;;;;;;EAUAC,wBAAwBA,CACtBna,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC8W,mBAAmB,EAAE,KAAK,CAAC;IACtF,IAAIla,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAACpV,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAoW,eAAeA,CACbpa,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACyX,wBAAwB,CAACna,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACxDjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAwZ,6BAA6B,GAAG,8BAA8B;EAAC;EAE/E;;;;;;;;;;EAUAC,kCAAkCA,CAChCta,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACiX,6BAA6B,EAAE,KAAK,CAAC;IAChG,IAAIra,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAACpV,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAuW,yBAAyBA,CACvBva,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC4X,kCAAkC,CAACta,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAClEjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA2Z,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvBza,MAMC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACoX,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAIxa,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAACpV,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0W,gBAAgBA,CACd1a,MAMC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAAC+X,yBAAyB,CAACza,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA8Z,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpB5a,MAuBC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACuX,iBAAiB,EAAE,KAAK,CAAC;IACpF,IAAI3a,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6W,aAAaA,CACX7a,MAuBC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACkY,sBAAsB,CAAC5a,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAia,yBAAyB,GAAG,0BAA0B;EAAC;EAEvE;;;;;;;;;;EAUAC,8BAA8BA,CAC5B/a,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC0X,yBAAyB,EAAE,KAAK,CAAC;IAC5F,IAAI9a,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgX,qBAAqBA,CACnBhb,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACqY,8BAA8B,CAAC/a,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAoa,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBlb,MAaC,EACD0C,OAAqB;IAcrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC6X,iBAAiB,EAAE,MAAM,CAAC;IACrF,IAAIjb,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAYL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmX,aAAaA,CACXnb,MAaC,EACD0C,OAAqB;IAcrB,OAAO,IAAI,CAACwY,sBAAsB,CAAClb,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAYT,IAYGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAua,wBAAwB,GAAG,yBAAyB;EAAC;EAErE;;;;;;;;;;EAUAC,6BAA6BA,CAC3Brb,MAMC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACgY,wBAAwB,EAAE,KAAK,CAAC;IAC3F,IAAIpb,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyL,UAAU,EAAE,EAAE,CAAC;;IAG/C,OAAO,IAAI,CAAC1O,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsX,oBAAoBA,CAClBtb,MAMC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC2Y,6BAA6B,CAACrb,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0a,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1Bxb,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACmY,uBAAuB,EAAE,KAAK,CAAC;IAC1F,IAAIvb,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyL,UAAU,EAAE,EAAE,CAAC;;IAG/C,OAAO,IAAI,CAAC1O,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyX,mBAAmBA,CACjBzb,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC8Y,4BAA4B,CAACxb,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6a,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvB3b,MAMC,EACD0C,OAAqB;IA2OrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACsY,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAI1b,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAyOL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4X,gBAAgBA,CACd5b,MAMC,EACD0C,OAAqB;IA2OrB,OAAO,IAAI,CAACiZ,yBAAyB,CAAC3b,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAyOT,IAyOGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgb,wBAAwB,GAAG,yBAAyB;EAAC;EAErE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B9b,MAsOC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACyY,wBAAwB,EAAE,MAAM,CAAC;IAC5F,IAAI7b,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+X,oBAAoBA,CAClB/b,MAsOC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACoZ,6BAA6B,CAAC9b,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmb,gBAAgB,GAAG,gBAAgB;EAAC;EAEpD;;;;;;;;;;EAUAC,qBAAqBA,CACnBjc,MAMC,EACD0C,OAAqB;IAsXrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC4Y,gBAAgB,EAAE,KAAK,CAAC;IACnF,IAAIhc,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,KAAK,EAAEX,MAAM,CAACkc,GAAG,EAAE,EAAE,CAAC;;IAGjC,OAAO,IAAI,CAACnf,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAoXL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmY,YAAYA,CACVnc,MAMC,EACD0C,OAAqB;IAsXrB,OAAO,IAAI,CAACuZ,qBAAqB,CAACjc,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CAoXT,IAoXGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAub,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBrc,MA4JC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACgZ,oBAAoB,EAAE,MAAM,CAAC;IACxF,IAAIpc,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsY,gBAAgBA,CACdtc,MA4JC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC2Z,yBAAyB,CAACrc,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0b,wBAAwB,GAAG,0BAA0B;EAAC;EAEtE;;;;;;;;;;EAUAC,6BAA6BA,CAC3Bxc,MAWC,EACD0C,OAAqB;IAerB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACmZ,wBAAwB,EAAE,KAAK,CAAC;IAC3F,IAAIvc,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyc,UAAU,EAAE,EAAE,CAAC;MAC7C5Y,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAACK,MAAM,EAAE,EAAE,CAAC;;IAGvC,OAAO,IAAI,CAACtD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAaL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0Y,oBAAoBA,CAClB1c,MAWC,EACD0C,OAAqB;IAerB,OAAO,IAAI,CAAC8Z,6BAA6B,CAACxc,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAaT,IAaGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8b,wBAAwB,GAAG,0BAA0B;EAAC;EAEtE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B5c,MAWC,EACD0C,OAAqB;IAuLrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACuZ,wBAAwB,EAAE,KAAK,CAAC;IAC3F,IAAI3c,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyc,UAAU,EAAE,EAAE,CAAC;MAC7C5Y,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAACK,MAAM,EAAE,EAAE,CAAC;;IAGvC,OAAO,IAAI,CAACtD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqLL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6Y,oBAAoBA,CAClB7c,MAWC,EACD0C,OAAqB;IAuLrB,OAAO,IAAI,CAACka,6BAA6B,CAAC5c,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAqLT,IAqLGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAic,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxB/c,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC0Z,qBAAqB,EAAE,MAAM,CAAC;IACzF,IAAI9c,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgZ,iBAAiBA,CACfhd,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACqa,0BAA0B,CAAC/c,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAoc,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxBld,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC6Z,qBAAqB,EAAE,MAAM,CAAC;IACzF,IAAIjd,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmZ,iBAAiBA,CACfnd,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACwa,0BAA0B,CAACld,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAuc,0BAA0B,GAAG,4BAA4B;EAAC;EAE1E;;;;;;;;;;EAUAC,+BAA+BA,CAC7Brd,MAsCC,EACD0C,OAAqB;IAwZrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACga,0BAA0B,EAAE,KAAK,CAAC;IAC7F,IAAIpd,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyc,UAAU,EAAE,EAAE,CAAC;MAC7C5Y,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAsZL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsZ,sBAAsBA,CACpBtd,MAsCC,EACD0C,OAAqB;IAwZrB,OAAO,IAAI,CAAC2a,+BAA+B,CAACrd,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC/DjF,mDAAG,CAAEkF,CAsZT,IAsZGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0c,0BAA0B,GAAG,4BAA4B;EAAC;EAE1E;;;;;;;;;;EAUAC,+BAA+BA,CAC7Bxd,MA2JC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACma,0BAA0B,EAAE,MAAM,CAAC;IAC9F,IAAIvd,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyZ,sBAAsBA,CACpBzd,MA2JC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC8a,+BAA+B,CAACxd,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC/DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6c,wBAAwB,GAAG,0BAA0B;EAAC;EAEtE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B3d,MAsCC,EACD0C,OAAqB;IAgUrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACsa,wBAAwB,EAAE,KAAK,CAAC;IAC3F,IAAI1d,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyc,UAAU,EAAE,EAAE,CAAC;MAC7C5Y,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA8TL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4Z,oBAAoBA,CAClB5d,MAsCC,EACD0C,OAAqB;IAgUrB,OAAO,IAAI,CAACib,6BAA6B,CAAC3d,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CA8TT,IA8TGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgd,wBAAwB,GAAG,0BAA0B;EAAC;EAEtE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B9d,MAyFC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACya,wBAAwB,EAAE,MAAM,CAAC;IAC5F,IAAI7d,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+Z,oBAAoBA,CAClB/d,MAyFC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACob,6BAA6B,CAAC9d,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmd,8BAA8B,GAAG,gCAAgC;EAAC;EAElF;;;;;;;;;;EAUAC,mCAAmCA,CACjCje,MAsCC,EACD0C,OAAqB;IA0UrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC4a,8BAA8B,EAAE,KAAK,CAAC;IACjG,IAAIhe,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyc,UAAU,EAAE,EAAE,CAAC;MAC7C5Y,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAwUL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAka,0BAA0BA,CACxBle,MAsCC,EACD0C,OAAqB;IA0UrB,OAAO,IAAI,CAACub,mCAAmC,CAACje,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnEjF,mDAAG,CAAEkF,CAwUT,IAwUGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAsd,8BAA8B,GAAG,gCAAgC;EAAC;EAElF;;;;;;;;;;EAUAC,mCAAmCA,CACjCpe,MAyFC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC+a,8BAA8B,EAAE,MAAM,CAAC;IAClG,IAAIne,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqa,0BAA0BA,CACxBre,MAyFC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC0b,mCAAmC,CAACpe,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAyd,wBAAwB,GAAG,0BAA0B;EAAC;EAEtE;;;;;;;;;;EAUAC,6BAA6BA,CAC3Bve,MAgCC,EACD0C,OAAqB;IA0IrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACkb,wBAAwB,EAAE,KAAK,CAAC;IAC3F,IAAIte,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyc,UAAU,EAAE,EAAE,CAAC;MAC7C5Y,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAwIL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAwa,oBAAoBA,CAClBxe,MAgCC,EACD0C,OAAqB;IA0IrB,OAAO,IAAI,CAAC6b,6BAA6B,CAACve,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAwIT,IAwIGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA4d,2BAA2B,GAAG,6BAA6B;EAAC;EAE5E;;;;;;;;;;EAUAC,gCAAgCA,CAC9B1e,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACqb,2BAA2B,EAAE,MAAM,CAAC;IAC/F,IAAIze,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA2a,uBAAuBA,CACrB3e,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACgc,gCAAgC,CAAC1e,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA+d,wBAAwB,GAAG,0BAA0B;EAAC;EAEtE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B7e,MAsCC,EACD0C,OAAqB;IAiQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACwb,wBAAwB,EAAE,KAAK,CAAC;IAC3F,IAAI5e,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyc,UAAU,EAAE,EAAE,CAAC;MAC7C5Y,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;MACnCX,EAAE,CAAClD,KAAK,CAAC,QAAQ,EAAEX,MAAM,CAAC0D,MAAM,EAAE,EAAE,CAAC;MACrCG,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAACyE,IAAI,EAAE;QAAC,OAAO,EAAC,MAAM;QAAC,SAAS,EAAC;MAAK,CAAC,CAAC;;IAGjE,OAAO,IAAI,CAAC1H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA+PL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA8a,oBAAoBA,CAClB9e,MAsCC,EACD0C,OAAqB;IAiQrB,OAAO,IAAI,CAACmc,6BAA6B,CAAC7e,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CA+PT,IA+PGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAke,wBAAwB,GAAG,0BAA0B;EAAC;EAEtE;;;;;;;;;;EAUAC,6BAA6BA,CAC3Bhf,MAqEC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC2b,wBAAwB,EAAE,MAAM,CAAC;IAC5F,IAAI/e,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAib,oBAAoBA,CAClBjf,MAqEC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACsc,6BAA6B,CAAChf,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAqe,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBnf,MAgBC,EACD0C,OAAqB;IAudrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC8b,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAIlf,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACyc,UAAU,EAAE,EAAE,CAAC;MAC7C5Y,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;;IAGrC,OAAO,IAAI,CAACzH,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqdL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAob,gBAAgBA,CACdpf,MAgBC,EACD0C,OAAqB;IAudrB,OAAO,IAAI,CAACyc,yBAAyB,CAACnf,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAqdT,IAqdGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAwe,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBtf,MAaC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACic,oBAAoB,EAAE,MAAM,CAAC;IACxF,IAAIrf,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAub,gBAAgBA,CACdvf,MAaC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC4c,yBAAyB,CAACtf,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA2e,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBzf,MAMC,EACD0C,OAAqB;IAucrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACoc,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAIxf,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqcL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0b,gBAAgBA,CACd1f,MAMC,EACD0C,OAAqB;IAucrB,OAAO,IAAI,CAAC+c,yBAAyB,CAACzf,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAqcT,IAqcGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8e,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvB5f,MA2RC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACuc,oBAAoB,EAAE,MAAM,CAAC;IACxF,IAAI3f,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6b,gBAAgBA,CACd7f,MA2RC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACkd,yBAAyB,CAAC5f,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAif,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzB/f,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC0c,sBAAsB,EAAE,MAAM,CAAC;IAC1F,IAAI9f,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgc,kBAAkBA,CAChBhgB,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACqd,2BAA2B,CAAC/f,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAof,mBAAmB,GAAG,oBAAoB;EAAC;EAE3D;;;;;;;;;;EAUAC,wBAAwBA,CACtBlgB,MAQC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC6c,mBAAmB,EAAE,MAAM,CAAC;IACvF,IAAIjgB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmc,eAAeA,CACbngB,MAQC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACwd,wBAAwB,CAAClgB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACxDjF,mDAAG,CAAEkF,CAgBT,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAuf,mBAAmB,GAAG,oBAAoB;EAAC;EAE3D;;;;;;;;;;EAUAC,wBAAwBA,CACtBrgB,MAQC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACgd,mBAAmB,EAAE,MAAM,CAAC;IACvF,IAAIpgB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsc,eAAeA,CACbtgB,MAQC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC2d,wBAAwB,CAACrgB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACxDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0f,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBxgB,MAsRC,EACD0C,OAAqB;IAkcrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACmd,oBAAoB,EAAE,MAAM,CAAC;IACxF,IAAIvgB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgcL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyc,gBAAgBA,CACdzgB,MAsRC,EACD0C,OAAqB;IAkcrB,OAAO,IAAI,CAAC8d,yBAAyB,CAACxgB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAgcT,IAgcGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6f,uBAAuB,GAAG,yBAAyB;EAAC;EAEpE;;;;;;;;;;EAUAC,4BAA4BA,CAC1B3gB,MAWC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACsd,uBAAuB,EAAE,KAAK,CAAC;IAC1F,IAAI1gB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;MAC7BhB,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAAC4gB,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAAC7jB,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6c,mBAAmBA,CACjB7gB,MAWC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACie,4BAA4B,CAAC3gB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAigB,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvB/gB,MAMC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC0d,oBAAoB,EAAE,KAAK,CAAC;IACvF,IAAI9gB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;;IAG/B,OAAO,IAAI,CAAC9H,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgd,gBAAgBA,CACdhhB,MAMC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACqe,yBAAyB,CAAC/gB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAogB,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBlhB,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAAC6d,oBAAoB,EAAE,MAAM,CAAC;IACxF,IAAIjhB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmd,gBAAgBA,CACdnhB,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACwe,yBAAyB,CAAClhB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAugB,wBAAwB,GAAG,yBAAyB;EAAC;EAErE;;;;;;;;;;EAUAC,6BAA6BA,CAC3BrhB,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACge,wBAAwB,EAAE,KAAK,CAAC;IAC3F,IAAIphB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsd,oBAAoBA,CAClBthB,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC2e,6BAA6B,CAACrhB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA0gB,yBAAyB,GAAG,2BAA2B;EAAC;EAExE;;;;;;;;;;EAUAC,8BAA8BA,CAC5BxhB,MAWC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAEyG,cAAc,CAACme,yBAAyB,EAAE,KAAK,CAAC;IAC5F,IAAIvhB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,IAAI,EAAEX,MAAM,CAAC6E,EAAE,EAAE,EAAE,CAAC;MAC7BhB,EAAE,CAAClD,KAAK,CAAC,WAAW,EAAEX,MAAM,CAACyhB,SAAS,EAAE,EAAE,CAAC;;IAG7C,OAAO,IAAI,CAAC1kB,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0d,qBAAqBA,CACnB1hB,MAWC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC8e,8BAA8B,CAACxhB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC9DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBAjtiCWuC,cAAc,EAAAnG,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAdgG,cAAc;MAAA7G,OAAA,EAAd6G,cAAc,CAAA5G,IAAA;MAAAI,UAAA,EADD;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAOyG,eAAgB,SAAQxG,sDAAW;EAC9CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAA4kB,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClB5hB,MACC,EACD0C,OAAqB;IAyMrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE0G,eAAe,CAACse,eAAe,EAAE,KAAK,CAAC;IACnF,IAAI3hB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAuML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6d,WAAWA,CACT7hB,MACC,EACD0C,OAAqB;IAyMrB,OAAO,IAAI,CAACkf,oBAAoB,CAAC5hB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAuMT,IAuMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAihB,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrB/hB,MA4EC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE0G,eAAe,CAACye,kBAAkB,EAAE,MAAM,CAAC;IACvF,IAAI9hB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAge,cAAcA,CACZhiB,MA4EC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACqf,uBAAuB,CAAC/hB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAohB,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzBliB,MAgBC,EACD0C,OAAqB;IAqErB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE0G,eAAe,CAAC4e,sBAAsB,EAAE,KAAK,CAAC;IAC1F,IAAIjiB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACmiB,KAAK,EAAE,EAAE,CAAC;MACnCte,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACuE,KAAK,EAAE,EAAE,CAAC;MACnCV,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACwE,KAAK,EAAE,EAAE,CAAC;;IAGrC,OAAO,IAAI,CAACzH,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAmEL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAoe,kBAAkBA,CAChBpiB,MAgBC,EACD0C,OAAqB;IAqErB,OAAO,IAAI,CAACwf,2BAA2B,CAACliB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAmET,IAmEGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAwhB,2BAA2B,GAAG,6BAA6B;EAAC;EAE5E;;;;;;;;;;EAUAC,gCAAgCA,CAC9BtiB,MAMC,EACD0C,OAAqB;IAqBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE0G,eAAe,CAACgf,2BAA2B,EAAE,KAAK,CAAC;IAC/F,IAAIriB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,OAAO,EAAEX,MAAM,CAACmiB,KAAK,EAAE,EAAE,CAAC;;IAGrC,OAAO,IAAI,CAACplB,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAmBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAue,uBAAuBA,CACrBviB,MAMC,EACD0C,OAAqB;IAqBrB,OAAO,IAAI,CAAC4f,gCAAgC,CAACtiB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAmBT,IAmBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA2hB,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzBziB,MAsCC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE0G,eAAe,CAACmf,sBAAsB,EAAE,MAAM,CAAC;IAC3F,IAAIxiB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0e,kBAAkBA,CAChB1iB,MAsCC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC+f,2BAA2B,CAACziB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8hB,2BAA2B,GAAG,6BAA6B;EAAC;EAE5E;;;;;;;;;;EAUAC,gCAAgCA,CAC9B5iB,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE0G,eAAe,CAACsf,2BAA2B,EAAE,MAAM,CAAC;IAChG,IAAI3iB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6e,uBAAuBA,CACrB7iB,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACkgB,gCAAgC,CAAC5iB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAChEjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAiiB,wBAAwB,GAAG,yBAAyB;EAAC;EAErE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B/iB,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE0G,eAAe,CAACyf,wBAAwB,EAAE,MAAM,CAAC;IAC7F,IAAI9iB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgf,oBAAoBA,CAClBhjB,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACqgB,6BAA6B,CAAC/iB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBApqEWwC,eAAe,EAAApG,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAfiG,eAAe;MAAA9G,OAAA,EAAf8G,eAAe,CAAA7G,IAAA;MAAAI,UAAA,EADF;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAO0G,aAAc,SAAQzG,sDAAW;EAC5CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAkmB,mBAAmB,GAAG,oBAAoB;EAAC;EAE3D;;;;;;;;;;EAUAC,wBAAwBA,CACtBljB,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAAC2f,mBAAmB,EAAE,KAAK,CAAC;IACrF,IAAIjjB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmf,eAAeA,CACbnjB,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACwgB,wBAAwB,CAACljB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACxDjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAuiB,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrBrjB,MACC,EACD0C,OAAqB;IA6ErB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAAC8f,kBAAkB,EAAE,KAAK,CAAC;IACpF,IAAIpjB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CA2EL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAsf,cAAcA,CACZtjB,MACC,EACD0C,OAAqB;IA6ErB,OAAO,IAAI,CAAC2gB,uBAAuB,CAACrjB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CA2ET,IA2EGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0iB,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzBxjB,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAACigB,sBAAsB,EAAE,KAAK,CAAC;IACxF,IAAIvjB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAyf,kBAAkBA,CAChBzjB,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC8gB,2BAA2B,CAACxjB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA6iB,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrB3jB,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAACogB,kBAAkB,EAAE,KAAK,CAAC;IACpF,IAAI1jB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4f,cAAcA,CACZ5jB,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACihB,uBAAuB,CAAC3jB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAgjB,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrB9jB,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAACugB,kBAAkB,EAAE,KAAK,CAAC;IACpF,IAAI7jB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+f,cAAcA,CACZ/jB,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACohB,uBAAuB,CAAC9jB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAmjB,sBAAsB,GAAG,sBAAsB;EAAC;EAEhE;;;;;;;;;;EAUAC,2BAA2BA,CACzBjkB,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAAC0gB,sBAAsB,EAAE,KAAK,CAAC;IACxF,IAAIhkB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAkgB,kBAAkBA,CAChBlkB,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACuhB,2BAA2B,CAACjkB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAsjB,qBAAqB,GAAG,qBAAqB;EAAC;EAE9D;;;;;;;;;;EAUAC,0BAA0BA,CACxBpkB,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAAC6gB,qBAAqB,EAAE,KAAK,CAAC;IACvF,IAAInkB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqgB,iBAAiBA,CACfrkB,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAAC0hB,0BAA0B,CAACpkB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAyjB,uBAAuB,GAAG,wBAAwB;EAAC;EAEnE;;;;;;;;;;EAUAC,4BAA4BA,CAC1BvkB,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAACghB,uBAAuB,EAAE,KAAK,CAAC;IACzF,IAAItkB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAwgB,mBAAmBA,CACjBxkB,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAAC6hB,4BAA4B,CAACvkB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA4jB,wBAAwB,GAAG,yBAAyB;EAAC;EAErE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B1kB,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAACmhB,wBAAwB,EAAE,KAAK,CAAC;IAC1F,IAAIzkB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA2gB,oBAAoBA,CAClB3kB,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACgiB,6BAA6B,CAAC1kB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA+jB,qBAAqB,GAAG,qBAAqB;EAAC;EAE9D;;;;;;;;;;EAUAC,0BAA0BA,CACxB7kB,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAACshB,qBAAqB,EAAE,KAAK,CAAC;IACvF,IAAI5kB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA8gB,iBAAiBA,CACf9kB,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACmiB,0BAA0B,CAAC7kB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAkkB,gBAAgB,GAAG,gBAAgB;EAAC;EAEpD;;;;;;;;;;EAUAC,qBAAqBA,CACnBhlB,MACC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE2G,aAAa,CAACyhB,gBAAgB,EAAE,KAAK,CAAC;IAClF,IAAI/kB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAihB,YAAYA,CACVjlB,MACC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACsiB,qBAAqB,CAAChlB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;;;uBAviDWyC,aAAa,EAAArG,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAbkG,aAAa;MAAA/G,OAAA,EAAb+G,aAAa,CAAA9G,IAAA;MAAAI,UAAA,EADA;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAO2G,gBAAiB,SAAQ1G,sDAAW;EAC/CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAmoB,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBnlB,MACC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE4G,gBAAgB,CAAC2hB,iBAAiB,EAAE,KAAK,CAAC;IACtF,IAAIllB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAohB,aAAaA,CACXplB,MACC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACyiB,sBAAsB,CAACnlB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAwkB,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBtlB,MAMC,EACD0C,OAAqB;IAuBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE4G,gBAAgB,CAAC8hB,oBAAoB,EAAE,KAAK,CAAC;IACzF,IAAIrlB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAACpV,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAuhB,gBAAgBA,CACdvlB,MAMC,EACD0C,OAAqB;IAuBrB,OAAO,IAAI,CAAC4iB,yBAAyB,CAACtlB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAqBR,IAqBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA2kB,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpBzlB,MAMC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE4G,gBAAgB,CAACiiB,iBAAiB,EAAE,KAAK,CAAC;IACtF,IAAIxlB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAACpV,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0hB,aAAaA,CACX1lB,MAMC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAAC+iB,sBAAsB,CAACzlB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAA8kB,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvB5lB,MAMC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE4G,gBAAgB,CAACoiB,oBAAoB,EAAE,KAAK,CAAC;IACzF,IAAI3lB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAACpV,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6hB,gBAAgBA,CACd7lB,MAMC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACkjB,yBAAyB,CAAC5lB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAilB,iBAAiB,GAAG,iBAAiB;EAAC;EAEtD;;;;;;;;;;EAUAC,sBAAsBA,CACpB/lB,MAMC,EACD0C,OAAqB;IAkBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE4G,gBAAgB,CAACuiB,iBAAiB,EAAE,KAAK,CAAC;IACtF,IAAI9lB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;;IAGzC,OAAO,IAAI,CAACpV,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAgBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgiB,aAAaA,CACXhmB,MAMC,EACD0C,OAAqB;IAkBrB,OAAO,IAAI,CAACqjB,sBAAsB,CAAC/lB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAgBR,IAgBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAolB,oBAAoB,GAAG,oBAAoB;EAAC;EAE5D;;;;;;;;;;EAUAC,yBAAyBA,CACvBlmB,MAWC,EACD0C,OAAqB;IAuBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE4G,gBAAgB,CAAC0iB,oBAAoB,EAAE,KAAK,CAAC;IACzF,IAAIjmB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;MACvCtO,EAAE,CAAClD,KAAK,CAAC,MAAM,EAAEX,MAAM,CAAC5B,IAAI,EAAE,EAAE,CAAC;;IAGnC,OAAO,IAAI,CAACrB,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqBJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmiB,gBAAgBA,CACdnmB,MAWC,EACD0C,OAAqB;IAuBrB,OAAO,IAAI,CAACwjB,yBAAyB,CAAClmB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAqBR,IAqBGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAulB,kBAAkB,GAAG,kBAAkB;EAAC;EAExD;;;;;;;;;;EAUAC,uBAAuBA,CACrBrmB,MAyCC,EACD0C,OAAqB;IAqDrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE4G,gBAAgB,CAAC6iB,kBAAkB,EAAE,KAAK,CAAC;IACvF,IAAIpmB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,SAAS,EAAEX,MAAM,CAACmS,OAAO,EAAE,EAAE,CAAC;MACvCtO,EAAE,CAAClD,KAAK,CAAC,YAAY,EAAEX,MAAM,CAACsmB,UAAU,EAAE,EAAE,CAAC;MAC7CziB,EAAE,CAAClD,KAAK,CAAC,sBAAsB,EAAEX,MAAM,CAACumB,oBAAoB,EAAE,EAAE,CAAC;MACjE1iB,EAAE,CAAClD,KAAK,CAAC,oBAAoB,EAAEX,MAAM,CAACwmB,kBAAkB,EAAE,EAAE,CAAC;MAC7D3iB,EAAE,CAAClD,KAAK,CAAC,mBAAmB,EAAEX,MAAM,CAACymB,iBAAiB,EAAE,EAAE,CAAC;MAC3D5iB,EAAE,CAAClD,KAAK,CAAC,iBAAiB,EAAEX,MAAM,CAAC0mB,eAAe,EAAE,EAAE,CAAC;MACvD7iB,EAAE,CAAClD,KAAK,CAAC,oBAAoB,EAAEX,MAAM,CAAC2mB,kBAAkB,EAAE,EAAE,CAAC;MAC7D9iB,EAAE,CAAClD,KAAK,CAAC,kBAAkB,EAAEX,MAAM,CAAC4mB,gBAAgB,EAAE,EAAE,CAAC;;IAG3D,OAAO,IAAI,CAAC7pB,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAmDJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6iB,cAAcA,CACZ7mB,MAyCC,EACD0C,OAAqB;IAqDrB,OAAO,IAAI,CAAC2jB,uBAAuB,CAACrmB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAmDR,IAmDGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;EAEA;;IACgB,KAAAimB,wBAAwB,GAAG,yBAAyB;EAAC;EAErE;;;;;;;;;;EAUAC,6BAA6BA,CAC3B/mB,MAMC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE4G,gBAAgB,CAACujB,wBAAwB,EAAE,KAAK,CAAC;IAC7F,IAAI9mB,MAAM,EAAE;MACV6D,EAAE,CAAClD,KAAK,CAAC,WAAW,EAAEX,MAAM,CAACgnB,SAAS,EAAE,EAAE,CAAC;;IAG7C,OAAO,IAAI,CAACjqB,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWJ;IACL,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAijB,oBAAoBA,CAClBjnB,MAMC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACqkB,6BAA6B,CAAC/mB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC7DjF,mDAAG,CAAEkF,CAWR,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACR;EACH;;;uBAh5CW0C,gBAAgB,EAAAtG,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAhBmG,gBAAgB;MAAAhH,OAAA,EAAhBgH,gBAAgB,CAAA/G,IAAA;MAAAI,UAAA,EADH;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;ACjBhC;AACA;AAC6E;AAGhC;AAEC;AAGM;;;;AAIpD;;;AAIM,MAAO4G,WAAY,SAAQ3G,sDAAW;EAC1CH,YAAYI,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;IACgB,KAAAmqB,cAAc,GAAG,cAAc;EAAC;EAEhD;;;;;;;;;;EAUAC,mBAAmBA,CACjBnnB,MAsCC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAAC0jB,cAAc,EAAE,MAAM,CAAC;IAC/E,IAAIlnB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAojB,UAAUA,CACRpnB,MAsCC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACykB,mBAAmB,CAACnnB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAwmB,gBAAgB,GAAG,iBAAiB;EAAC;EAErD;;;;;;;;;;EAUAC,qBAAqBA,CACnBtnB,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAAC6jB,gBAAgB,EAAE,MAAM,CAAC;IACjF,IAAIrnB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAujB,YAAYA,CACVvnB,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC4kB,qBAAqB,CAACtnB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA2mB,eAAe,GAAG,eAAe;EAAC;EAElD;;;;;;;;;;EAUAC,oBAAoBA,CAClBznB,MAaC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACgkB,eAAe,EAAE,MAAM,CAAC;IAChF,IAAIxnB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA0jB,WAAWA,CACT1nB,MAaC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC+kB,oBAAoB,CAACznB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACpDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA8mB,qBAAqB,GAAG,uBAAuB;EAAC;EAEhE;;;;;;;;;;EAUAC,0BAA0BA,CACxB5nB,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACmkB,qBAAqB,EAAE,MAAM,CAAC;IACtF,IAAI3nB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA6jB,iBAAiBA,CACf7nB,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACklB,0BAA0B,CAAC5nB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAinB,qBAAqB,GAAG,sBAAsB;EAAC;EAE/D;;;;;;;;;;EAUAC,0BAA0BA,CACxB/nB,MAuBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACskB,qBAAqB,EAAE,MAAM,CAAC;IACtF,IAAI9nB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAgkB,iBAAiBA,CACfhoB,MAuBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACqlB,0BAA0B,CAAC/nB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC1DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAonB,oBAAoB,GAAG,qBAAqB;EAAC;EAE7D;;;;;;;;;;EAUAC,yBAAyBA,CACvBloB,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACykB,oBAAoB,EAAE,MAAM,CAAC;IACrF,IAAIjoB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAmkB,gBAAgBA,CACdnoB,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACwlB,yBAAyB,CAACloB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACzDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAunB,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzBroB,MAuBC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAAC4kB,sBAAsB,EAAE,MAAM,CAAC;IACvF,IAAIpoB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAskB,kBAAkBA,CAChBtoB,MAuBC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC2lB,2BAA2B,CAACroB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA0nB,sBAAsB,GAAG,uBAAuB;EAAC;EAEjE;;;;;;;;;;EAUAC,2BAA2BA,CACzBxoB,MA4BC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAAC+kB,sBAAsB,EAAE,MAAM,CAAC;IACvF,IAAIvoB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAykB,kBAAkBA,CAChBzoB,MA4BC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC8lB,2BAA2B,CAACxoB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA6nB,kBAAkB,GAAG,mBAAmB;EAAC;EAEzD;;;;;;;;;;EAUAC,uBAAuBA,CACrB3oB,MAQC,EACD0C,OAAqB;IAarB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACklB,kBAAkB,EAAE,MAAM,CAAC;IACnF,IAAI1oB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAWL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA4kB,cAAcA,CACZ5oB,MAQC,EACD0C,OAAqB;IAarB,OAAO,IAAI,CAACimB,uBAAuB,CAAC3oB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACvDjF,mDAAG,CAAEkF,CAWT,IAWGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAgoB,aAAa,GAAG,aAAa;EAAC;EAE9C;;;;;;;;;;EAUAC,kBAAkBA,CAChB9oB,MAaC,EACD0C,OAAqB;IAuBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACqlB,aAAa,EAAE,MAAM,CAAC;IAC9E,IAAI7oB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA+kB,SAASA,CACP/oB,MAaC,EACD0C,OAAqB;IAuBrB,OAAO,IAAI,CAAComB,kBAAkB,CAAC9oB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAClDjF,mDAAG,CAAEkF,CAqBT,IAqBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAmoB,cAAc,GAAG,cAAc;EAAC;EAEhD;;;;;;;;;;EAUAC,mBAAmBA,CACjBjpB,MAaC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACwlB,cAAc,EAAE,MAAM,CAAC;IAC/E,IAAIhpB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAklB,UAAUA,CACRlpB,MAaC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACumB,mBAAmB,CAACjpB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACnDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAsoB,mBAAmB,GAAG,oBAAoB;EAAC;EAE3D;;;;;;;;;;EAUAC,wBAAwBA,CACtBppB,MAQC,EACD0C,OAAqB;IAuBrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAAC2lB,mBAAmB,EAAE,MAAM,CAAC;IACpF,IAAInpB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAqBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAqlB,eAAeA,CACbrpB,MAQC,EACD0C,OAAqB;IAuBrB,OAAO,IAAI,CAAC0mB,wBAAwB,CAACppB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACxDjF,mDAAG,CAAEkF,CAqBT,IAqBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAyoB,sBAAsB,GAAG,wBAAwB;EAAC;EAElE;;;;;;;;;;EAUAC,2BAA2BA,CACzBvpB,MAcC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAAC8lB,sBAAsB,EAAE,MAAM,CAAC;IACvF,IAAItpB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAwlB,kBAAkBA,CAChBxpB,MAcC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAAC6mB,2BAA2B,CAACvpB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA4oB,uBAAuB,GAAG,yBAAyB;EAAC;EAEpE;;;;;;;;;;EAUAC,4BAA4BA,CAC1B1pB,MAQC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACimB,uBAAuB,EAAE,MAAM,CAAC;IACxF,IAAIzpB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA2lB,mBAAmBA,CACjB3pB,MAQC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACgnB,4BAA4B,CAAC1pB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC5DjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAA+oB,gBAAgB,GAAG,iBAAiB;EAAC;EAErD;;;;;;;;;;EAUAC,qBAAqBA,CACnB7pB,MACC,EACD0C,OAAqB;IAsDrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAAComB,gBAAgB,EAAE,KAAK,CAAC;IAChF,IAAI5pB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAoDL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUA8lB,YAAYA,CACV9pB,MACC,EACD0C,OAAqB;IAsDrB,OAAO,IAAI,CAACmnB,qBAAqB,CAAC7pB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACrDjF,mDAAG,CAAEkF,CAoDT,IAoDGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAkpB,iBAAiB,GAAG,kBAAkB;EAAC;EAEvD;;;;;;;;;;EAUAC,sBAAsBA,CACpBhqB,MAsDC,EACD0C,OAAqB;IAQrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAACumB,iBAAiB,EAAE,MAAM,CAAC;IAClF,IAAI/pB,MAAM,EAAE;MACV6D,EAAE,CAAChD,IAAI,CAACb,MAAM,CAACa,IAAI,EAAE,kBAAkB,CAAC;;IAG1C,OAAO,IAAI,CAAC9D,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAML;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAimB,aAAaA,CACXjqB,MAsDC,EACD0C,OAAqB;IAQrB,OAAO,IAAI,CAACsnB,sBAAsB,CAAChqB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CACtDjF,mDAAG,CAAEkF,CAMT,IAMGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;EAEA;;IACgB,KAAAqpB,sBAAsB,GAAG,wBAAwB;EAAC;EAElE;;;;;;;;;;EAUAC,2BAA2BA,CACzBnqB,MACC,EACD0C,OAAqB;IA2BrB,MAAMmB,EAAE,GAAG,IAAI1D,4DAAc,CAAC,IAAI,CAACxD,OAAO,EAAE6G,WAAW,CAAC0mB,sBAAsB,EAAE,KAAK,CAAC;IACtF,IAAIlqB,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACjD,IAAI,CAAC+G,OAAO,CACtBD,EAAE,CAAChC,KAAK,CAAC;MAAEW,YAAY,EAAE,MAAM;MAAEH,MAAM,EAAE,kBAAkB;MAAEK;IAAO,CAAE,CAAC,CACxE,CAACqB,IAAI,CACJL,sDAAM,CAAEM,CAAM,IAA6BA,CAAC,YAAYP,8DAAY,CAAC,EACrE3E,mDAAG,CAAEkF,CAAoB,IAAI;MAC3B,OAAOA,CAyBL;IACJ,CAAC,CAAC,CACH;EACH;EAEA;;;;;;;;;;EAUAomB,kBAAkBA,CAChBpqB,MACC,EACD0C,OAAqB;IA2BrB,OAAO,IAAI,CAACynB,2BAA2B,CAACnqB,MAAM,EAAE0C,OAAO,CAAC,CAACqB,IAAI,CAC3DjF,mDAAG,CAAEkF,CAyBT,IAyBGA,CAAC,CAACnD,IAAI,CAAC,CACP;EACH;;;uBAh3EW2C,WAAW,EAAAvG,sDAAA,CAAAE,gEAAA,GAAAF,sDAAA,CAAAG,4DAAA;IAAA;EAAA;;;aAAXoG,WAAW;MAAAjH,OAAA,EAAXiH,WAAW,CAAAhH,IAAA;MAAAI,UAAA,EADE;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;AChBc;AAC8B;AAEP;AACI;AACS;AACL;AACiB;AACe;AACD;;;AAE5G,MAAME,MAAM,GAAiB;EAC3BguB,OAAO,EAAE,IAAI;EACbC,yBAAyB,EAAE,SAAS;EACpCC,eAAe,EAAE,SAAS;EAC1BC,mBAAmB,EAAE,QAAQ,CAAC;CAC/B;;AAED,MAAMC,MAAM,GAAW,CACrB;EACExrB,IAAI,EAAE,OAAO;EACbyrB,YAAY,EAAEA,CAAA,KAAM,4JAA8B,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW;EAC1E;CACD,EACD;EAAE5rB,IAAI,EAAE,mBAAmB;EAAEoT,SAAS,EAAE+X,qHAAyB;EAAEU,WAAW,EAAE,CAAClB,uDAAS,CAAC;EAAEmB,KAAK,EAAE;AAAsB,CAAE,EAC5H;EAAE9rB,IAAI,EAAE,mBAAmB;EAAEoT,SAAS,EAAE6X,uGAAoB;EAAEa,KAAK,EAAE;AAAO,CAAE,EAC9E;EAAE9rB,IAAI,EAAE,wBAAwB;EAAEoT,SAAS,EAAE8X,sHAAyB;EAAEY,KAAK,EAAE;AAAmB,CAAE,EACpG;EAAE9rB,IAAI,EAAE,OAAO;EAAEoT,SAAS,EAAE0X,kFAAc;EAAEe,WAAW,EAAE,CAAClB,uDAAS,CAAC;EAAEmB,KAAK,EAAE;AAAgB,CAAE,EAC/F;EAAE9rB,IAAI,EAAE,QAAQ;EAAEoT,SAAS,EAAEwX,qFAAe;EAAEkB,KAAK,EAAE;AAAkB,CAAC,EACxE;EAAE9rB,IAAI,EAAE,UAAU;EAAEoT,SAAS,EAAE2X,2FAAiB;EAAEc,WAAW,EAAE,CAAClB,uDAAS,CAAC;EAAEmB,KAAK,EAAE;AAAuB,CAAC,EAC3G;EAAE9rB,IAAI,EAAE,SAAS;EAAEoT,SAAS,EAAE4X,wFAAgB;EAAEa,WAAW,EAAE,CAAClB,uDAAS,CAAC;EAAEmB,KAAK,EAAE;AAAmB,CAAC,EACrG;EAAE9rB,IAAI,EAAE,cAAc;EAAEoT,SAAS,EAAE4X,wFAAgB;EAAEa,WAAW,EAAE,CAAClB,uDAAS,CAAC;EAAEmB,KAAK,EAAE;AAAmB,CAAE,EAC3G;EAAE9rB,IAAI,EAAE,EAAE;EAAE+rB,UAAU,EAAE,OAAO;EAAEC,SAAS,EAAE;AAAM,CAAE,EACpD;EAAEhsB,IAAI,EAAE,IAAI;EAAE+rB,UAAU,EAAE;AAAO,CAAE,CACpC;AAMK,MAAOE,gBAAgB;;;uBAAhBA,gBAAgB;IAAA;EAAA;;;YAAhBA;IAAgB;EAAA;;;gBAHjBpB,yDAAY,CAACqB,OAAO,CAACV,MAAM,EAAEpuB,MAAM,CAAC,EACpCytB,yDAAY;IAAA;EAAA;;;sHAEXoB,gBAAgB;IAAAE,OAAA,GAAA1uB,yDAAA;IAAA2uB,OAAA,GAFjBvB,yDAAY;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;AC5BlB,MAAOwB,YAAY;EAEvB;EAEArvB,YACUsvB,WAAwB,EACxBC,aAA4B;IAD5B,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,aAAa,GAAbA,aAAa;IALvB,KAAAT,KAAK,GAAG,oBAAoB;EAM5B;EAEAU,QAAQA,CAAA,GACR;;;uBAVWH,YAAY,EAAA9uB,+DAAA,CAAAE,mEAAA,GAAAF,+DAAA,CAAAG,6EAAA;IAAA;EAAA;;;YAAZ2uB,YAAY;MAAAM,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCVzBzvB,uDAAA,oBAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDiB;AAC2B;AACX;AACN;AAEF;AACT;AACQ;AACA;AACwB;AAC1B;AACH;AACM;AACR;AAGmB;AACjB;AACU;AACW;AACjB;;AA8ChD,MAAO6wB,SAAS;EACpBpxB,YAAA;IACE2wB,mEAAkB,CAACC,mEAAQ,CAAC;EAC9B;;;uBAHWQ,SAAS;IAAA;EAAA;;;YAATA,SAAS;MAAAC,SAAA,GAFRhC,wDAAY;IAAA;EAAA;;;iBAvBb,CAET;QAAEiC,OAAO,EAAEjB,oEAAiB;QAAEkB,QAAQ,EAAEL,gFAAkB;QAAEM,KAAK,EAAE;MAAI,CAAE,EAEzE;QACEF,OAAO,EAAEjB,oEAAiB;QAC1BkB,QAAQ,EAAEd,gEAAgB;QAC1Be,KAAK,EAAE;OACR,EACD;QACEF,OAAO,EAAEjB,oEAAiB;QAC1BkB,QAAQ,EAAEf,gEAAgB;QAC1BgB,KAAK,EAAE;OACR,EACD;QACEF,OAAO,EAAEhB,qDAAS;QAClBmB,QAAQ,EAAE;OACX,EACD;QACEH,OAAO,EAAER,2DAAa;QACtBS,QAAQ,EAAEV,iEAAgBA;OAC3B,CACF;MAAA1B,OAAA,GA/BCoB,qEAAa,EACbtB,iEAAgB,EAChBkB,yDAAU,EACVC,mEAAgB,EAChBM,0FAAuB,EACvBK,8EAAmB,EACnBC,6DAAiB,EACjBG,+DAAY;IAAA;EAAA;;;uHA2BHC,SAAS;IAAAM,YAAA,GAvClBrC,wDAAY,EACZ4B,qEAAe;IAAA9B,OAAA,GAIfoB,qEAAa,EACbtB,iEAAgB,EAChBkB,yDAAU,EACVC,mEAAgB,EAChBM,0FAAuB,EACvBK,8EAAmB,EACnBC,6DAAiB,EACjBG,+DAAY;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACvC+C;AAChB;AACS;AAET;AACqB;AACS;AACX;AACK;AACG;AAC6B;;AAqBjG,MAAOhB,UAAU;;;uBAAVA,UAAU;IAAA;EAAA;;;YAAVA;IAAU;EAAA;;;gBATnByB,yDAAY,EACZC,uDAAW,EACXC,+DAAmB,EACnB1B,kEAAgB,EAChBvC,0DAAY,EACZ8D,qEAAc;IAAA;EAAA;;;sHAILxB,UAAU;IAAAuB,YAAA,GAhBnB5D,6EAAc,EACdC,sFAAiB,EACjBH,gFAAe,EACfI,mFAAgB,EAChBG,gHAAyB;IAAAgB,OAAA,GAGzByC,yDAAY,EACZC,uDAAW,EACXC,+DAAmB,EACnB1B,kEAAgB,EAChBvC,0DAAY,EACZ8D,qEAAc;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC1BgD;AAG/B;;;;;;;;;;IC2BrBpxB,4DAAA,QAA+B;IAAAA,oDAAA,GAAgE;IAAAA,0DAAA,EAAI;;;;IAApEA,uDAAA,GAAgE;IAAhEA,gEAAA,2OAAAgyB,MAAA,CAAAC,aAAA,KAAgE;;;;;;IAC/FjyB,4DAAA,YAA+G;IAAhFA,wDAAA,mBAAAmyB,kDAAA;MAAAnyB,2DAAA,CAAAqyB,GAAA;MAAA,MAAAC,MAAA,GAAAtyB,2DAAA;MAAA,OAASA,yDAAA,CAAAsyB,MAAA,CAAAG,UAAA,EAAY;IAAA,EAAC;IAA0DzyB,oDAAA,iIAAsB;IAAAA,0DAAA,EAAI;;;;;;ADlBjJ,MAAOytB,gBAAgB;EAU3BhuB,YACUizB,KAAqB,EACrBC,EAAe,EACfC,MAAc,EACfC,KAAmB,EAClBC,QAAyB,EACzB/D,WAAwB;IALxB,KAAA2D,KAAK,GAALA,KAAK;IACL,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,MAAM,GAANA,MAAM;IACP,KAAAC,KAAK,GAALA,KAAK;IACJ,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAA/D,WAAW,GAAXA,WAAW;IAXrB,KAAAgE,OAAO,GAAG,KAAK;IAEf,KAAAC,aAAa,GAAW,GAAG,CAAC,CAAC;IAW3B,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAC7BC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC3B,sDAAU,CAAC4B,QAAQ,CAAC;KACjC,CAAC;EACJ;EAEAnE,QAAQA,CAAA;IACN,IAAI,CAAChQ,GAAG,GAAG,IAAI,CAACyT,KAAK,CAACW,QAAQ,CAACtwB,MAAM,CAAC,KAAK,CAAC;IAC5C,IAAI,CAAC,IAAI,CAACkc,GAAG,EAAE;MACb,IAAI,CAAC2T,MAAM,CAACU,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;;IAGrC,IAAI,CAACC,UAAU,EAAE;EACnB;EACAC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACC,KAAK,EAAE;MACdC,aAAa,CAAC,IAAI,CAACD,KAAK,CAAC;;EAE7B;EAEAE,YAAYA,CAAA;IACV;IACA,IAAI,CAACX,aAAa,GAAG,GAAG,CAAC,CAAC;IAC1BU,aAAa,CAAC,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC;IAC3B,IAAI,CAACF,UAAU,EAAE,CAAC,CAAC;EACrB;;EAEA,IAAItB,aAAaA,CAAA;IACf,MAAM2B,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACd,aAAa,GAAG,EAAE,CAAC;IACnD,MAAMe,OAAO,GAAG,IAAI,CAACf,aAAa,GAAG,EAAE;IACvC,OAAO,GAAGY,OAAO,IAAIG,OAAO,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAGA,OAAO,EAAE;EAC1D;EAEAC,YAAYA,CAAA;IACV,IAAI,IAAI,CAAChB,aAAa,GAAG,CAAC,EAAE;MAC1BiB,KAAK,CAAC,gBAAgB,CAAC;KACxB,MAAM;MACLA,KAAK,CAAC,gBAAgB,CAAC;;EAE3B;EAEAV,UAAUA,CAAA;IACR,IAAI,CAACE,KAAK,GAAGS,WAAW,CAAC,MAAK;MAC5B,IAAI,IAAI,CAAClB,aAAa,GAAG,CAAC,EAAE;QAC1B,IAAI,CAACA,aAAa,EAAE;OACrB,MAAM;QACLU,aAAa,CAAC,IAAI,CAACD,KAAK,CAAC;;IAE7B,CAAC,EAAE,IAAI,CAAC;EACV;EAEAU,OAAOA,CAAA;IACL,IAAK,CAAC,IAAI,CAAClB,SAAS,CAACmB,KAAK,EAAG;MAC3B,IAAIC,GAAG,GAAG;QACR,OAAO,EAAE;UACP,eAAe,EAAE;;OAEpB;MACD,IAAI,CAACxB,KAAK,CAACyB,KAAK,CAACD,GAAG,CAAC;MACrB;;IAGF,IAAI,CAACtB,OAAO,GAAG,IAAI;IACnB,MAAM9T,GAAG,GAAG,IAAI,CAACA,GAAI;IACrB,MAAMkU,IAAI,GAAG,IAAI,CAACF,SAAS,CAACsB,QAAQ,CAAC,MAAM,CAAC,CAAC1zB,KAAK;IAElD,IAAI,CAACiyB,QAAQ,CAAC0B,OAAO,CAAE;MAAEvV,GAAG;MAAEkU;IAAI,CAAE,CAAE,CACnCrsB,IAAI,CACH2qB,8CAAQ,CAAC,MAAM,IAAI,CAACsB,OAAO,GAAG,KAAK,CAAC,CACrC,CAAC0B,SAAS,CAAC;MACZC,IAAI,EAAI9sB,EAAE,IAAM,IAAI,CAAC+sB,aAAa,CAAC/sB,EAAE,CAAC;MACtC0sB,KAAK,EAAED,GAAG,IAAI,IAAI,CAACxB,KAAK,CAACyB,KAAK,CAACD,GAAG;KACnC,CAAC;EACJ;EAEAM,aAAaA,CAAE/sB,EAAS;IACtB,IAAI,CAACA,EAAE,GAAGA,EAAE,CAAC,CAAC;IACd,IAAI,CAACgrB,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAEAb,UAAUA,CAAA;IACR,IAAI,CAAC1D,WAAW,CAACzE,YAAY,CAAC;MAAC1mB,IAAI,EAAC;QAACqb,GAAG,EAAC,IAAI,CAACA;MAAG;IAAC,CAAC,CAAC,CACnDnY,IAAI,CACH4qB,yCAAG,CAAEkD,IAAI,IAAI,CAAE,CAAC,CAAC,CAClB,CACAH,SAAS,CAAC;MACTC,IAAI,EAAGE,IAAQ,IAAI;QACjB,IAAI,CAACjB,YAAY,EAAE;MACrB,CAAC;MACDW,KAAK,EAAGD,GAAG,IAAI,CAAE;KAClB,CAAC;EACJ;;;uBA5GW5G,gBAAgB,EAAAztB,+DAAA,CAAAE,2DAAA,GAAAF,+DAAA,CAAAG,uDAAA,GAAAH,+DAAA,CAAAE,mDAAA,GAAAF,+DAAA,CAAAg1B,0EAAA,GAAAh1B,+DAAA,CAAAk1B,uEAAA,GAAAl1B,+DAAA,CAAAo1B,6DAAA;IAAA;EAAA;;;YAAhB3H,gBAAgB;MAAA2B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAA+F,0BAAA7F,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCd7BzvB,4DAAA,aAAqB;UAMXA,uDAAA,cAA0B;UAE1BA,4DAAA,cAAgD;UAAAA,oDAAA,gFAAa;UAAAA,0DAAA,EAAO;UAEtEA,4DAAA,aAAqB;UACWA,wDAAA,sBAAAu1B,oDAAA;YAAA,OAAY7F,GAAA,CAAAyE,OAAA,EAAS;UAAA,EAAC;UAClDn0B,4DAAA,eAAgC;UAC9BA,oDAAA,qoBACmC;UAAAA,uDAAA,UAAI;UACvCA,oDAAA,qaACF;UAAAA,0DAAA,EAAM;UAENA,4DAAA,eAAgC;UAEJA,oDAAA,yIAAwB;UAAAA,0DAAA,EAAM;UACtDA,4DAAA,eAAwB;UAAAA,uDAAA,iBAAmE;UAAAA,0DAAA,EAAM;UAGnGA,4DAAA,eAAuB;UACrBA,uDAAA,iBAA2C;UAC3CA,4DAAA,gBAA0C;UAApBA,wDAAA,mBAAAw1B,iDAAA;YAAA,OAAS9F,GAAA,CAAAyE,OAAA,EAAS;UAAA,EAAC;UAACn0B,oDAAA,oEAAU;UAAAA,0DAAA,EAAO;UAI/DA,4DAAA,eAA6B;UAC3BA,wDAAA,KAAA01B,8BAAA,gBAAmG;UACnG11B,wDAAA,KAAA21B,8BAAA,gBAAyI;UAU3I31B,0DAAA,EAAM;UAENA,4DAAA,kBAA6C;UAAAA,oDAAA,cAAM;UAAAA,0DAAA,EAAS;;;UApC3CA,uDAAA,GAA4B;UAA5BA,wDAAA,eAAAA,6DAAA,IAAA81B,GAAA,EAA4B;UAGzC91B,uDAAA,GAAuB;UAAvBA,wDAAA,cAAA0vB,GAAA,CAAAuD,SAAA,CAAuB;UAoBrBjzB,uDAAA,IAAyB;UAAzBA,wDAAA,SAAA0vB,GAAA,CAAAsD,aAAA,OAAyB;UACzBhzB,uDAAA,GAAyB;UAAzBA,wDAAA,SAAA0vB,GAAA,CAAAsD,aAAA,OAAyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7ByB;AACpC;;;;;;;;;;;;;AAU1B,MAAOzF,cAAc;EAOzB9tB,YACUkzB,EAAe,EACfoD,IAAiB,EACjBnD,MAAc,EACfC,KAAmB,EACnBmD,MAAiB,EAChBtD,KAAqB;IALrB,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAoD,IAAI,GAAJA,IAAI;IACJ,KAAAnD,MAAM,GAANA,MAAM;IACP,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAmD,MAAM,GAANA,MAAM;IACL,KAAAtD,KAAK,GAALA,KAAK;IAVf,KAAAK,OAAO,GAAG,KAAK;IAEf,KAAAkD,eAAe,GAAG,KAAK;IAUrB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACvD,EAAE,CAACO,KAAK,CAAC;MAC7BiD,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC3E,sDAAU,CAAC4B,QAAQ,CAAC,CAAC;MAClCgD,QAAQ,EAAE,CAAC,EAAE,EAAE5E,sDAAU,CAAC4B,QAAQ;KACnC,CAAC;EACJ;EAEAnE,QAAQA,CAAA,GACR;EAEAoH,wBAAwBA,CAAA;IACtB,IAAI,CAACJ,eAAe,GAAG,CAAC,IAAI,CAACA,eAAe;EAC9C;EAEAK,OAAOA,CAAA;IACLC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,SAAS,CAAC9B,KAAK,CAAC;IACjC,IAAI,CAAC,IAAI,CAAC8B,SAAS,CAAC9B,KAAK,EAAE;MACzB,IAAIC,GAAG,GAAG;QACR,OAAO,EAAE;UACP,eAAe,EAAE;;OAEpB;MACD,IAAI,CAACxB,KAAK,CAACyB,KAAK,CAACD,GAAG,CAAC;MACrB;;IAEF,IAAI,CAACtB,OAAO,GAAG,IAAI;IACnB,MAAMoD,KAAK,GAAG,IAAI,CAACD,SAAS,CAAC3B,QAAQ,CAAC,OAAO,CAAC,CAAC1zB,KAAK;IACpD,MAAMu1B,QAAQ,GAAG,IAAI,CAACF,SAAS,CAAC3B,QAAQ,CAAC,UAAU,CAAC,CAAC1zB,KAAK;IAC1D,IAAI,CAACk1B,IAAI,CAACI,KAAK,CAACA,KAAK,EAAEC,QAAQ,CAAC,CAC7BtvB,IAAI,CACH2qB,8CAAQ,CAAC,MAAM,IAAI,CAACsB,OAAO,GAAG,KAAK,CAAC,CACrC,CAAC0B,SAAS,CAAC;MACVC,IAAI,EAAEA,CAAA,KAAM,IAAI,CAAC+B,YAAY,EAAE;MAC/BnC,KAAK,EAAED,GAAG,IAAI,IAAI,CAACxB,KAAK,CAACyB,KAAK,CAACD,GAAG;KACnC,CAAC;EACN;EAEAoC,YAAYA,CAAA;IACV,MAAMC,SAAS,GAAG,IAAI,CAAChE,KAAK,CAACW,QAAQ,CAACsD,WAAW,CAAC,WAAW,CAAC;IAC9D,IAAID,SAAS,EAAE;MACb,IAAI,CAAC9D,MAAM,CAACgE,aAAa,CAACF,SAAS,CAAC;KACrC,MAAM;MACL,IAAI,CAAC9D,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;;;uBA1DW/F,cAAc,EAAAvtB,+DAAA,CAAAE,uDAAA,GAAAF,+DAAA,CAAAG,+DAAA,GAAAH,+DAAA,CAAAg1B,mDAAA,GAAAh1B,+DAAA,CAAAk1B,0EAAA,GAAAl1B,+DAAA,CAAAo1B,+DAAA,GAAAp1B,+DAAA,CAAAg1B,2DAAA;IAAA;EAAA;;;YAAdzH,cAAc;MAAA6B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAAwH,wBAAAtH,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCd3BzvB,4DAAA,aAAqB;UAKXA,uDAAA,cAA0B;UAC5BA,0DAAA,EAAM;UACNA,4DAAA,aAAqB;UAC8BA,wDAAA,sBAAAg3B,iDAAA;YAAA,OAAYtH,GAAA,CAAA4G,OAAA,EAAS;UAAA,EAAC;UACrEt2B,4DAAA,aAA6B;UAEDA,oDAAA,uCAAM;UAAAA,0DAAA,EAAM;UACpCA,4DAAA,eAAwB;UAAAA,uDAAA,iBACD;UAAAA,0DAAA,EAAM;UAE/BA,4DAAA,cAAuB;UACGA,oDAAA,6CAAO;UAAAA,0DAAA,EAAM;UACrCA,4DAAA,eAAwB;UACtBA,uDAAA,iBAKC;UACDA,4DAAA,kBAAsJ;UAAhIA,wDAAA,mBAAAi3B,iDAAA;YAAA,OAASvH,GAAA,CAAA2G,wBAAA,EAA0B;UAAA,EAAC;UAA4Fr2B,0DAAA,EAAS;UASrKA,4DAAA,cAA6B;UAGFA,oDAAA,SAAC;UAAAA,0DAAA,EAAO;UAC7BA,4DAAA,YAAO;UAAAA,oDAAA,+GAAkB;UAAAA,0DAAA,EAAO;UAQpCA,4DAAA,cAAuB;UACHA,wDAAA,mBAAAk3B,+CAAA;YAAA,OAASxH,GAAA,CAAA4G,OAAA,EAAS;UAAA,EAAC;UAACt2B,oDAAA,wFAAe;UAAAA,0DAAA,EAAO;UAGhEA,uDAAA,eAA2B;UAC3BA,4DAAA,cAA6B;UAENA,oDAAA,8LAAqC;UAAAA,uDAAA,UAAI;UAACA,oDAAA,wKAA6B;UAAAA,0DAAA,EAAO;UAEnGA,4DAAA,cAAuB;UAC8BA,oDAAA,4HAAqB;UAAAA,0DAAA,EAAO;UAGnFA,4DAAA,kBAA6C;UAAAA,oDAAA,cAAM;UAAAA,0DAAA,EAAS;;;UAlDrCA,uDAAA,GAAuB;UAAvBA,wDAAA,cAAA0vB,GAAA,CAAAwG,SAAA,CAAuB;UAUjCl2B,uDAAA,IAA8C;UAA9CA,wDAAA,SAAA0vB,GAAA,CAAAuG,eAAA,uBAA8C;UAMMj2B,uDAAA,GAA0F;UAA1FA,wDAAA,CAAA0vB,GAAA,CAAAuG,eAAA,qEAA0F;UAWlIj2B,uDAAA,GAAqC;UAArCA,wDAAA,eAAAA,6DAAA,IAAA81B,GAAA,EAAqC;UAoBpC91B,uDAAA,IAA4B;UAA5BA,wDAAA,eAAAA,6DAAA,IAAAo3B,GAAA,EAA4B;;;;;;;;;;;;;;;;;;;;;;;;;ACpDrC;;;;AAOvB,MAAO/J,eAAe;EAE1B5tB,YACUs2B,IAAiB,EACjBnD,MAAc;IADd,KAAAmD,IAAI,GAAJA,IAAI;IACJ,KAAAnD,MAAM,GAANA,MAAM;EACZ;EAEJ3D,QAAQA,CAAA;IACN,IAAI,CAAC8G,IAAI,CAACuB,MAAM,EAAE,CACfxwB,IAAI,CAACuwB,2CAAK,CAAC,IAAI,CAAC,CAAC,CACjB5C,SAAS,CAAC,MAAM,IAAI,CAAC7B,MAAM,CAACgE,aAAa,CAAC,GAAG,CAAC,CAAC;EACpD;;;uBAXWvJ,eAAe,EAAArtB,+DAAA,CAAAE,+DAAA,GAAAF,+DAAA,CAAAG,mDAAA;IAAA;EAAA;;;YAAfktB,eAAe;MAAA+B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAAgI,yBAAA9H,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCV5BzvB,4DAAA,aAAqB;UAMXA,uDAAA,cAA0B;UAE1BA,4DAAA,WAAM;UAAAA,oDAAA,qHAAoB;UAAAA,0DAAA,EAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLyB;AACX;;;;;;;;;;;;;ICK/CA,4DAAA,cAA+G;IAAvBA,wDAAA,sBAAA03B,mEAAA;MAAA13B,2DAAA,CAAAqyB,GAAA;MAAA,MAAAC,MAAA,GAAAtyB,2DAAA;MAAA,OAAYA,yDAAA,CAAAsyB,MAAA,CAAAqF,OAAA,EAAS;IAAA,EAAC;IAC5G33B,4DAAA,aAA6B;IAEDA,oDAAA,sCAAM;IAAAA,0DAAA,EAAM;IACpCA,4DAAA,cAAwB;IACtBA,uDAAA,gBAKC;IACHA,0DAAA,EAAM;IAGVA,4DAAA,aAA6B;IAEPA,wDAAA,mBAAA43B,gEAAA;MAAA53B,2DAAA,CAAAqyB,GAAA;MAAA,MAAAwF,MAAA,GAAA73B,2DAAA;MAAA,OAASA,yDAAA,CAAA63B,MAAA,CAAAF,OAAA,EAAS;IAAA,EAAC;IAAC33B,oDAAA,wKAA8B;IAAAA,0DAAA,EAAO;IAG/EA,4DAAA,kBAA6C;IAAAA,oDAAA,cAAM;IAAAA,0DAAA,EAAS;;;;IAnBAA,wDAAA,cAAAgyB,MAAA,CAAA8F,WAAA,CAAyB;;;;;;IAsBvF93B,4DAAA,cAA4H;IAA/BA,wDAAA,sBAAA+3B,mEAAA;MAAA/3B,2DAAA,CAAAg4B,GAAA;MAAA,MAAAC,MAAA,GAAAj4B,2DAAA;MAAA,OAAYA,yDAAA,CAAAi4B,MAAA,CAAAC,eAAA,EAAiB;IAAA,EAAC;IACzHl4B,4DAAA,aAA6B;IAEDA,oDAAA,sCAAM;IAAAA,0DAAA,EAAM;IACpCA,4DAAA,cAAwB;IACtBA,uDAAA,gBAMC;IAEHA,0DAAA,EAAM;IAERA,4DAAA,cAAuB;IACGA,oDAAA,0BAAI;IAAAA,0DAAA,EAAM;IAClCA,4DAAA,eAAwB;IACtBA,uDAAA,iBAKC;IAEHA,0DAAA,EAAM;IAGVA,4DAAA,eAAgC;IAEJA,oDAAA,uHAAqB;IAAAA,0DAAA,EAAM;IACnDA,4DAAA,eAAwB;IACtBA,uDAAA,iBAAmH;IACnHA,4DAAA,kBAAsJ;IAAhIA,wDAAA,mBAAAm4B,mEAAA;MAAAn4B,2DAAA,CAAAg4B,GAAA;MAAA,MAAAI,MAAA,GAAAp4B,2DAAA;MAAA,OAASA,yDAAA,CAAAo4B,MAAA,CAAA/B,wBAAA,EAA0B;IAAA,EAAC;IAA4Fr2B,0DAAA,EAAS;IAGnKA,4DAAA,eAAuB;IACGA,oDAAA,gHAAmB;IAAAA,0DAAA,EAAM;IACjDA,4DAAA,eAAwB;IACtBA,uDAAA,iBAA2H;IAC3HA,4DAAA,kBAAsJ;IAAhIA,wDAAA,mBAAAq4B,mEAAA;MAAAr4B,2DAAA,CAAAg4B,GAAA;MAAA,MAAAM,MAAA,GAAAt4B,2DAAA;MAAA,OAASA,yDAAA,CAAAs4B,MAAA,CAAAjC,wBAAA,EAA0B;IAAA,EAAC;IAA4Fr2B,0DAAA,EAAS;IAsBrKA,4DAAA,cAA6B;IAEPA,wDAAA,mBAAAu4B,iEAAA;MAAAv4B,2DAAA,CAAAg4B,GAAA;MAAA,MAAAQ,MAAA,GAAAx4B,2DAAA;MAAA,OAASA,yDAAA,CAAAw4B,MAAA,CAAAN,eAAA,EAAiB;IAAA,EAAC;IAACl4B,oDAAA,6FAAe;IAAAA,0DAAA,EAAO;IAGxEA,4DAAA,kBAA6C;IAAAA,oDAAA,cAAM;IAAAA,0DAAA,EAAS;;;;IAnEDA,wDAAA,cAAAy4B,MAAA,CAAAC,iBAAA,CAA+B;IAgC7E14B,uDAAA,IAA8C;IAA9CA,wDAAA,SAAAy4B,MAAA,CAAAxC,eAAA,uBAA8C;IACMj2B,uDAAA,GAA0F;IAA1FA,wDAAA,CAAAy4B,MAAA,CAAAxC,eAAA,qEAA0F;IAM9Ij2B,uDAAA,GAA8C;IAA9CA,wDAAA,SAAAy4B,MAAA,CAAAxC,eAAA,uBAA8C;IACMj2B,uDAAA,GAA0F;IAA1FA,wDAAA,CAAAy4B,MAAA,CAAAxC,eAAA,qEAA0F;;;ADvDjK,MAAOrI,yBAAyB;EAcpCnuB,YACUkzB,EAAe,EACfoD,IAAiB,EACjBnD,MAAc,EACfC,KAAmB,EACnBmD,MAAiB,EAChBtD,KAAqB,EACrB3D,WAAwB,EACxB4J,QAAqB;IAPrB,KAAAhG,EAAE,GAAFA,EAAE;IACF,KAAAoD,IAAI,GAAJA,IAAI;IACJ,KAAAnD,MAAM,GAANA,MAAM;IACP,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAmD,MAAM,GAANA,MAAM;IACL,KAAAtD,KAAK,GAALA,KAAK;IACL,KAAA3D,WAAW,GAAXA,WAAW;IACX,KAAA4J,QAAQ,GAARA,QAAQ;IApBlB,KAAAC,yBAAyB,GAAsB;MAAEC,QAAQ,EAAE;IAAI,CAAE;IACjE,KAAAC,wBAAwB,GAAsB;MAAED,QAAQ,EAAE;IAAI,CAAE;IAExD,KAAAE,SAAS,GAAG,IAAIvB,yCAAO,EAAE;IAKjC,KAAAzE,OAAO,GAAG,KAAK;IAEf,KAAAkD,eAAe,GAAG,KAAK;IAYrB,IAAI,CAAC6B,WAAW,GAAG,IAAI,CAACnF,EAAE,CAACO,KAAK,CAAC;MAC/BiD,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC3E,sDAAU,CAAC4B,QAAQ,CAAC;KAClC,CAAC;IACF,IAAI,CAACsF,iBAAiB,GAAG,IAAI,CAAC/F,EAAE,CAACO,KAAK,CAAC;MACrCiD,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC3E,sDAAU,CAAC4B,QAAQ,CAAC,CAAC;MAClCnU,GAAG,EAAE,CAAC,EAAE,EAAE,CAACuS,sDAAU,CAAC4B,QAAQ,CAAC,CAAC;MAChCD,IAAI,EAAE,CAAC,EAAE,EAAE3B,sDAAU,CAAC4B,QAAQ,CAAC;MAC/BgD,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC5E,sDAAU,CAAC4B,QAAQ,CAAC,CAAC;MACrC4F,gBAAgB,EAAE,CAAC,EAAE,EAAExH,sDAAU,CAAC4B,QAAQ;KAC3C,CAAC;EACJ;EAEAnE,QAAQA,CAAA,GACR;EAEAoH,wBAAwBA,CAAA;IACtB,IAAI,CAACJ,eAAe,GAAG,CAAC,IAAI,CAACA,eAAe;EAC9C;EAEA0B,OAAOA,CAAA;IACL,IAAI,CAAC5I,WAAW,CAACnE,iBAAiB,CAAC;MAAChnB,IAAI,EAAC,IAAI,CAACk0B,WAAW,CAACj3B;IAAK,CAAC,CAAC,CAChEiG,IAAI,CACH4qB,yCAAG,CAAEuH,QAAQ,IAAG,CAAC,CAAC,CAAC,EACnBxB,+CAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAC1B,CACAtE,SAAS,CAAC;MACTC,IAAI,EAAGwE,CAAC,IAAI;QACV,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAChB,6BAA6B,EAC7B33B,SAAS,EACT,IAAI,CAACo3B,yBAAyB,CAC/B;QACD,IAAI,CAACF,iBAAiB,CAACU,UAAU,CAAC;UAChCjD,KAAK,EAAE,IAAI,CAAC2B,WAAW,CAACj3B,KAAK,CAACs1B,KAAK;UACnClX,GAAG,EAAEia,CAAC,CAACja;UACP;SACD,CAAC;MACJ,CAAC;;MACDqV,KAAK,EAAGD,GAAG,IAAI;QACb,IAAI,CAACsE,QAAQ,CAACQ,IAAI,CAChB,qCAAqC,GAAG9E,GAAG,CAACC,KAAK,CAAC+E,aAAa,EAC/D73B,SAAS,EACT,IAAI,CAACo3B,yBAAyB,CAC/B;MACH;KACD,CAAC;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAEF;;EAEAV,eAAeA,CAAA;IACb;IACA;IACA;IACA,IAAI,CAACnJ,WAAW,CAAChE,iBAAiB,CAAC;MAACnnB,IAAI,EAAC,IAAI,CAAC80B,iBAAiB,CAAC73B;IAAK,CAAC,CAAC,CACtEiG,IAAI,CACH4qB,yCAAG,CAAEuH,QAAQ,IAAG,CAAC,CAAC,CAAC,EACnBxB,+CAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAC1B,CACAtE,SAAS,CAAC;MACTC,IAAI,EAAGwE,CAAC,IAAI;QACV,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAChB,wBAAwB,EACxB33B,SAAS,EACT,IAAI,CAACo3B,yBAAyB,CAC/B;QACD,IAAI,CAAChG,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC,CAAC;MACDgB,KAAK,EAAGD,GAAG,IAAI;QACb,IAAI,CAACsE,QAAQ,CAACQ,IAAI,CAChB,2BAA2B,GAAG9E,GAAG,CAACC,KAAK,CAAC+E,aAAa,EACrD73B,SAAS,EACT,IAAI,CAACo3B,yBAAyB,CAC/B;MACH;KACD,CAAC;EAEJ;;;uBA7GWhL,yBAAyB,EAAA5tB,+DAAA,CAAAE,uDAAA,GAAAF,+DAAA,CAAAG,+DAAA,GAAAH,+DAAA,CAAAg1B,mDAAA,GAAAh1B,+DAAA,CAAAk1B,0EAAA,GAAAl1B,+DAAA,CAAAo1B,+DAAA,GAAAp1B,+DAAA,CAAAg1B,2DAAA,GAAAh1B,+DAAA,CAAAs5B,6DAAA,GAAAt5B,+DAAA,CAAAu5B,qEAAA;IAAA;EAAA;;;YAAzB3L,yBAAyB;MAAAwB,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAAkK,mCAAAhK,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UChBtCzvB,4DAAA,aAAqB;UAKXA,uDAAA,cAA0B;UAC5BA,0DAAA,EAAM;UACNA,4DAAA,aAAqB;UAEnBA,wDAAA,IAAA05B,yCAAA,mBAoBO;UAEP15B,wDAAA,IAAA25B,yCAAA,mBAoEO;UACT35B,0DAAA,EAAM;;;UA3FGA,uDAAA,GAAkC;UAAlCA,wDAAA,UAAA0vB,GAAA,CAAAgJ,iBAAA,CAAA73B,KAAA,CAAAoe,GAAA,CAAkC;UAsBlCjf,uDAAA,GAAiC;UAAjCA,wDAAA,SAAA0vB,GAAA,CAAAgJ,iBAAA,CAAA73B,KAAA,CAAAoe,GAAA,CAAiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BmB;AAEH;AAOpC;;;;;;;;;;AAQxB,MAAOuO,iBAAiB;EAO5B/tB,YACUkzB,EAAe,EACfC,MAAc,EACdE,QAAyB,EAC1BD,KAAmB,EACnBmD,MAAiB;IAJhB,KAAArD,EAAE,GAAFA,EAAE;IACF,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAE,QAAQ,GAARA,QAAQ;IACT,KAAAD,KAAK,GAALA,KAAK;IACL,KAAAmD,MAAM,GAANA,MAAM;IATf,KAAAjD,OAAO,GAAG,KAAK;IAWb,IAAI,CAAC+G,YAAY,GAAG,IAAI,CAACnH,EAAE,CAACO,KAAK,CAAC;MAChC6G,OAAO,EAAE,CAAC,EAAE,EAAE,CAACvI,sDAAU,CAAC4B,QAAQ,CAAC,CAAE;MACrC4G,GAAG,EAAE,CAAC,EAAE,EAAE,CAACxI,sDAAU,CAAC4B,QAAQ,CAAC,CAAE;MACjC6G,KAAK,EAAE,CAAC,EAAE,EAAE,CAACzI,sDAAU,CAAC4B,QAAQ,CAAC,CAAE;MACnC8G,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC1I,sDAAU,CAAC4B,QAAQ,EAAEyG,qDAAY,CAAE,CAAE;MAChDM,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC3I,sDAAU,CAAC4B,QAAQ,EAAEwG,uDAAc,CAAC,CAAE;MACnDxD,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC5E,sDAAU,CAAC4B,QAAQ,CAAC,CAAE;MACtCgH,gBAAgB,EAAE,CAAC,EAAE,EAAE,CAAC5I,sDAAU,CAAC4B,QAAQ,CAAC;KAC7C,CAAC;EAEJ;EAEAnE,QAAQA,CAAA,GACR;EAEAoL,oBAAoBA,CAAA;IAClB;IACA,OAAOn4B,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC23B,YAAY,CAACvF,QAAQ,CAAC,CAAC+F,KAAK,CAACC,KAAK,IAAG;MAC3D,MAAMC,OAAO,GAAG,IAAI,CAACV,YAAY,CAACW,GAAG,CAACF,KAAK,CAAC;MAC5C,OAAOC,OAAO,EAAE35B,KAAK,KAAK,EAAE;IAC9B,CAAC,CAAC;EACJ;EAEA65B,WAAWA,CAACC,KAAY;IACtB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAA0B;IAC9C,IAAIh6B,KAAK,GAAG+5B,KAAK,CAAC/5B,KAAK,CAAC+B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;IAE5C;IACA,IAAI/B,KAAK,CAACi6B,MAAM,GAAG,EAAE,EAAE;MACrBj6B,KAAK,GAAGA,KAAK,CAACk6B,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;;IAGhCl6B,KAAK,GAAG,IAAI,GAAGA,KAAK,CAACk6B,SAAS,CAAC,CAAC,CAAC;IACjC,IAAI,CAACjB,YAAY,CAACW,GAAG,CAAC,OAAO,CAAC,EAAEO,QAAQ,CAACn6B,KAAK,EAAE;MAAEo6B,SAAS,EAAE;IAAK,CAAE,CAAC,CAAC,CAAC;EACzE;;EAEA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACpB,YAAY,CAACW,GAAG,CAAC,OAAO,CAAC;EACvC;EACA,IAAIU,IAAIA,CAAA;IACN,OAAO,IAAI,CAACrB,YAAY,CAACW,GAAG,CAAC,KAAK,CAAC;EACrC;EAEAW,UAAUA,CAAA;IACR7E,OAAO,CAACC,GAAG,CAAC,IAAI,CAACsD,YAAY,CAAC;IAC9BvD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACsD,YAAY,CAAC1F,KAAK,CAAC;IAEpC,IAAK,CAAC,IAAI,CAACiG,oBAAoB,EAAE,EAAG;MAClC,IAAIhG,GAAG,GAAG;QACR,OAAO,EAAE;UACP,eAAe,EAAE;;OAEpB;MACD,IAAI,CAACxB,KAAK,CAACyB,KAAK,CAACD,GAAG,CAAC;MACrB;;IAIF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,IAAIgF,aAAa,GAAa,EAAE;IAEhC,IAAK,IAAI,CAAC6B,MAAM,EAAEG,MAAM,GAAG,OAAO,CAAC,EAAG;MACpChC,aAAa,CAACh3B,IAAI,CAAC,wBAAwB,CAAC;;IAG9C,IAAK,IAAI,CAAC84B,IAAI,EAAEE,MAAM,GAAG,KAAK,CAAC,EAAI;MACjChC,aAAa,CAACh3B,IAAI,CAAC,qBAAqB,CAAC;;IAG3C,IAAIg3B,aAAa,CAACyB,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAIzG,GAAG,GAAG;QACR,OAAO,EAAE;UACP,eAAe,EAAEgF;;OAEpB;MACD,IAAI,CAACxG,KAAK,CAACyB,KAAK,CAACD,GAAG,CAAC;MACrB;;IAGF,IAAI,CAACtB,OAAO,GAAG,IAAI;IACnB,MAAMgH,OAAO,GAAG,IAAI,CAACD,YAAY,CAACvF,QAAQ,CAAC,SAAS,CAAC,CAAC1zB,KAAK;IAC3D,MAAMm5B,GAAG,GAAG,IAAI,CAACF,YAAY,CAACvF,QAAQ,CAAC,KAAK,CAAC,CAAC1zB,KAAK;IACnD,MAAMo5B,KAAK,GAAG,IAAI,CAACH,YAAY,CAACvF,QAAQ,CAAC,OAAO,CAAC,CAAC1zB,KAAK;IACvD,MAAMq5B,GAAG,GAAG,IAAI,CAACJ,YAAY,CAACvF,QAAQ,CAAC,KAAK,CAAC,CAAC1zB,KAAK;IACnD,MAAMs5B,KAAK,GAAG,IAAI,CAACL,YAAY,CAACvF,QAAQ,CAAC,OAAO,CAAC,CAAC1zB,KAAK;IACvD,MAAMu1B,QAAQ,GAAG,IAAI,CAAC0D,YAAY,CAACvF,QAAQ,CAAC,UAAU,CAAC,CAAC1zB,KAAK;IAC7D,MAAMu5B,gBAAgB,GAAG,IAAI,CAACN,YAAY,CAACvF,QAAQ,CAAC,kBAAkB,CAAC,CAAC1zB,KAAK;IAE7E,IAAI,CAACiyB,QAAQ,CAACwI,IAAI,CAAE;MAAEvB,OAAO;MAAEC,GAAG;MAAEC,KAAK;MAAEC,GAAG;MAAEC,KAAK;MAAE/D,QAAQ;MAAEgE;IAAgB,CAAE,CAAE,CAClFtzB,IAAI,CACH2qB,8CAAQ,CAAC,MAAM,IAAI,CAACsB,OAAO,GAAG,KAAK,CAAC,CACrC,CAAC0B,SAAS,CAAC;MACZC,IAAI,EAAIzV,GAAG,IAAM,IAAI,CAACsc,cAAc,CAACtc,GAAG,CAAC;MACzCqV,KAAK,EAAED,GAAG,IAAI,IAAI,CAACxB,KAAK,CAACyB,KAAK,CAACD,GAAG;KACnC,CAAC;EACJ;EAEAkH,cAAcA,CAAEtc,GAAU;IACxB,IAAI,CAAC2T,MAAM,CAACU,QAAQ,CAAC,CAAC,WAAW,GAACrU,GAAG,CAAC,CAAC;EACzC;;;uBA1HWuO,iBAAiB,EAAAxtB,+DAAA,CAAAE,uDAAA,GAAAF,+DAAA,CAAAG,mDAAA,GAAAH,+DAAA,CAAAg1B,uEAAA,GAAAh1B,+DAAA,CAAAk1B,0EAAA,GAAAl1B,+DAAA,CAAAo1B,+DAAA;IAAA;EAAA;;;YAAjB5H,iBAAiB;MAAA4B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAAiM,2BAAA/L,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCjB9BzvB,4DAAA,aAAqB;UAMXA,uDAAA,cAA0B;UAE1BA,4DAAA,cAA4C;UAAAA,oDAAA,yEAAW;UAAAA,0DAAA,EAAO;UAEhEA,4DAAA,aAAqB;UACcA,wDAAA,sBAAAy7B,qDAAA;YAAA,OAAY/L,GAAA,CAAA0L,UAAA,EAAY;UAAA,EAAC;UACxDp7B,4DAAA,eAAyB;UAEGA,oDAAA,2GAAmB;UAAAA,0DAAA,EAAM;UACjDA,4DAAA,eAAwB;UAAAA,uDAAA,iBAAsE;UAAAA,0DAAA,EAAM;UAGxGA,4DAAA,eAAgC;UAEJA,oDAAA,gHAAmB;UAAAA,0DAAA,EAAM;UACjDA,4DAAA,eAAwB;UAAAA,uDAAA,iBAAkE;UAAAA,0DAAA,EAAM;UAElGA,4DAAA,eAAuB;UACGA,oDAAA,wFAAe;UAAAA,0DAAA,EAAM;UAC7CA,4DAAA,eAAwB;UAAmBA,wDAAA,mBAAA07B,mDAAAC,MAAA;YAAA,OAASjM,GAAA,CAAAgL,WAAA,CAAAiB,MAAA,CAAmB;UAAA,EAAC;UAAhD37B,0DAAA,EAAmG;UAI/HA,4DAAA,eAAgC;UAEJA,oDAAA,2BAAI;UAAAA,0DAAA,EAAM;UAClCA,4DAAA,eAAwB;UAAAA,uDAAA,iBAAkE;UAAAA,0DAAA,EAAM;UAElGA,4DAAA,eAAuB;UACGA,oDAAA,eAAO;UAAAA,0DAAA,EAAM;UACrCA,4DAAA,eAAwB;UAAAA,uDAAA,iBAAoE;UAAAA,0DAAA,EAAM;UAItGA,4DAAA,eAAgC;UAEJA,oDAAA,wFAAe;UAAAA,0DAAA,EAAM;UAC7CA,4DAAA,eAAwB;UAAAA,uDAAA,iBAA0E;UAAAA,0DAAA,EAAM;UAE1GA,4DAAA,eAAuB;UACGA,oDAAA,gHAAmB;UAAAA,0DAAA,EAAM;UACjDA,4DAAA,eAAwB;UAAAA,uDAAA,iBAAkF;UAAAA,0DAAA,EAAM;UAIpHA,4DAAA,eAA6B;UAC3BA,uDAAA,eAEM;UACNA,4DAAA,eAAuB;UACrBA,uDAAA,iBAA2C;UAC3CA,4DAAA,gBAA6C;UAAvBA,wDAAA,mBAAA47B,kDAAA;YAAA,OAASlM,GAAA,CAAA0L,UAAA,EAAY;UAAA,EAAC;UAACp7B,oDAAA,oHAAkB;UAAAA,0DAAA,EAAO;UAG1EA,4DAAA,kBAA6C;UAAAA,oDAAA,cAAM;UAAAA,0DAAA,EAAS;;;UApD3CA,uDAAA,GAAwB;UAAxBA,wDAAA,eAAAA,6DAAA,IAAA81B,GAAA,EAAwB;UAGrC91B,uDAAA,GAA0B;UAA1BA,wDAAA,cAAA0vB,GAAA,CAAAoK,YAAA,CAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;ACTM;;;AAGhD,MAAMgC,cAAc,GAAG,0BAA0B;AAK3C,MAAOjF,WAAW;EAKtBp3B,YACUsvB,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAHZ,KAAAgN,OAAO,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAC;IAKtC,IAAI,CAACC,oBAAoB,EAAE;EAC7B;EAEA/F,KAAKA,CAACA,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACrH,WAAW,CAACjD,SAAS,CAAC;MAAEloB,IAAI,EAAE;QAAEuyB,KAAK;QAAEC;MAAQ;IAAE,CAAE,CAAC,CAC7DtvB,IAAI,CACH4qB,yCAAG,CAACyK,GAAG,IAAI,IAAI,CAACC,SAAS,GAAGD,GAAG,CAAC,EAChCzK,yCAAG,CAAC,MAAM,IAAI,CAAC2K,kBAAkB,EAAE,CAAC,EACpCx6B,yCAAG,CAAC,MAAML,SAAS,CAAC,CACrB;EACL;EAEA86B,eAAeA,CAAA;IACb,IAAI,CAACJ,oBAAoB,EAAE;IAC3B,OAAO,OAAO,IAAI,CAACE,SAAS,EAAEG,KAAK,KAAK,WAAW;EACrD;EAEAjF,MAAMA,CAAA;IACJ,IAAI,CAAC8E,SAAS,GAAG56B,SAAS;IAC1B,IAAI,CAACg7B,2BAA2B,EAAE;IAClC,OAAOX,wCAAE,CAACr6B,SAAS,CAAC;EACtB;EAEAi7B,QAAQA,CAAA;IACN,OAAO,IAAI,CAACL,SAAS,EAAEG,KAAK;EAC9B;EAEQL,oBAAoBA,CAAA;IAC1B,MAAMQ,eAAe,GAAG,IAAI,CAACX,OAAO,CAACY,OAAO,CAACb,cAAc,CAAC;IAC5D,IAAI,CAACY,eAAe,EAAE;MACpB,IAAI,CAACN,SAAS,GAAC56B,SAAS;MACxB;;IAEF,IAAI;MACF,MAAM46B,SAAS,GAAG13B,IAAI,CAACk4B,KAAK,CAACF,eAAe,CAAC;MAC7C,IAAIN,SAAS,EAAE;QACb,IAAI,CAACA,SAAS,GAAGA,SAAS;;KAE7B,CAAC,OAAOlD,CAAC,EAAE;MACV3C,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE0C,CAAC,CAAC;;EAE7D;EAEQmD,kBAAkBA,CAAA;IACxB,IAAI,CAACN,OAAO,CAACc,OAAO,CAACf,cAAc,EAAEp3B,IAAI,CAACC,SAAS,CAAC,IAAI,CAACy3B,SAAS,CAAC,CAAC;EACtE;EAEQI,2BAA2BA,CAAA;IACjC,IAAI,CAACT,OAAO,CAACe,UAAU,CAAChB,cAAc,CAAC;EACzC;EAEAiB,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACX,SAAS,EAAEY,YAAY,EAAE;MAChC,IAAI;QACF,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAAC,IAAI,CAACd,SAAS,EAAEY,YAAY,CAAC;QACzD,MAAMG,GAAG,GAAG,IAAID,IAAI,EAAE;QACtB,OAAQD,UAAU,CAACG,OAAO,EAAE,GAAGD,GAAG,CAACC,OAAO,EAAE,GAAI,KAAK;OACtD,CAAC,OAAOlE,CAAC,EAAE;QACV,OAAO,KAAK;;;IAGhB,OAAO,KAAK;EACd;EAEAmE,YAAYA,CAAA;IACV,MAAMz5B,IAAI,GAAG;MAAE05B,aAAa,EAAE,IAAI,CAAClB,SAAU,CAACkB;IAAa,CAAE;IAC7D,OAAO,IAAI,CAACvO,WAAW,CAAC3C,eAAe,CAAC;MAACxoB;IAAI,CAAC,CAAC,CAACkD,IAAI,CAClD4qB,yCAAG,CAACyK,GAAG,IAAI,IAAI,CAACC,SAAS,GAAGD,GAAgB,CAAC,EAC7CzK,yCAAG,CAAC,MAAM,IAAI,CAAC2K,kBAAkB,EAAE,CAAC,EACpCx6B,yCAAG,CAAC,MAAML,SAAS,CAAC,CACrB;EACH;;;uBA/EWq1B,WAAW,EAAA72B,sDAAA,CAAAE,mEAAA;IAAA;EAAA;;;aAAX22B,WAAW;MAAAv3B,OAAA,EAAXu3B,WAAW,CAAAt3B,IAAA;MAAAI,UAAA,EAFV;IAAM;EAAA;;;;;;;;;;;;;;;;;;ACPsB;;;AAMpC,MAAOw1B,eAAe;EAI1B11B,YACUsvB,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EACjB;EAEJuM,IAAIA,CAAE13B,IAA8H;IAClI,OAAO,IAAI,CAACmrB,WAAW,CAAC5E,UAAU,CAAE;MAAEvmB;IAAI,CAAE,CAAE,CAC3CkD,IAAI,CACHjF,yCAAG,CAACs6B,GAAG,IAAIA,GAAG,CAACld,GAAG,CAAC,CACpB;EACL;EAEAuV,OAAOA,CAAE5wB,IAAoC;IAC3C,OAAO,IAAI,CAACmrB,WAAW,CAACtE,WAAW,CAAE;MAAE7mB;IAAI,CAAE,CAAE,CAC5CkD,IAAI,CACHjF,yCAAG,CAACs6B,GAAG,IAAIA,GAAG,CAACv0B,EAAG,CAAC,CACpB;EACL;;;uBApBWutB,eAAe,EAAAn1B,sDAAA,CAAAE,mEAAA;IAAA;EAAA;;;aAAfi1B,eAAe;MAAA71B,OAAA,EAAf61B,eAAe,CAAA51B,IAAA;MAAAI,UAAA,EAFd;IAAM;EAAA;;;;;;;;;;;;;;;;;;;;;ACGd,MAAOytB,SAAS;EAEpB3tB,YACUs2B,IAAiB,EACjBnD,MAAc;IADd,KAAAmD,IAAI,GAAJA,IAAI;IACJ,KAAAnD,MAAM,GAANA,MAAM;EACZ;EAEJtE,WAAWA,CACToE,KAA6B,EAC7B6K,KAA0B;IAC1B,MAAMjB,eAAe,GAAG,IAAI,CAACvG,IAAI,CAACuG,eAAe,EAAE;IACnD,IAAIA,eAAe,EAAE;MACnB,IAAI,CAAC1J,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;IAEd,OAAO,CAACgJ,eAAe;EACzB;;;uBAhBWlP,SAAS,EAAAptB,sDAAA,CAAAE,+DAAA,GAAAF,sDAAA,CAAAG,mDAAA;IAAA;EAAA;;;aAATitB,SAAS;MAAA9tB,OAAA,EAAT8tB,SAAS,CAAA7tB,IAAA;MAAAI,UAAA,EAFR;IAAM;EAAA;;;;;;;;;;;;;;;;;;;ACE0B;;;;AAIxC,MAAOswB,gBAAgB;EAE3BxwB,YACUs2B,IAAiB,EACjBnD,MAAc;IADd,KAAAmD,IAAI,GAAJA,IAAI;IACJ,KAAAnD,MAAM,GAANA,MAAM;EACZ;EAEJ6K,SAASA,CAAC52B,OAAyB,EAAE6tB,IAAiB;IACpD,OAAOA,IAAI,CAACgJ,MAAM,CAAC72B,OAAO,CAAC,CAACC,IAAI,CAAC02B,gDAAU,CAACtE,CAAC,IAAG;MAC9C,IAAIA,CAAC,CAACyE,MAAM,KAAK,GAAG,EAAE;QACpB,MAAMC,YAAY,GAAG;UAAElH,SAAS,EAAE,IAAI,CAAC9D,MAAM,CAAC7tB;QAAG,CAAE;QACnD,IAAI,CAACgxB,IAAI,CAACuB,MAAM,EAAE,CAAC7C,SAAS,CAC1B,MAAM,IAAI,CAAC7B,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAAEqD,WAAW,EAAEiH;QAAY,CAAE,CAAC,CACtE;OACF,MACI,IAAI1E,CAAC,CAACyE,MAAM,KAAK,GAAG,EAAE;QACzB,MAAMC,YAAY,GAAG;UAAElH,SAAS,EAAE,IAAI,CAAC9D,MAAM,CAAC7tB;QAAG,CAAE;QACnD,IAAI,CAACgxB,IAAI,CAACuB,MAAM,EAAE,CAAC7C,SAAS,CAC1B,MAAM,IAAI,CAAC7B,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;UAAEqD,WAAW,EAAEiH;QAAY,CAAE,CAAC,CACtE;OACF,MACI;MAEL,MAAM1E,CAAC;IACT,CAAC,CAAC,CAAC;EACL;;;uBAzBWjJ,gBAAgB,EAAAjwB,sDAAA,CAAAE,oEAAA,GAAAF,sDAAA,CAAAG,mDAAA;IAAA;EAAA;;;aAAhB8vB,gBAAgB;MAAA3wB,OAAA,EAAhB2wB,gBAAgB,CAAA1wB;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;ACViB;AACQ;;;AAIhD,MAAOoxB,kBAAkB;EAC7BlxB,YAAoBq+B,cAA6B;IAA7B,KAAAA,cAAc,GAAdA,cAAc;EAAkB;EAEpDL,SAASA,CAACM,GAAqB,EAAErJ,IAAiB;IAChD,IAAI,CAACoJ,cAAc,CAACE,IAAI,EAAE;IAC1B,OAAOtJ,IAAI,CAACgJ,MAAM,CAACK,GAAG,CAAC,CAACj3B,IAAI,CAC1B2qB,wDAAQ,CAAC,MAAM,IAAI,CAACqM,cAAc,CAACG,IAAI,EAAE,CAAC,EAC1CT,0DAAU,CAACnJ,GAAG,IAAG;MACf,IAAI,CAACyJ,cAAc,CAACG,IAAI,EAAE;MAC1B,OAAOJ,gDAAU,CAAC,MAAMxJ,GAAG,CAAC;IAC9B,CAAC,CAAC,CACH;EACH;;;uBAZW1D,kBAAkB,EAAA3wB,sDAAA,CAAAE,iEAAA;IAAA;EAAA;;;aAAlBywB,kBAAkB;MAAArxB,OAAA,EAAlBqxB,kBAAkB,CAAApxB;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;ICE3BS,4DAAA,aAA6C;IAC3CA,uDAAA,aAA2B;IAI7BA,0DAAA,EAAM;;;AATV;AAaM,MAAO0wB,eAAe;EAK1BjxB,YACSq+B,cAA6B;IAA7B,KAAAA,cAAc,GAAdA,cAAc;IALvB,KAAAI,SAAS,GAAG,KAAK;IACjB,KAAAC,SAAS,GAAG,EAAE;EAKX;EAEHlP,QAAQA,CAAA;IACNsH,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtD,IAAI,CAAC4H,YAAY,GAAG,IAAI,CAACN,cAAc,CAACO,UAAU,CAAC5J,SAAS,CAAC1B,OAAO,IAAG;MACrEwD,OAAO,CAACC,GAAG,CAAC,4CAA4CzD,OAAO,EAAE,CAAC;MAClE,IAAI,CAACmL,SAAS,GAAGnL,OAAO;MACxB,IAAI,CAACoL,SAAS,GAAG,WAAWpL,OAAO,EAAE;IACvC,CAAC,CAAC;EACJ;EAEAS,WAAWA,CAAA;IACT,IAAI,CAAC4K,YAAY,EAAEE,WAAW,EAAE;EAClC;;;uBApBW5N,eAAe,EAAA1wB,+DAAA,CAAAE,0DAAA;IAAA;EAAA;;;YAAfwwB,eAAe;MAAAtB,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAAgP,yBAAA9O,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UATxBzvB,wDAAA,IAAAw+B,8BAAA,iBAKM;;;UALAx+B,wDAAA,SAAA0vB,GAAA,CAAAwO,SAAA,CAAe;;;;;;;;;;;;;;;;;;;;;;;ACRc;;AAGjC,MAAO/O,aAAa;EAD1B1vB,YAAA;IAEU,KAAAi/B,cAAc,GAAG,CAAC;IAClB,KAAAC,gBAAgB,GAAG,IAAIF,iDAAe,CAAU,KAAK,CAAC;IACvD,KAAAJ,UAAU,GAAG,IAAI,CAACM,gBAAgB,CAACC,YAAY,EAAE;;EAExDZ,IAAIA,CAAA;IACF,IAAI,CAACU,cAAc,EAAE;IACrB,IAAI,IAAI,CAACA,cAAc,KAAK,CAAC,EAAE;MAC7B,IAAI,CAACC,gBAAgB,CAACjK,IAAI,CAAC,IAAI,CAAC;;EAEpC;EAEAuJ,IAAIA,CAAA;IACF,IAAI,IAAI,CAACS,cAAc,GAAG,CAAC,EAAE,IAAI,CAACA,cAAc,EAAE;IAClD,IAAI,IAAI,CAACA,cAAc,KAAK,CAAC,EAAE;MAC7BG,UAAU,CAAC,MAAK;QACd,IAAI,IAAI,CAACH,cAAc,KAAK,CAAC,EAAE;UAC7B,IAAI,CAACC,gBAAgB,CAACjK,IAAI,CAAC,KAAK,CAAC;;MAErC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;EAEb;;;;uBArBWvF,aAAa;IAAA;EAAA;;;aAAbA,aAAa;MAAA7vB,OAAA,EAAb6vB,aAAa,CAAA5vB,IAAA;MAAAI,UAAA,EADA;IAAM;EAAA;;;;;;;;;;;;;;;;;;ACF+C;;;;;;ICGzEK,4DAAA,aAA4C;IAAAA,oDAAA,0GAAmB;IAAAA,4DAAA,eAAkB;IAAAA,oDAAA,aAAC;IAAAA,0DAAA,EAAO;;;;;IACzFA,4DAAA,aAA2C;IAAAA,oDAAA,GAAU;IAAAA,0DAAA,EAAM;;;;IAAhBA,uDAAA,GAAU;IAAVA,+DAAA,CAAAi4B,MAAA,CAAA92B,IAAA,CAAU;;;;;;IAHvDnB,4DAAA,WAAqD;IAAlDA,wDAAA,mBAAAg/B,sDAAA;MAAAh/B,2DAAA,CAAAi/B,GAAA;MAAA,MAAAC,MAAA,GAAAl/B,2DAAA;MAAA,OAASA,yDAAA,CAAAk/B,MAAA,CAAAC,MAAA,EAAQ;IAAA,EAAC;IACnBn/B,oDAAA,GACA;IAAAA,wDAAA,IAAAo/B,wCAAA,iBAAgG;IAChGp/B,wDAAA,IAAAq/B,wCAAA,iBAA2D;IAC7Dr/B,0DAAA,EAAI;;;;IAHFA,uDAAA,GACA;IADAA,gEAAA,MAAAgyB,MAAA,CAAAzD,KAAA,MACA;IAAyBvuB,uDAAA,GAAiB;IAAjBA,wDAAA,UAAAgyB,MAAA,CAAAsN,UAAA,CAAiB;IACjBt/B,uDAAA,GAAgB;IAAhBA,wDAAA,SAAAgyB,MAAA,CAAAsN,UAAA,CAAgB;;;;;IAKzCt/B,4DAAA,aAA4C;IAAAA,oDAAA,0GAAmB;IAAAA,4DAAA,eAAkB;IAAAA,oDAAA,aAAC;IAAAA,0DAAA,EAAO;;;;;;IAF3FA,4DAAA,YAA0E;IAAvEA,wDAAA,mBAAAu/B,sDAAA;MAAAv/B,2DAAA,CAAAw/B,IAAA;MAAA,MAAAhH,MAAA,GAAAx4B,2DAAA;MAAA,OAASA,yDAAA,CAAAw4B,MAAA,CAAA2G,MAAA,EAAQ;IAAA,EAAC;IACnBn/B,oDAAA,GACA;IAAAA,wDAAA,IAAAy/B,wCAAA,iBAAgG;IAClGz/B,0DAAA,EAAI;;;;IAFFA,uDAAA,GACA;IADAA,gEAAA,MAAAy4B,MAAA,CAAAlK,KAAA,MACA;IAAyBvuB,uDAAA,GAAiB;IAAjBA,wDAAA,UAAAy4B,MAAA,CAAA6G,UAAA,CAAiB;;;;;IAG5Ct/B,4DAAA,cAA+F;IAC7FA,oDAAA,GACA;IAAAA,4DAAA,aAAwB;IAAAA,oDAAA,GAAkC;IAAAA,0DAAA,EAAM;;;;IADhEA,uDAAA,GACA;IADAA,gEAAA,iDAAAsyB,MAAA,CAAAzrB,OAAA,kBAAAyrB,MAAA,CAAAzrB,OAAA,CAAAe,EAAA,MACA;IAAwB5H,uDAAA,GAAkC;IAAlCA,gEAAA,KAAAsyB,MAAA,CAAAzrB,OAAA,kBAAAyrB,MAAA,CAAAzrB,OAAA,CAAA64B,oBAAA,MAAkC;;;;;;IAU1D1/B,4DAAA,eAA2D;IAAnBA,wDAAA,mBAAA2/B,kEAAA;MAAA3/B,2DAAA,CAAA4/B,IAAA;MAAA,MAAAC,OAAA,GAAA7/B,2DAAA;MAAA,OAASA,yDAAA,CAAA6/B,OAAA,CAAAC,MAAA,EAAQ;IAAA,EAAC;IAAC9/B,4DAAA,WAAM;IAAAA,oDAAA,6DAAS;IAAAA,0DAAA,EAAO;;;;;;IAEjFA,4DAAA,eAA0E;IAAnBA,wDAAA,mBAAA+/B,kEAAA;MAAA//B,2DAAA,CAAAggC,IAAA;MAAA,MAAAC,OAAA,GAAAjgC,2DAAA;MAAA,OAASA,yDAAA,CAAAigC,OAAA,CAAAC,MAAA,EAAQ;IAAA,EAAC;IAAClgC,4DAAA,WAAM;IAAAA,oDAAA,6DAAS;IAAAA,0DAAA,EAAO;;;;;;IAChGA,4DAAA,eAAgE;IAArBA,wDAAA,mBAAAmgC,kEAAA;MAAAngC,2DAAA,CAAAogC,IAAA;MAAA,MAAAC,OAAA,GAAArgC,2DAAA;MAAA,OAASA,yDAAA,CAAAqgC,OAAA,CAAAC,QAAA,EAAU;IAAA,EAAC;IAACtgC,4DAAA,WAAM;IAAAA,oDAAA,iDAAO;IAAAA,0DAAA,EAAO;;;;;;IAJtFA,4DAAA,cAAiC;IAC/BA,wDAAA,IAAAugC,2CAAA,mBAAwF;IACxFvgC,4DAAA,eAA4C;IAAnBA,wDAAA,mBAAAwgC,2DAAA;MAAAxgC,2DAAA,CAAAygC,IAAA;MAAA,MAAAC,OAAA,GAAA1gC,2DAAA;MAAA,OAASA,yDAAA,CAAA0gC,OAAA,CAAAZ,MAAA,EAAQ;IAAA,EAAC;IAAC9/B,4DAAA,WAAM;IAAAA,oDAAA,6DAAS;IAAAA,0DAAA,EAAO;IAClEA,wDAAA,IAAA2gC,2CAAA,mBAAuG;IACvG3gC,wDAAA,IAAA4gC,2CAAA,mBAA2F;IAC3F5gC,4DAAA,eAA8C;IAAnBA,wDAAA,mBAAA6gC,2DAAA;MAAA7gC,2DAAA,CAAAygC,IAAA;MAAA,MAAAK,OAAA,GAAA9gC,2DAAA;MAAA,OAASA,yDAAA,CAAA8gC,OAAA,CAAA3B,MAAA,EAAQ;IAAA,EAAC;IAACn/B,4DAAA,WAAM;IAAAA,oDAAA,2CAAM;IAAAA,0DAAA,EAAO;;;;IAJ1DA,uDAAA,GAAY;IAAZA,wDAAA,SAAA+gC,MAAA,CAAAC,MAAA,CAAY;IAEOhhC,uDAAA,GAA2B;IAA3BA,wDAAA,SAAA+gC,MAAA,CAAAzB,UAAA,IAAAyB,MAAA,CAAAE,OAAA,CAA2B;IAC5BjhC,uDAAA,GAAgB;IAAhBA,wDAAA,SAAA+gC,MAAA,CAAAzB,UAAA,CAAgB;;;;;ADnBzC,MAAO4B,qBAAqB;EAehCzhC,YACU0hC,QAAkB,EAClBC,wBAAkD;IADlD,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAC,wBAAwB,GAAxBA,wBAAwB;IAfzB,KAAA7S,KAAK,GAAW,EAAE;IAClB,KAAA+Q,UAAU,GAAG,KAAK;IAEjB,KAAAhE,IAAI,GAAG,IAAIwD,uDAAY,EAAQ;IAC/B,KAAAuC,MAAM,GAAG,IAAIvC,uDAAY,EAAQ;IACjC,KAAAwC,IAAI,GAAG,IAAIxC,uDAAY,EAAQ;IAChC,KAAAmC,OAAO,GAAG,KAAK;IACf,KAAAM,OAAO,GAAY,KAAK;IACxB,KAAA16B,OAAO,GAAM,EAAE;IACd,KAAA26B,IAAI,GAAG,IAAI1C,uDAAY,EAAQ;IAChC,KAAAkC,MAAM,GAAG,KAAK;IACd,KAAAS,QAAQ,GAAU,EAAE;EAKzB;EAEJxS,QAAQA,CAAA,GACR;EAEA6Q,MAAMA,CAAA;IACJ,IAAI,CAACxE,IAAI,CAACoG,IAAI,EAAE;EAClB;EAEApB,QAAQA,CAAA;IACN,IAAI,CAACe,MAAM,CAACK,IAAI,EAAE;EACpB;EAEAvC,MAAMA,CAAA;IACJ;IACA,IAAI,CAACiC,wBAAwB,CAACO,IAAI,CAAC,IAAI,CAACF,QAAQ,CAAC;EACnD;EAEAvB,MAAMA,CAAA;IACJ,IAAI,CAACoB,IAAI,CAACI,IAAI,EAAE;EAClB;EAEAE,MAAMA,CAAA;IACJ,IAAI,CAACJ,IAAI,CAACE,IAAI,EAAE;EAClB;;;uBA1CWR,qBAAqB,EAAAlhC,+DAAA,CAAAE,qDAAA,GAAAF,+DAAA,CAAAG,uGAAA;IAAA;EAAA;;;YAArB+gC,qBAAqB;MAAA9R,SAAA;MAAA2S,MAAA;QAAAxT,KAAA;QAAA+Q,UAAA;QAAAn+B,IAAA;QAAA8/B,OAAA;QAAAM,OAAA;QAAA16B,OAAA;QAAAm6B,MAAA;QAAAS,QAAA;MAAA;MAAAO,OAAA;QAAA1G,IAAA;QAAA+F,MAAA;QAAAC,IAAA;QAAAE,IAAA;MAAA;MAAAS,kBAAA,EAAA7K,GAAA;MAAA/H,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAA2S,+BAAAzS,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;UCTlCzvB,4DAAA,aAAuB;UAEnBA,wDAAA,IAAAmiC,kCAAA,eAII;UAEJniC,wDAAA,IAAAoiC,kCAAA,eAGI;UAEJpiC,wDAAA,IAAAqiC,oCAAA,iBAGM;UAENriC,uDAAA,aAA2D;UAI3DA,0DAAA,GAAyC;UAEzCA,wDAAA,IAAAuiC,oCAAA,kBAMM;UACRviC,0DAAA,EAAM;;;UA7BiCA,uDAAA,GAAc;UAAdA,wDAAA,UAAA0vB,GAAA,CAAA6R,OAAA,CAAc;UAMdvhC,uDAAA,GAAa;UAAbA,wDAAA,SAAA0vB,GAAA,CAAA6R,OAAA,CAAa;UAK9BvhC,uDAAA,GAAa;UAAbA,wDAAA,SAAA0vB,GAAA,CAAA6R,OAAA,CAAa;UAWhBvhC,uDAAA,GAAc;UAAdA,wDAAA,UAAA0vB,GAAA,CAAA6R,OAAA,CAAc;;;;;;;;;;;;;;;;;;;;;;;;;;ACxByF;;;;;;;;ICKlHvhC,4DAAA,qBAAyD;IAAAA,oDAAA,GAAyB;IAAAA,0DAAA,EAAa;;;;IAAtDA,wDAAA,UAAAwiC,SAAA,CAAe;IAACxiC,uDAAA,GAAyB;IAAzBA,gEAAA,+EAAAwiC,SAAA,KAAyB;;;;;;IAOpFxiC,4DAAA,YAAyG;IAArDA,wDAAA,mBAAAyiC,kEAAA;MAAAziC,2DAAA,CAAA0iC,IAAA;MAAA,MAAAC,OAAA,GAAA3iC,2DAAA;MAAA,OAASA,yDAAA,CAAA2iC,OAAA,CAAAC,QAAA,CAAAD,OAAA,CAAAE,QAAA,CAAkB;IAAA,EAAC;IAAyB7iC,0DAAA,EAAI;;;;;;IAC7GA,4DAAA,YAA4F;IAA9CA,wDAAA,mBAAA8iC,kEAAA;MAAA9iC,2DAAA,CAAA+iC,IAAA;MAAA,MAAAC,OAAA,GAAAhjC,2DAAA;MAAA,OAASA,yDAAA,CAAAgjC,OAAA,CAAAJ,QAAA,CAAS,CAAC,CAAC;IAAA,EAAC;IAAyB5iC,oDAAA,QAAC;IAAAA,0DAAA,EAAI;;;;;IACjGA,4DAAA,eAA0C;IAAAA,oDAAA,YAAK;IAAAA,0DAAA,EAAO;;;;;;IACtDA,4DAAA,YAAyE;IAAzDA,wDAAA,mBAAAijC,mEAAA;MAAAjjC,2DAAA,CAAAkjC,IAAA;MAAA,MAAAC,OAAA,GAAAnjC,2DAAA;MAAA,OAASA,yDAAA,CAAAmjC,OAAA,CAAAP,QAAA,CAAAO,OAAA,CAAAC,YAAA,CAAsB;IAAA,EAAC;IAAyBpjC,oDAAA,GAA4B;IAAAA,0DAAA,EAAI;;;;IAAhCA,uDAAA,GAA4B;IAA5BA,+DAAA,CAAAi4B,MAAA,CAAAoL,QAAA,CAAApL,MAAA,CAAAmL,YAAA,EAA4B;;;;;;IACrGpjC,4DAAA,YAAqE;IAArDA,wDAAA,mBAAAsjC,mEAAA;MAAAtjC,2DAAA,CAAAujC,IAAA;MAAA,MAAAC,OAAA,GAAAxjC,2DAAA;MAAA,OAASA,yDAAA,CAAAwjC,OAAA,CAAAZ,QAAA,CAAAY,OAAA,CAAAX,QAAA,CAAkB;IAAA,EAAC;IAAyB7iC,oDAAA,GAAwB;IAAAA,0DAAA,EAAI;;;;IAA5BA,uDAAA,GAAwB;IAAxBA,+DAAA,CAAAk/B,MAAA,CAAAmE,QAAA,CAAAnE,MAAA,CAAA2D,QAAA,EAAwB;;;;;;IAE7F7iC,4DAAA,YAA4E;IAA5DA,wDAAA,mBAAAyjC,mEAAA;MAAAzjC,2DAAA,CAAA0jC,IAAA;MAAA,MAAAC,OAAA,GAAA3jC,2DAAA;MAAA,OAASA,yDAAA,CAAA2jC,OAAA,CAAAf,QAAA,CAAAe,OAAA,CAAAC,QAAA,CAAkB;IAAA,EAAC;IAAgC5jC,oDAAA,GAAwB;IAAAA,0DAAA,EAAI;;;;IAA5BA,uDAAA,GAAwB;IAAxBA,+DAAA,CAAAo4B,MAAA,CAAAiL,QAAA,CAAAjL,MAAA,CAAAwL,QAAA,EAAwB;;;;;;IACpG5jC,4DAAA,YAAoF;IAApEA,wDAAA,mBAAA6jC,mEAAA;MAAA7jC,2DAAA,CAAA8jC,IAAA;MAAA,MAAAC,OAAA,GAAA/jC,2DAAA;MAAA,OAASA,yDAAA,CAAA+jC,OAAA,CAAAnB,QAAA,CAAAmB,OAAA,CAAAC,YAAA,CAAsB;IAAA,EAAC;IAAoChkC,oDAAA,GAA4B;IAAAA,0DAAA,EAAI;;;;IAAhCA,uDAAA,GAA4B;IAA5BA,+DAAA,CAAAs4B,MAAA,CAAA+K,QAAA,CAAA/K,MAAA,CAAA0L,YAAA,EAA4B;;;;;IAChHhkC,4DAAA,eAAiD;IAAAA,oDAAA,YAAK;IAAAA,0DAAA,EAAO;;;;;;IAC7DA,4DAAA,YAA2G;IAAhEA,wDAAA,mBAAAikC,mEAAA;MAAAjkC,2DAAA,CAAAkkC,IAAA;MAAA,MAAAC,OAAA,GAAAnkC,2DAAA;MAAA,OAASA,yDAAA,CAAAmkC,OAAA,CAAAvB,QAAA,CAAAuB,OAAA,CAAAC,QAAA,CAAkB;IAAA,EAAC;IAAoCpkC,oDAAA,GAAsB;IAAAA,0DAAA,EAAI;;;;IAA1BA,uDAAA,GAAsB;IAAtBA,+DAAA,CAAAqkC,OAAA,CAAAhB,QAAA,CAAAgB,OAAA,CAAAD,QAAA,EAAsB;;;;;;IACjIpkC,4DAAA,YAAkH;IAA5DA,wDAAA,mBAAAskC,mEAAA;MAAAtkC,2DAAA,CAAAukC,IAAA;MAAA,MAAAC,OAAA,GAAAxkC,2DAAA;MAAA,OAASA,yDAAA,CAAAwkC,OAAA,CAAA5B,QAAA,CAAA4B,OAAA,CAAAZ,QAAA,CAAkB;IAAA,EAAC;IAAgC5jC,0DAAA,EAAI;;;;;;IArB5HA,qEAAA,GAA+B;IAC7BA,4DAAA,aAAmB;IAEeA,wDAAA,2BAAA0kC,+EAAA/I,MAAA;MAAA37B,2DAAA,CAAA2kC,IAAA;MAAA,MAAAC,OAAA,GAAA5kC,2DAAA;MAAA,OAAiBA,yDAAA,CAAA4kC,OAAA,CAAAC,gBAAA,CAAAlJ,MAAA,CAAwB;IAAA,EAAC;IACtE37B,wDAAA,IAAA8kC,uDAAA,wBAA+F;IACjG9kC,0DAAA,EAAa;IAEfA,4DAAA,cAAmB;IAAAA,oDAAA,GAA2C;IAAAA,0DAAA,EAAO;IAEvEA,4DAAA,aAAmB;IAEfA,wDAAA,IAAA+kC,8CAAA,eAA6G;IAC7G/kC,wDAAA,IAAAglC,8CAAA,eAAiG;IACjGhlC,wDAAA,KAAAilC,kDAAA,mBAAsD;IACtDjlC,wDAAA,KAAAklC,+CAAA,gBAAyG;IACzGllC,wDAAA,KAAAmlC,+CAAA,gBAAiG;IACjGnlC,4DAAA,gBAAuB;IAAAA,oDAAA,IAA2B;IAAAA,0DAAA,EAAO;IACzDA,wDAAA,KAAAolC,+CAAA,gBAAwG;IACxGplC,wDAAA,KAAAqlC,+CAAA,gBAAoH;IACpHrlC,wDAAA,KAAAslC,kDAAA,mBAA6D;IAC7DtlC,wDAAA,KAAAulC,+CAAA,gBAAqI;IACrIvlC,wDAAA,KAAAwlC,+CAAA,gBAAsH;IACxHxlC,0DAAA,EAAM;IAEVA,mEAAA,EAAe;;;;IArBGA,uDAAA,GAAiB;IAAjBA,wDAAA,YAAAgyB,MAAA,CAAAzqB,KAAA,CAAiB;IACGvH,uDAAA,GAAS;IAATA,wDAAA,YAAAgyB,MAAA,CAAA0T,MAAA,CAAS;IAGxB1lC,uDAAA,GAA2C;IAA3CA,gEAAA,uDAAAgyB,MAAA,CAAA4T,KAAA,SAAA5T,MAAA,CAAA6T,IAAA,oBAAA7T,MAAA,CAAA8T,KAAA,KAA2C;IAIsB9lC,uDAAA,GAAqB;IAArBA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,KAAqB;IAClC/lC,uDAAA,GAAqB;IAArBA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,KAAqB;IACvE/lC,uDAAA,GAAqB;IAArBA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,KAAqB;IACU/lC,uDAAA,GAAqB;IAArBA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,KAAqB;IACzB/lC,uDAAA,GAAqB;IAArBA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,KAAqB;IAC5C/lC,uDAAA,GAA2B;IAA3BA,+DAAA,CAAAgyB,MAAA,CAAAqR,QAAA,CAAArR,MAAA,CAAA+T,WAAA,EAA2B;IACJ/lC,uDAAA,GAA4B;IAA5BA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,GAAA/T,MAAA,CAAAoS,QAAA,CAA4B;IACxBpkC,uDAAA,GAAgC;IAAhCA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,GAAA/T,MAAA,CAAAoS,QAAA,KAAgC;IAC/DpkC,uDAAA,GAA4B;IAA5BA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,GAAA/T,MAAA,CAAAoS,QAAA,CAA4B;IAC0BpkC,uDAAA,GAAgC;IAAhCA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,GAAA/T,MAAA,CAAAoS,QAAA,KAAgC;IACrBpkC,uDAAA,GAA4B;IAA5BA,wDAAA,SAAAgyB,MAAA,CAAA+T,WAAA,GAAA/T,MAAA,CAAAoS,QAAA,CAA4B;;;ADdlH,MAAO4B,kBAAkB;EAS7BvmC,YAAA;IARS,KAAAqmC,KAAK,GAAG,CAAC;IACT,KAAAv+B,KAAK,GAAG,CAAC;IACT,KAAAD,KAAK,GAAG,CAAC;IACT,KAAAo+B,MAAM,GAAa,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;IAE/B,KAAAO,WAAW,GAAG,IAAInH,uDAAY,EAAU;IACxC,KAAAoH,WAAW,GAAG,IAAIpH,uDAAY,EAAU;EAElC;EAEhB7P,QAAQA,CAAA,GACR;EAEAkX,WAAWA,CAACC,OAAsB,GAElC;EAEA,IAAIR,KAAKA,CAAA;IACP,OAAO,IAAI,CAACt+B,KAAK,GAAG,CAAC;EACvB;EAEA,IAAIu+B,IAAIA,CAAA;IACN,OAAOhS,IAAI,CAACwS,GAAG,CAAC,IAAI,CAAC/+B,KAAK,GAAG,IAAI,CAACC,KAAK,EAAE,IAAI,CAACu+B,KAAK,CAAC;EACtD;EAEA,IAAIC,WAAWA,CAAA;IACb,OAAOlS,IAAI,CAACyS,IAAI,CAAC,IAAI,CAACh/B,KAAK,GAAG,IAAI,CAACC,KAAK,CAAC;EAC3C;EAEA,IAAIs7B,QAAQA,CAAA;IACV,OAAO,IAAI,CAACkD,WAAW,GAAG,CAAC;EAC7B;EAEA,IAAInC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACmC,WAAW,GAAG,CAAC;EAC7B;EAEA,IAAI/B,YAAYA,CAAA;IACd,OAAO,IAAI,CAAC+B,WAAW,GAAG,CAAC;EAC7B;EAEA,IAAI3C,YAAYA,CAAA;IACd,OAAO,IAAI,CAAC2C,WAAW,GAAG,CAAC;EAC7B;EAEA,IAAI3B,QAAQA,CAAA;IACV,OAAOvQ,IAAI,CAACyS,IAAI,CAAC,IAAI,CAACR,KAAK,GAAG,IAAI,CAACv+B,KAAK,CAAC,GAAG,CAAC;EAC/C;EAEAq7B,QAAQA,CAAC2D,IAAY;IACnB,IAAI,CAACN,WAAW,CAACvE,IAAI,CAAC6E,IAAI,GAAG,IAAI,CAACh/B,KAAK,CAAC;EAC1C;EAEAs9B,gBAAgBA,CAACt9B,KAAsB;IACrC,IAAI,CAAC2+B,WAAW,CAACxE,IAAI,CAAC,CAACn6B,KAAK,CAAC;EAC/B;EAEA87B,QAAQA,CAACkD,IAAY;IACnB,OAAOA,IAAI,GAAG,CAAC;EACjB;;;uBA5DWP,kBAAkB;IAAA;EAAA;;;YAAlBA,kBAAkB;MAAA5W,SAAA;MAAA2S,MAAA;QAAA+D,KAAA;QAAAv+B,KAAA;QAAAD,KAAA;QAAAo+B,MAAA;MAAA;MAAA1D,OAAA;QAAAiE,WAAA;QAAAC,WAAA;MAAA;MAAAM,QAAA,GAAAxmC,kEAAA;MAAAqvB,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAAmX,4BAAAjX,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCR/BzvB,4DAAA,aAA2B;UACzBA,wDAAA,IAAA2mC,0CAAA,4BAwBe;UACjB3mC,0DAAA,EAAM;;;UAzBWA,uDAAA,GAAc;UAAdA,wDAAA,SAAA0vB,GAAA,CAAAoW,KAAA,MAAc;;;;;;;;;;;;;;;;;;;;;;;;;;ACA6B;;;;;;;ICE1D9lC,uDAAA,WAAqE;;;;IAA1BA,wDAAA,cAAA6mC,UAAA,EAAA7mC,4DAAA,CAAqB;;;ADQ5D,MAAO+mC,oBAAoB;EAI/BtnC,YACUunC,SAAuB,EACCpS,IAAqB;IAD7C,KAAAoS,SAAS,GAATA,SAAS;IACe,KAAApS,IAAI,GAAJA,IAAI;IAEpC,IAAI,CAACqS,eAAe,GAAGrS,IAAI,CAACsS,QAAQ,CAACrlC,GAAG,CAACslC,OAAO,IAAI,IAAI,CAACH,SAAS,CAACI,uBAAuB,CAAED,OAAO,CAAE,CAAC;EACxG;EAEAlY,QAAQA,CAAA,GACR;;;uBAZW8X,oBAAoB,EAAA/mC,+DAAA,CAAAE,mEAAA,GAAAF,+DAAA,CAMrB4mC,qEAAe;IAAA;EAAA;;;YANdG,oBAAoB;MAAA3X,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAA+X,8BAAA7X,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCXjCzvB,4DAAA,YAAqB;UAAAA,oDAAA,GAAgB;UAAAA,0DAAA,EAAK;UAC1CA,uDAAA,cAA4C;UAC5CA,4DAAA,aAAwB;UACtBA,wDAAA,IAAAunC,iCAAA,eAAqE;UACvEvnC,0DAAA,EAAM;UACNA,4DAAA,aAAwB;UAC+BA,oDAAA,iDAAO;UAAAA,0DAAA,EAAO;;;UANhDA,uDAAA,GAAgB;UAAhBA,+DAAA,CAAA0vB,GAAA,CAAAkF,IAAA,CAAArG,KAAA,CAAgB;UAGZvuB,uDAAA,GAAkB;UAAlBA,wDAAA,YAAA0vB,GAAA,CAAAuX,eAAA,CAAkB;;;;;;;;;;;;;;;;;;;;;;;;ACErC,MAAOO,qBAAqB;EAEhC/nC,YACUgoC,OAAmB;IAAnB,KAAAA,OAAO,GAAPA,OAAO;EACb;EAEJC,eAAeA,CAAA;IACb,IAAI,CAACD,OAAO,CAACE,aAAa,CAACC,KAAK,EAAE;EACpC;;;uBARWJ,qBAAqB,EAAAxnC,+DAAA,CAAAA,qDAAA;IAAA;EAAA;;;YAArBwnC,qBAAqB;MAAApY,SAAA;IAAA;EAAA;;;;;;;;;;;;;;;;;ACA5B,MAAO0Y,kBAAkB;EAG7BroC,YAAoBsoC,EAAc;IAAd,KAAAA,EAAE,GAAFA,EAAE;IACpB,IAAI,CAACnN,KAAK,GAAGmN,EAAE,CAACJ,aAAiC;EACnD;EAEQK,oBAAoBA,CAAA;IAC1B;IACA,OAAO,IAAI,CAACpN,KAAK,CAAC/5B,KAAK,CAAC+B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC5C;EAGAqlC,YAAYA,CAAC/O,CAAiB;IAC5B,MAAM0B,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMsN,iBAAiB,GAAG,IAAI,CAACF,oBAAoB,EAAE;IACrD,MAAMG,MAAM,GAAGjP,CAAC,CAACkP,aAAa,IAAKpM,MAAc,CAACoM,aAAa;IAC/D,IAAID,MAAM,EAAE;MACV,MAAME,UAAU,GAAGF,MAAM,CAACG,OAAO,CAAC,MAAM,CAAC;MACzC,IAAI,KAAK,CAACC,IAAI,CAACF,UAAU,CAAC,EAAE;QAC1B;QACA;QACAzN,KAAK,CAAC/5B,KAAK,GAAGqnC,iBAAiB;QAC/B;;;EAGN;EAGAM,YAAYA,CAACtP,CAAQ;IACnB,MAAM0B,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAIsN,iBAAiB,GAAG,IAAI,CAACF,oBAAoB,EAAE;IACnD,MAAMS,cAAc,GAAG7N,KAAK,CAAC6N,cAAc;IAC3C,IAAIC,mBAAmB,GAAG,EAAE;IAE5B,IAAI,CAACR,iBAAiB,EAAE;MACtBtN,KAAK,CAAC/5B,KAAK,GAAG,EAAE;MAChB;;IAGF,IAAI+5B,KAAK,CAAC/5B,KAAK,CAACi6B,MAAM,IAAI2N,cAAc,EAAE;MACxC;MACA,IAAKvP,CAAS,CAACtE,IAAI,IAAI,KAAK,CAAC2T,IAAI,CAAErP,CAAS,CAACtE,IAAI,CAAC,EAAE;QAClD;QACAgG,KAAK,CAAC/5B,KAAK,GAAGqnC,iBAAiB;;MAEjC;;IAGF,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACS,OAAO,CAACT,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;MACtD,IAAIA,iBAAiB,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;QAC/BA,iBAAiB,GAAG,GAAG,GAAGA,iBAAiB;;MAE7C,MAAMU,YAAY,GAAIV,iBAAiB,CAAC,CAAC,CAAC,IAAI,GAAG,GAAI,IAAI,GAAG,IAAI;MAChEQ,mBAAmB,GAAG9N,KAAK,CAAC/5B,KAAK,GAAG+nC,YAAY,GAAG,GAAG;MACtD,IAAIV,iBAAiB,CAACpN,MAAM,GAAG,CAAC,EAAE;QAChC4N,mBAAmB,IAAI,GAAG,GAAGR,iBAAiB,CAACnN,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;;MAEhE,IAAImN,iBAAiB,CAACpN,MAAM,IAAI,CAAC,EAAE;QACjC4N,mBAAmB,IAAI,IAAI,GAAGR,iBAAiB,CAACnN,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;;MAEjE,IAAImN,iBAAiB,CAACpN,MAAM,IAAI,CAAC,EAAE;QACjC4N,mBAAmB,IAAI,GAAG,GAAGR,iBAAiB,CAACnN,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;;MAEhE,IAAImN,iBAAiB,CAACpN,MAAM,IAAI,EAAE,EAAE;QAClC4N,mBAAmB,IAAI,GAAG,GAAGR,iBAAiB,CAACnN,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;;KAElE,MAAM;MACL2N,mBAAmB,GAAG,GAAG,GAAGR,iBAAiB,CAACnN,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;;IAEhEH,KAAK,CAAC/5B,KAAK,GAAG6nC,mBAAmB;EACnC;EAGAG,WAAWA,CAAC3P,CAAQ;IAClB,MAAM0B,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,MAAMsN,iBAAiB,GAAG,IAAI,CAACF,oBAAoB,EAAE;IAErD,IAAI,CAAC,GAAG,CAAC,CAACW,OAAO,CAACT,iBAAiB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;MAC5C,IAAIA,iBAAiB,CAACpN,MAAM,GAAG,EAAE,EAAE;QACjCF,KAAK,CAAC/5B,KAAK,GAAG,EAAE;;KAEnB,MAAM;MACL,IAAIqnC,iBAAiB,CAACpN,MAAM,GAAG,EAAE,EAAE;QACjCF,KAAK,CAAC/5B,KAAK,GAAG,EAAE;;;EAGtB;EAGAioC,cAAcA,CAAC5P,CAAgB;IAC7B,MAAM0B,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB;IACA,IAAImO,UAAU,GAAGnO,KAAK,CAAC/5B,KAAK,CAAC+B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC/C,IAAIs2B,CAAC,CAAC8P,OAAO,IAAI,CAAC,IAAID,UAAU,CAACjO,MAAM,IAAI,CAAC,EAAE;MAC5CF,KAAK,CAAC/5B,KAAK,GAAG,EAAE;;EAEpB;;;uBAjGWinC,kBAAkB,EAAA9nC,+DAAA,CAAAA,qDAAA;IAAA;EAAA;;;YAAlB8nC,kBAAkB;MAAA1Y,SAAA;MAAA6Z,YAAA,WAAAC,gCAAAzZ,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;mBAAlBC,GAAA,CAAAuY,YAAA,CAAAtM,MAAA,CAAoB;UAAA,qBAAAwN,4CAAAxN,MAAA;YAAA,OAApBjM,GAAA,CAAA8Y,YAAA,CAAA7M,MAAA,CAAoB;UAAA,oBAAAyN,2CAAAzN,MAAA;YAAA,OAApBjM,GAAA,CAAAmZ,WAAA,CAAAlN,MAAA,CAAmB;UAAA,uBAAA0N,8CAAA1N,MAAA;YAAA,OAAnBjM,GAAA,CAAAoZ,cAAA,CAAAnN,MAAA,CACZ;UAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL8C;AACA;AACmB;AAElE;AAC2D;AACO;AACP;AACK;AACO;AACd;AACM;AACJ;AACQ;AACV;AACe;AACjB;AACA;AACuB;AACrB;AAEzD;AACwD,CAAC;AACN;AAEnD;AAMgC;AACoC;AAEpE;AACwF;AACR;AACW;AACd;AACN;AAElB;;AA6E/C,MAAOvK,cAAc;;;uBAAdA,cAAc;IAAA;EAAA;;;YAAdA;IAAc;EAAA;;;iBAvCd,CACT;QACEL,OAAO,EAAEuZ,+DAAW;QACpBtZ,QAAQ,EAAEzyB,4EAAiB;QAC3BmsC,IAAI,EAAE,CAACH,mEAAe;OACvB,CACF;MAAA3b,OAAA,GAjCCyC,yDAAY,EACZ/D,yDAAY,EACZgE,wDAAW,EACXC,gEAAmB;MAEnB;MACA+X,sEAAe,EACfC,6EAAkB,EAClBC,sEAAe,EACfC,2EAAiB,EACjBC,kFAAqB,EACrBC,oEAAc,EACdC,0EAAiB,EACjBC,sEAAe,EACfrZ,8EAAmB,EACnBga,uEAAmB,EACnBV,oEAAc,EACdC,mFAAqB,EACrBC,kEAAa,EACbC,kEAAa,EACbC,yFAAwB,EACxBC,oEAAc,EACdC,mEAAc,EACdC,gEAAa,EAEbI,kEAAa;MAUb;MACAnB,sEAAe,EACfC,6EAAkB,EAClBC,sEAAe,EACfC,2EAAiB,EACjBC,kFAAqB,EACrBC,oEAAc,EACdC,0EAAiB,EACjBC,sEAAe,EACfrZ,8EAAmB,EACnBga,uEAAmB,EACnBV,oEAAc,EACdC,mFAAqB,EACrBC,kEAAa,EACbC,kEAAa,EACbC,yFAAwB,EACxBC,oEAAc,EAEdC,mEAAc,EACdC,gEAAa,EASbI,kEAAa;IAAA;EAAA;;;sHAGJrZ,cAAc;IAAAD,YAAA,GAzEvB4V,iGAAoB,EACpBf,yFAAkB,EAClB9E,oGAAqB,EACrBsG,sFAAqB,EACrBM,gFAAkB;IAAAlZ,OAAA,GAGlByC,yDAAY,EACZ/D,yDAAY,EACZgE,wDAAW,EACXC,gEAAmB;IAEnB;IACA+X,sEAAe,EACfC,6EAAkB,EAClBC,sEAAe,EACfC,2EAAiB,EACjBC,kFAAqB,EACrBC,oEAAc,EACdC,0EAAiB,EACjBC,sEAAe,EACfrZ,8EAAmB,EACnBga,uEAAmB,EACnBV,oEAAc,EACdC,mFAAqB,EACrBC,kEAAa,EACbC,kEAAa,EACbC,yFAAwB,EACxBC,oEAAc,EACdC,mEAAc,EACdC,gEAAa,EAEbI,kEAAa;IAAA5b,OAAA;IAUb;IACAya,sEAAe,EACfC,6EAAkB,EAClBC,sEAAe,EACfC,2EAAiB,EACjBC,kFAAqB,EACrBC,oEAAc,EACdC,0EAAiB,EACjBC,sEAAe,EACfrZ,8EAAmB,EACnBga,uEAAmB,EACnBV,oEAAc,EACdC,mFAAqB,EACrBC,kEAAa,EACbC,kEAAa,EACbC,yFAAwB,EACxBC,oEAAc,EAEdC,mEAAc,EACdC,gEAAa;IAEb;IACAtD,iGAAoB,EACpBf,yFAAkB,EAClB9E,oGAAqB,EACrBsG,sFAAqB,EACrBM,gFAAkB,EAElB2C,kEAAa;EAAA;AAAA;;;;;;;;;;;;;;;;;ACjHsE;;;AAKjF,MAAOxV,YAAY;EAEvBx1B,YACSu2B,MAAiB;IAAjB,KAAAA,MAAM,GAANA,MAAM;EACX;EAEJ/B,KAAKA,CAAE0W,GAAQ;IACb,MAAM/V,IAAI,GAAoB;MAC5BrG,KAAK,EAAIoc,GAAG,CAACpc,KAAK,GAAGoc,GAAG,CAACpc,KAAK,GAAG,mBAAqB;MACtD2Y,QAAQ,EAAItlC,KAAK,CAACgpC,OAAO,CAAED,GAAG,CAACxD,OAAO,CAAE,GAAGwD,GAAG,CAACxD,OAAO,GAAG,CAAEwD,GAAG,CAACrW,KAAK,CAAC6S,OAAO;KAC7E;IACD,IAAI,CAACnR,MAAM,CAACmD,IAAI,CAAC4N,iGAAoB,EAAE;MAACnS;IAAI,CAAC,CAAC;EAChD;EAEAN,KAAKA,CAAEqW,GAAQ;IACb,IAAItP,MAAM;IACV,IAAIsP,GAAG,CAACrW,KAAK,CAACuW,yBAAyB,EAAE;MACvCxP,MAAM,GAAG;QACP9M,KAAK,EACHoc,GAAG,CAACrW,KAAK,CAAC+E,aAAa,GAAGsR,GAAG,CAACrW,KAAK,CAAC+E,aAAa,GAC7CsR,GAAG,CAACpc,KAAK,GAAGoc,GAAG,CAACpc,KAAK,GACrB,mBACL;QACD2Y,QAAQ,EAAKtlC,KAAK,CAACgpC,OAAO,CAAED,GAAG,CAACrW,KAAK,CAACuW,yBAAyB,CAAE,GAAGF,GAAG,CAACrW,KAAK,CAACuW,yBAAyB,GAAG,CAAEF,GAAG,CAACrW,KAAK,CAACuW,yBAAyB;OAChJ;KACF,MAAI;MACHxP,MAAM,GAAG;QACP9M,KAAK,EAAIoc,GAAG,CAACpc,KAAK,GAAGoc,GAAG,CAACpc,KAAK,GAAG,mBAAqB;QACtD2Y,QAAQ,EAAKtlC,KAAK,CAACgpC,OAAO,CAAED,GAAG,CAACrW,KAAK,CAAC+E,aAAa,CAAE,GAAGsR,GAAG,CAACrW,KAAK,CAAC+E,aAAa,GAAG,CAAEsR,GAAG,CAACrW,KAAK,CAAC+E,aAAa;OAC5G;;IAGH,MAAMzE,IAAI,GAAoByG,MAAM;IACpC,IAAI,CAACrF,MAAM,CAACmD,IAAI,CAAC4N,iGAAoB,EAAE;MAACnS;IAAI,CAAC,CAAC;EAChD;EAEAkW,IAAIA,CAAEC,GAAQ;IACZ,IAAIJ,GAAG,GAAG;MACN,SAAS,EAAEI;KACd;IACD,IAAI,CAAC9W,KAAK,CAAC0W,GAAG,CAAC;EACjB;;;uBAzCW1V,YAAY,EAAAj1B,sDAAA,CAAAE,+DAAA;IAAA;EAAA;;;aAAZ+0B,YAAY;MAAA31B,OAAA,EAAZ21B,YAAY,CAAA11B,IAAA;MAAAI,UAAA,EAFX;IAAM;EAAA;;;;;;;;;;;;;;;;;;ACJiD;;;AAG/D,MAAO2wB,gBAAiB,SAAQC,0DAAa;EAEjD9wB,YAA6B8uB,KAAY;IACvC,KAAK,EAAE;IADoB,KAAAA,KAAK,GAALA,KAAK;EAElC;EAESyc,WAAWA,CAACC,WAAgC;IACnD,MAAM1c,KAAK,GAAG,IAAI,CAAC2c,UAAU,CAACD,WAAW,CAAC;IAC1C,IAAI1c,KAAK,KAAK/sB,SAAS,EAAE;MACvB,IAAI,CAAC+sB,KAAK,CAAC4c,QAAQ,CAAC,GAAG5c,KAAK,cAAc,CAAC;;EAE/C;;;uBAXW+B,gBAAgB,EAAAtwB,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAhBowB,gBAAgB;MAAAhxB,OAAA,EAAhBgxB,gBAAgB,CAAA/wB;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACHqC;AAOX;;;;;;;;;;ICoB3CS,4DAAA,cAAuD;IAE3BA,oDAAA,iFAAc;IAAAA,0DAAA,EAAM;IAC5CA,4DAAA,cAAwB;IAAAA,uDAAA,gBAA+E;IAAAA,0DAAA,EAAM;;;ADdvH,MAAO2tB,yBAAyB;EAUpCluB,YACUkzB,EAAe,EACfC,MAAc,EACfC,KAAmB,EACnBmD,MAAiB,EAChBqV,WAAwB,EACxB3Y,KAAqB;IALrB,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,MAAM,GAANA,MAAM;IACP,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAmD,MAAM,GAANA,MAAM;IACL,KAAAqV,WAAW,GAAXA,WAAW;IACX,KAAA3Y,KAAK,GAALA,KAAK;IAbf,KAAAK,OAAO,GAAG,KAAK;IAGP,KAAAgG,SAAS,GAAG,IAAIvB,yCAAO,EAAE;IACjC,KAAA8T,cAAc,GAAU,KAAK;IAC7B,KAAAhM,UAAU,GAAC,IAAI;IAUb,IAAI,CAACxF,YAAY,GAAG,IAAI,CAACnH,EAAE,CAACO,KAAK,CAAC;MAChCjU,GAAG,EAAE,GAAE,EAAE,CAAC;MACVkX,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MACfoV,YAAY,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;MACtBnV,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC5E,sDAAU,CAAC4B,QAAQ,CAAC,CAAE;MACtCgH,gBAAgB,EAAE,CAAC,EAAE,EAAE,CAAC5I,sDAAU,CAAC4B,QAAQ,CAAC;KAC7C,CAAC;EACJ;EAEAnE,QAAQA,CAAA;IACN,MAAMuc,QAAQ,GAAG,IAAI,CAAC9Y,KAAK,CAACW,QAAQ,CAACtuB,GAAG,CAAClD,GAAG,CAAC4pC,CAAC,IAAIA,CAAC,CAAChpC,IAAI,CAAC;IACzD,IAAI,CAACwc,GAAG,GAACusB,QAAQ,CAAC,CAAC,CAAC;IACpB,IAAI,CAAC1R,YAAY,CAACV,UAAU,CAAC;MAC3Bna,GAAG,EAAE,IAAI,CAACA;KACX,CAAC;IACF,IAAI,CAACqgB,UAAU,GAAGkM,QAAQ,CAAC,CAAC,CAAC,KAAG,mBAAmB,GAAG,KAAK,GAAG,IAAI;IAClE,IAAG,IAAI,CAAClM,UAAU,EAAC;MACjB,IAAI,CAACoM,WAAW,EAAE;;EAEtB;EACAlY,WAAWA,CAAA;IACT,IAAI,CAACuF,SAAS,CAACrE,IAAI,CAAC,IAAI,CAAC;IACzB,IAAI,CAACqE,SAAS,CAAC4S,QAAQ,EAAE;EAC3B;EAEAvQ,UAAUA,CAAA;IACR7E,OAAO,CAACC,GAAG,CAAC,IAAI,CAACsD,YAAY,CAAC;IAC9BvD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACsD,YAAY,CAAC1F,KAAK,CAAC;IAEpC,IAAIiF,aAAa,GAAa,EAAE;IAEhC;IACA;IACA;IAEA;IACA;IACA;IAEA,IAAIA,aAAa,CAACyB,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAIzG,GAAG,GAAG;QACR,OAAO,EAAE;UACP,eAAe,EAAEgF;;OAEpB;MACD,IAAI,CAACxG,KAAK,CAACyB,KAAK,CAACD,GAAG,CAAC;MACrB;;IAGF,IAAI,CAACtB,OAAO,GAAG,IAAI;IAEnB,IAAI,CAAC6Y,YAAY,EAAE;IAEnB;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EAEArQ,cAAcA,CAAEtc,GAAU;IACxB,IAAI,CAAC2T,MAAM,CAACU,QAAQ,CAAC,CAAC,WAAW,GAACrU,GAAG,CAAC,CAAC;EACzC;EAEAysB,WAAWA,CAAA;IACT,IAAI,CAACL,WAAW,CAAC1f,cAAc,CAAC;MAAC/nB,IAAI,EAAC;QAACqb,GAAG,EAAC,IAAI,CAACA;MAAG;IAAC,CAAC,CAAC,CACnDnY,IAAI,CACH4qB,yCAAG,CAAEkD,IAAI,IAAI,IAAI,CAAC0W,cAAc,GAAC1W,IAAI,CAACiX,gBAAgB,CAAC,EACvDpU,+CAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAAC,CAC3BtE,SAAS,CAAC;MACTC,IAAI,EAAGE,IAAQ,IAAI;QACjB2B,OAAO,CAACC,GAAG,CAAC5B,IAAI,CAAC;QACjB,IAAI,CAACkF,YAAY,CAACV,UAAU,CAAC;UAC3BjD,KAAK,EAAEvB,IAAI,CAACuB;SACb,CAAC;MACJ,CAAC;MACD7B,KAAK,EAAGD,GAAG,IAAI,CAAE;KAClB,CAAC;EACN;EAEAuX,YAAYA,CAAA;IACV,MAAMhoC,IAAI,GAAC,IAAI,CAACk2B,YAAY,CAACj5B,KAAK;IAClC,IAAI,CAACwqC,WAAW,CAAChgB,kBAAkB,CAAC;MAACznB;IAAI,CAAC,CAAC,CACxCkD,IAAI,CACH4qB,yCAAG,CAAEkD,IAAI,IAAI,CAAE,CAAC,CAAC,EACjB6C,+CAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAAC,CAC3BtE,SAAS,CAAC;MACTC,IAAI,EAAGE,IAAQ,IAAI,CACnB,CAAC;MACDN,KAAK,EAAGD,GAAG,IAAI,CAAE;KAClB,CAAC;EACN;;;uBA/GW1G,yBAAyB,EAAA3tB,+DAAA,CAAAE,uDAAA,GAAAF,+DAAA,CAAAG,mDAAA,GAAAH,+DAAA,CAAAg1B,0EAAA,GAAAh1B,+DAAA,CAAAk1B,+DAAA,GAAAl1B,+DAAA,CAAAo1B,6DAAA,GAAAp1B,+DAAA,CAAAG,2DAAA;IAAA;EAAA;;;YAAzBwtB,yBAAyB;MAAAyB,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAAuc,mCAAArc,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UClBtCzvB,4DAAA,aAAqB;UAMXA,uDAAA,cAA0B;UAE1BA,4DAAA,WAAM;UAAAA,oDAAA,sIAAsB;UAAAA,0DAAA,EAAO;UAErCA,4DAAA,aAAqB;UACcA,wDAAA,sBAAA+rC,6DAAA;YAAA,OAAYrc,GAAA,CAAA0L,UAAA,EAAY;UAAA,EAAC;UAkBxDp7B,wDAAA,KAAAgsC,yCAAA,iBAKM;UAENhsC,4DAAA,eAAgC;UAEJA,oDAAA,8CAAQ;UAAAA,4DAAA,gBAAkB;UAAAA,oDAAA,SAAC;UAAAA,0DAAA,EAAO;UAC1DA,4DAAA,eAAwB;UAAAA,uDAAA,iBAA2E;UAAAA,0DAAA,EAAM;UAI7GA,4DAAA,eAAgC;UAEJA,oDAAA,iHAAoB;UAAAA,4DAAA,gBAAkB;UAAAA,oDAAA,SAAC;UAAAA,0DAAA,EAAO;UACtEA,4DAAA,eAAwB;UAAAA,uDAAA,iBAAkF;UAAAA,0DAAA,EAAM;UAIpHA,4DAAA,eAAgC;UAEJA,oDAAA,wCAAO;UAAAA,0DAAA,EAAM;UACrCA,4DAAA,eAAwB;UAAAA,uDAAA,iBAAmE;UAAAA,0DAAA,EAAM;UAIrGA,4DAAA,eAA6B;UAC3BA,uDAAA,eACM;UACNA,4DAAA,eAAuB;UACrBA,uDAAA,iBAA2C;UAC3CA,4DAAA,gBAA6C;UAAvBA,wDAAA,mBAAAisC,0DAAA;YAAA,OAASvc,GAAA,CAAA0L,UAAA,EAAY;UAAA,EAAC;UAACp7B,oDAAA,oHAAkB;UAAAA,0DAAA,EAAO;;;UAnDtEA,uDAAA,IAA0B;UAA1BA,wDAAA,cAAA0vB,GAAA,CAAAoK,YAAA,CAA0B;UAkBG95B,uDAAA,GAAoB;UAApBA,wDAAA,SAAA0vB,GAAA,CAAA4b,cAAA,CAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3BiI;AACnC;AAChI;AACiB;AAMH;;;;;;;;;;;;;;;;;;;;;;;;ICWvCtrC,4DAAA,cAIC;IAFCA,wDAAA,mBAAAqsC,yDAAA;MAAA,MAAAC,WAAA,GAAAtsC,2DAAA,CAAAkjC,IAAA;MAAA,MAAAqJ,KAAA,GAAAD,WAAA,CAAAE,KAAA;MAAA,MAAArJ,OAAA,GAAAnjC,2DAAA;MAAA,OAASA,yDAAA,CAAAmjC,OAAA,CAAAsJ,YAAA,CAAAF,KAAA,CAAe;IAAA,EAAC;IAGzBvsC,oDAAA,GACF;IAAAA,0DAAA,EAAM;;;;;;IALJA,wDAAA,YAAAA,6DAAA,IAAAo3B,GAAA,EAAAmV,KAAA,KAAAva,MAAA,CAAA2a,iBAAA,EAAiD;IAIjD3sC,uDAAA,GACF;IADEA,gEAAA,YAAAusC,KAAA,YAAAM,QAAA,kBAAAA,QAAA,CAAAC,YAAA,OACF;;;;;IAyCM9sC,4DAAA,qBAAoE;IAAAA,oDAAA,GAAc;IAAAA,0DAAA,EAAa;;;;IAAhDA,wDAAA,UAAA+sC,SAAA,CAAAC,IAAA,CAAoB;IAAChtC,uDAAA,GAAc;IAAdA,+DAAA,CAAA+sC,SAAA,CAAAC,IAAA,CAAc;;;;;;IAgClFhtC,4DAAA,qBAA+G;IAAnGA,wDAAA,+BAAAitC,mFAAA;MAAA,MAAAX,WAAA,GAAAtsC,2DAAA,CAAA0jC,IAAA;MAAA,MAAAwJ,SAAA,GAAAZ,WAAA,CAAAa,SAAA;MAAA,MAAAxJ,OAAA,GAAA3jC,2DAAA;MAAA,OAAqBA,yDAAA,CAAA2jC,OAAA,CAAAyJ,aAAA,CAAAF,SAAA,CAAoB;IAAA,EAAC;IAAyDltC,oDAAA,GAAc;IAAAA,0DAAA,EAAa;;;;IAAhDA,wDAAA,UAAAktC,SAAA,CAAA/rC,IAAA,CAAoB;IAACnB,uDAAA,GAAc;IAAdA,+DAAA,CAAAktC,SAAA,CAAA/rC,IAAA,CAAc;;;;;IA0B3HnB,4DAAA,qBAGG;IACDA,oDAAA,GACF;IAAAA,0DAAA,EAAa;;;;IAHXA,wDAAA,UAAAqtC,OAAA,CAAAzlC,EAAA,CAAgB;IAEhB5H,uDAAA,GACF;IADEA,gEAAA,MAAAqtC,OAAA,CAAAzuC,GAAA,MACF;;;;;IAiDAoB,4DAAA,qBAGG;IACDA,oDAAA,GACF;IAAAA,0DAAA,EAAa;;;;IAHXA,wDAAA,UAAAstC,kBAAA,CAAA1lC,EAAA,CAA2B;IAE3B5H,uDAAA,GACF;IADEA,gEAAA,MAAAstC,kBAAA,CAAAna,IAAA,MACF;;;;;IA6BEnzB,4DAAA,gBAA2D;IACzDA,uDAAA,gBAAyF;IAEzFA,4DAAA,eAA4B;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAF9BA,uDAAA,GAAsC;IAAtCA,wDAAA,YAAAutC,eAAA,CAAAC,OAAA,UAAsC;IAEnCxtC,uDAAA,GAAoB;IAApBA,+DAAA,CAAAutC,eAAA,CAAApsC,IAAA,CAAoB;;;;;IAGlDnB,4DAAA,gBAA0D;IACxDA,uDAAA,gBAAyF;IAEzFA,4DAAA,eAAiE;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAFpEA,uDAAA,GAA+B;IAA/BA,wDAAA,YAAAutC,eAAA,CAAAC,OAAA,CAA+B,aAAAD,eAAA,CAAAC,OAAA;IAEUxtC,uDAAA,GAAoB;IAApBA,+DAAA,CAAAutC,eAAA,CAAApsC,IAAA,CAAoB;;;;;;IAqBrFnB,4DAAA,cAAsE;IAExBA,wDAAA,2BAAAytC,4GAAA;MAAAztC,2DAAA,CAAA0tC,IAAA;MAAA,MAAAC,eAAA,GAAA3tC,2DAAA,IAAAmtC,SAAA;MAAA,MAAAS,OAAA,GAAA5tC,2DAAA;MAAA,OAAiBA,yDAAA,CAAA4tC,OAAA,CAAAC,KAAA,CAAAF,eAAA,CAAkB;IAAA,EAAC;IAA9E3tC,0DAAA,EAAuG;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAA3BA,uDAAA,GAAoB;IAApBA,+DAAA,CAAAutC,eAAA,CAAAO,IAAA,CAAoB;;;;;IAIlJ9tC,4DAAA,cAAsE;IAElEA,uDAAA,gBAA2E;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAA3BA,uDAAA,GAAoB;IAApBA,+DAAA,CAAAutC,eAAA,CAAAO,IAAA,CAAoB;;;;;;IAzBxH9tC,4DAAA,cAAmF;IAI1DA,oDAAA,GAAiB;IAAAA,0DAAA,EAAO;IAC3CA,4DAAA,gBAAsG;IAArCA,wDAAA,2BAAA+tC,qGAAA;MAAA/tC,2DAAA,CAAAguC,IAAA;MAAA,MAAAL,eAAA,GAAA3tC,2DAAA,IAAAmtC,SAAA;MAAA,MAAAc,OAAA,GAAAjuC,2DAAA;MAAA,OAAiBA,yDAAA,CAAAiuC,OAAA,CAAAJ,KAAA,CAAAF,eAAA,CAAkB;IAAA,EAAC;IAArG3tC,0DAAA,EAAsG;IAI1GA,4DAAA,cAAsC;IAEQA,wDAAA,2BAAAkuC,qGAAA;MAAAluC,2DAAA,CAAAguC,IAAA;MAAA,MAAAL,eAAA,GAAA3tC,2DAAA,IAAAmtC,SAAA;MAAA,MAAAgB,OAAA,GAAAnuC,2DAAA;MAAA,OAAiBA,yDAAA,CAAAmuC,OAAA,CAAAN,KAAA,CAAAF,eAAA,CAAkB;IAAA,EAAC;IAA9E3tC,0DAAA,EAAuG;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,IAAiC;IAAAA,0DAAA,EAAO;IAItKA,uDAAA,eAAyB;IAEzBA,wDAAA,KAAAouC,4EAAA,kBAIM;IAENpuC,wDAAA,KAAAquC,4EAAA,kBAIM;IAENruC,4DAAA,eAAmB;IAAAA,oDAAA,cAAC;IAAAA,0DAAA,EAAM;IAE1BA,4DAAA,eAAsC;IAElCA,uDAAA,iBAA0E;IAAAA,4DAAA,gBAAmB;IAAAA,oDAAA,IAAY;IAAAA,0DAAA,EAAO;;;;;IA7B7FA,uDAAA,GAAiB;IAAjBA,gEAAA,SAAAsuC,OAAA,CAAAC,QAAA,MAAiB;IAOsFvuC,uDAAA,GAAiC;IAAjCA,gEAAA,KAAAsuC,OAAA,CAAAC,QAAA,OAAAhB,eAAA,CAAAO,IAAA,KAAiC;IAMxH9tC,uDAAA,GAA6B;IAA7BA,wDAAA,SAAAutC,eAAA,CAAAO,IAAA,UAA6B;IAM7B9tC,uDAAA,GAA6B;IAA7BA,wDAAA,SAAAutC,eAAA,CAAAO,IAAA,UAA6B;IAU6B9tC,uDAAA,GAAY;IAAZA,+DAAA,CAAAsuC,OAAA,CAAAC,QAAA,CAAY;;;;;;IAQ7GvuC,4DAAA,cAAoE;IAE7CA,oDAAA,GAAiB;IAAAA,0DAAA,EAAO;IAC3CA,4DAAA,gBAAsG;IAArCA,wDAAA,2BAAAwuC,2GAAA;MAAAxuC,2DAAA,CAAAyuC,IAAA;MAAA,MAAAd,eAAA,GAAA3tC,2DAAA,IAAAmtC,SAAA;MAAA,MAAAuB,OAAA,GAAA1uC,2DAAA;MAAA,OAAiBA,yDAAA,CAAA0uC,OAAA,CAAAb,KAAA,CAAAF,eAAA,CAAkB;IAAA,EAAC;IAArG3tC,0DAAA,EAAsG;;;;IADnFA,uDAAA,GAAiB;IAAjBA,gEAAA,SAAA2uC,OAAA,CAAAJ,QAAA,MAAiB;;;;;IAKxCvuC,4DAAA,eAAoH;IAAAA,oDAAA,QAAC;IAAAA,0DAAA,EAAO;;;;;;IAU5HA,4DAAA,cAAsE;IAExBA,wDAAA,2BAAA4uC,2GAAA;MAAA5uC,2DAAA,CAAA6uC,IAAA;MAAA,MAAAlB,eAAA,GAAA3tC,2DAAA,IAAAmtC,SAAA;MAAA,MAAA2B,OAAA,GAAA9uC,2DAAA;MAAA,OAAiBA,yDAAA,CAAA8uC,OAAA,CAAAjB,KAAA,CAAAF,eAAA,CAAkB;IAAA,EAAC;IAA9E3tC,0DAAA,EAAuG;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAA3BA,uDAAA,GAAoB;IAApBA,+DAAA,CAAAutC,eAAA,CAAAO,IAAA,CAAoB;;;;;IAIlJ9tC,4DAAA,cAAsE;IAElEA,uDAAA,gBAA2E;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAA3BA,uDAAA,GAAoB;IAApBA,+DAAA,CAAAutC,eAAA,CAAAO,IAAA,CAAoB;;;;;;IA3BxH9tC,4DAAA,cAAwG;IAEtGA,wDAAA,IAAA+uC,2EAAA,kBAKM;IAEN/uC,wDAAA,IAAAgvC,4EAAA,mBAA4H;IAE5HhvC,4DAAA,cAAsC;IAEQA,wDAAA,2BAAAivC,qGAAA;MAAAjvC,2DAAA,CAAAkvC,IAAA;MAAA,MAAAvB,eAAA,GAAA3tC,2DAAA,IAAAmtC,SAAA;MAAA,MAAAgC,OAAA,GAAAnvC,2DAAA;MAAA,OAAiBA,yDAAA,CAAAmvC,OAAA,CAAAtB,KAAA,CAAAF,eAAA,CAAkB;IAAA,EAAC;IAA9E3tC,0DAAA,EAAuG;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,GAAiC;IAAAA,0DAAA,EAAO;IAItKA,uDAAA,cAAyB;IAEzBA,wDAAA,IAAAovC,2EAAA,kBAIM;IAENpvC,wDAAA,KAAAqvC,4EAAA,kBAIM;IAENrvC,4DAAA,eAAmB;IAAAA,oDAAA,cAAC;IAAAA,0DAAA,EAAM;IAE1BA,4DAAA,eAAsC;IAElCA,uDAAA,iBAA0E;IAAAA,4DAAA,gBAAmB;IAAAA,oDAAA,IAAY;IAAAA,0DAAA,EAAO;;;;;IAjC7EA,uDAAA,GAA2B;IAA3BA,wDAAA,SAAAutC,eAAA,CAAA+B,SAAA,CAA2B;IAO3DtvC,uDAAA,GAA2B;IAA3BA,wDAAA,SAAAutC,eAAA,CAAA+B,SAAA,CAA2B;IAI4FtvC,uDAAA,GAAiC;IAAjCA,gEAAA,KAAAuvC,OAAA,CAAAhB,QAAA,OAAAhB,eAAA,CAAAO,IAAA,KAAiC;IAMxH9tC,uDAAA,GAA6B;IAA7BA,wDAAA,SAAAutC,eAAA,CAAAO,IAAA,UAA6B;IAM7B9tC,uDAAA,GAA6B;IAA7BA,wDAAA,SAAAutC,eAAA,CAAAO,IAAA,UAA6B;IAU6B9tC,uDAAA,GAAY;IAAZA,+DAAA,CAAAuvC,OAAA,CAAAhB,QAAA,CAAY;;;;;;IAM/GvuC,4DAAA,cAA4H;IAGtHA,uDAAA,gBAA8C;IAChDA,0DAAA,EAAM;IAGRA,4DAAA,cAAsC;IAEQA,wDAAA,oBAAAwvC,8FAAA;MAAAxvC,2DAAA,CAAAyvC,IAAA;MAAA,MAAA9B,eAAA,GAAA3tC,2DAAA,IAAAmtC,SAAA;MAAA,MAAAuC,OAAA,GAAA1vC,2DAAA;MAAA,OAAUA,yDAAA,CAAA0vC,OAAA,CAAAC,SAAA,CAAAhC,eAAA,CAAsB;IAAA,EAAC;IAA3E3tC,0DAAA,EAAmG;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,GAAY;IAAAA,0DAAA,EAAO;;;;IAAnBA,uDAAA,GAAY;IAAZA,+DAAA,CAAA4vC,OAAA,CAAArB,QAAA,CAAY;;;;;;IAMxIvuC,4DAAA,cAAyG;IAGzDA,wDAAA,oBAAA6vC,8FAAA;MAAA7vC,2DAAA,CAAA8vC,IAAA;MAAA,MAAAnC,eAAA,GAAA3tC,2DAAA,IAAAmtC,SAAA;MAAA,MAAA4C,OAAA,GAAA/vC,2DAAA;MAAA,OAAUA,yDAAA,CAAA+vC,OAAA,CAAAJ,SAAA,CAAAhC,eAAA,CAAsB;IAAA,EAAC;IAA3E3tC,0DAAA,EAAmG;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,GAAY;IAAAA,0DAAA,EAAO;;;;IAAnBA,uDAAA,GAAY;IAAZA,+DAAA,CAAAgwC,OAAA,CAAAzB,QAAA,CAAY;;;;;IA3H1IvuC,4DAAA,cAA6D;IAY3DA,wDAAA,IAAAiwC,uEAAA,oBAIQ;IAERjwC,wDAAA,IAAAkwC,uEAAA,oBAIQ;IAGRlwC,wDAAA,IAAAmwC,qEAAA,mBAoCM;IAGNnwC,wDAAA,IAAAowC,qEAAA,mBAsCM;IAGNpwC,wDAAA,IAAAqwC,qEAAA,kBAYM;IAGNrwC,wDAAA,IAAAswC,qEAAA,kBAMM;IAERtwC,0DAAA,EAAM;;;;IApHIA,uDAAA,GAA0B;IAA1BA,wDAAA,UAAAutC,eAAA,CAAAC,OAAA,CAA0B;IAM1BxtC,uDAAA,GAAyB;IAAzBA,wDAAA,SAAAutC,eAAA,CAAAC,OAAA,CAAyB;IAO3BxtC,uDAAA,GAAyD;IAAzDA,wDAAA,SAAAutC,eAAA,CAAAgD,SAAA,KAAAhD,eAAA,CAAAiD,aAAA,CAAyD;IAuCzDxwC,uDAAA,GAA8E;IAA9EA,wDAAA,UAAAutC,eAAA,CAAAgD,SAAA,KAAAhD,eAAA,CAAAiD,aAAA,IAAAjD,eAAA,CAAAO,IAAA,CAA8E;IAyC9E9tC,uDAAA,GAA8E;IAA9EA,wDAAA,UAAAutC,eAAA,CAAAgD,SAAA,IAAAhD,eAAA,CAAAiD,aAAA,KAAAjD,eAAA,CAAAO,IAAA,CAA8E;IAe9E9tC,uDAAA,GAA+E;IAA/EA,wDAAA,UAAAutC,eAAA,CAAAgD,SAAA,KAAAhD,eAAA,CAAAiD,aAAA,KAAAjD,eAAA,CAAAO,IAAA,CAA+E;;;;;IAxHvF9tC,wDAAA,IAAAywC,+DAAA,kBAgIM;;;;IAhIAzwC,wDAAA,SAAA2tC,eAAA,CAAA9sC,KAAA,CAAA6vC,MAAA,CAA8B;;;;;IAFtC1wC,wDAAA,IAAA2wC,yDAAA,0BAoIc;;;;IApIsD3wC,wDAAA,iBAAAutC,eAAA,CAAAqD,UAAA,CAAuC;;;;;IAF/G5wC,4DAAA,cAAyF;IAErFA,wDAAA,IAAA6wC,2CAAA,iBAoIc;IAChB7wC,0DAAA,EAAM;;;;;;IAtIDA,uDAAA,GAAmB;IAAnBA,wDAAA,kBAAA8wC,KAAA,CAAmB,aAAAnD,eAAA,CAAA9sC,KAAA,CAAA05B,KAAA;IACev6B,uDAAA,GAAe;IAAfA,wDAAA,YAAAmkC,OAAA,CAAA4M,WAAA,CAAe;;;;;IA8IlD/wC,4DAAA,eAA4D;IAGxDA,uDAAA,iBAAkD;IAElDA,4DAAA,eAA4B;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;IAGzDA,4DAAA,cAAsC;IAOlCA,uDAAA,iBAAiE;IAAAA,4DAAA,eAAmB;IAAAA,oDAAA,IAAY;IAAAA,0DAAA,EAAO;;;;;IAV7EA,uDAAA,GAAoB;IAApBA,+DAAA,CAAAgxC,eAAA,CAAA7vC,IAAA,CAAoB;IAUsCnB,uDAAA,GAAY;IAAZA,+DAAA,CAAAixC,OAAA,CAAA1C,QAAA,CAAY;;;;;IAftGvuC,wDAAA,IAAAkxC,+DAAA,oBAoBM;;;;IApBAlxC,wDAAA,UAAAmxC,eAAA,CAAAtwC,KAAA,CAAA6vC,MAAA,CAA+B;;;;;IADvC1wC,wDAAA,IAAAoxC,yDAAA,0BAsBc;;;;IAtBsDpxC,wDAAA,iBAAAgxC,eAAA,CAAAJ,UAAA,CAAuC;;;;;IAF/G5wC,4DAAA,cAA6G;IAEzGA,wDAAA,IAAAqxC,2CAAA,iBAsBc;IAChBrxC,0DAAA,EAAM;;;;;;IAxBDA,uDAAA,GAAmB;IAAnBA,wDAAA,kBAAAsxC,KAAA,CAAmB,aAAAH,eAAA,CAAAtwC,KAAA,CAAA05B,KAAA;IACev6B,uDAAA,GAAe;IAAfA,wDAAA,YAAAuxC,OAAA,CAAAR,WAAA,CAAe;;;;;IAnJ5D/wC,4DAAA,cAAiE;IAG3BA,oDAAA,0CAAmC;IAAAA,0DAAA,EAAM;IAC3EA,wDAAA,IAAAwxC,yCAAA,kBAwIM;IACRxxC,0DAAA,EAAM;IAENA,4DAAA,cAAyB;IACYA,oDAAA,yBAAkB;IAAAA,0DAAA,EAAM;IAC3DA,wDAAA,IAAAyxC,yCAAA,kBA0BM;IACRzxC,0DAAA,EAAM;;;;IAxKgDA,uDAAA,GAAqB;IAArBA,wDAAA,YAAAw4B,MAAA,CAAAkZ,OAAA,CAAAnd,QAAA,CAAqB;IA6IFv0B,uDAAA,GAAqB;IAArBA,wDAAA,YAAAw4B,MAAA,CAAAkZ,OAAA,CAAAnd,QAAA,CAAqB;;;;;IAwCpFv0B,4DAAA,YAAoC;IAClCA,uDAAA,gBAAwF;IAExFA,4DAAA,eAA4B;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAF/BA,uDAAA,GAAsC;IAAtCA,wDAAA,YAAA2xC,eAAA,CAAAnE,OAAA,UAAsC;IAElCxtC,uDAAA,GAAoB;IAApBA,+DAAA,CAAA2xC,eAAA,CAAAxwC,IAAA,CAAoB;;;;;IAGlDnB,4DAAA,YAAmC;IACjCA,uDAAA,gBAAyF;IAEzFA,4DAAA,eAAiE;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAFpEA,uDAAA,GAA+B;IAA/BA,wDAAA,YAAA2xC,eAAA,CAAAnE,OAAA,CAA+B,aAAAmE,eAAA,CAAAnE,OAAA;IAEUxtC,uDAAA,GAAoB;IAApBA,+DAAA,CAAA2xC,eAAA,CAAAxwC,IAAA,CAAoB;;;;;IAXzFnB,4DAAA,cAA4D;IAE1DA,wDAAA,IAAA4xC,uEAAA,qBAIQ;IAER5xC,wDAAA,IAAA6xC,uEAAA,qBAIQ;IAEV7xC,0DAAA,EAAM;;;;IAZIA,uDAAA,GAA0B;IAA1BA,wDAAA,UAAA2xC,eAAA,CAAAnE,OAAA,CAA0B;IAM1BxtC,uDAAA,GAAyB;IAAzBA,wDAAA,SAAA2xC,eAAA,CAAAnE,OAAA,CAAyB;;;;;IARnCxtC,wDAAA,IAAA8xC,+DAAA,kBAcM;;;;IAdA9xC,wDAAA,SAAA+xC,eAAA,CAAAlxC,KAAA,CAAA6vC,MAAA,CAA8B;;;;;IADtC1wC,wDAAA,IAAAgyC,yDAAA,0BAgBc;;;;IAhBsDhyC,wDAAA,iBAAA2xC,eAAA,CAAAf,UAAA,CAAuC;;;;;IAF/G5wC,4DAAA,cAAyF;IAErFA,wDAAA,IAAAiyC,2CAAA,iBAgBc;IAChBjyC,0DAAA,EAAM;;;;;;IAlBDA,uDAAA,GAAmB;IAAnBA,wDAAA,kBAAAkyC,KAAA,CAAmB,aAAAH,eAAA,CAAAlxC,KAAA,CAAA05B,KAAA;IACev6B,uDAAA,GAAe;IAAfA,wDAAA,YAAAmyC,OAAA,CAAApB,WAAA,CAAe;;;;;IA0BlD/wC,4DAAA,eAA4D;IAGxDA,uDAAA,iBAAkD;IAElDA,4DAAA,eAA4B;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAO;;;;IAA3BA,uDAAA,GAAoB;IAApBA,+DAAA,CAAAoyC,gBAAA,CAAAjxC,IAAA,CAAoB;;;;;IALpDnB,wDAAA,IAAAqyC,+DAAA,mBAQM;;;;IARAryC,wDAAA,UAAAsyC,gBAAA,CAAAzxC,KAAA,CAAA6vC,MAAA,CAA+B;;;;;IADvC1wC,wDAAA,IAAAuyC,yDAAA,0BAUc;;;;IAVsDvyC,wDAAA,iBAAAoyC,gBAAA,CAAAxB,UAAA,CAAuC;;;;;IAF/G5wC,4DAAA,cAA0F;IAEtFA,wDAAA,IAAAwyC,2CAAA,iBAUc;IAChBxyC,0DAAA,EAAM;;;;;;IAZDA,uDAAA,GAAmB;IAAnBA,wDAAA,kBAAAyyC,MAAA,CAAmB,aAAAH,gBAAA,CAAAzxC,KAAA,CAAA05B,KAAA;IACev6B,uDAAA,GAAe;IAAfA,wDAAA,YAAA0yC,OAAA,CAAA3B,WAAA,CAAe;;;;;IA/B5D/wC,4DAAA,cAAmE;IAG7BA,oDAAA,0CAAmC;IAAAA,0DAAA,EAAM;IAC3EA,wDAAA,IAAA2yC,yCAAA,kBAoBM;IACR3yC,0DAAA,EAAM;IAENA,4DAAA,eAA6C;IACEA,oDAAA,yBAAkB;IAAAA,0DAAA,EAAM;IACrEA,wDAAA,IAAA4yC,yCAAA,kBAcM;IACR5yC,0DAAA,EAAM;;;;IAxCgDA,uDAAA,GAAqB;IAArBA,wDAAA,YAAAqkC,OAAA,CAAAqN,OAAA,CAAAnd,QAAA,CAAqB;IAyBrBv0B,uDAAA,GAAqB;IAArBA,wDAAA,YAAAqkC,OAAA,CAAAqN,OAAA,CAAAnd,QAAA,CAAqB;;;;;IAoB3Ev0B,4DAAA,eAAsE;IACtDA,oDAAA,aAAM;IAAAA,0DAAA,EAAM;IAC1BA,4DAAA,eAAuB;IAAAA,oDAAA,GAA6B;IAAAA,0DAAA,EAAM;IAC1DA,4DAAA,eAAuB;IAAAA,oDAAA,GAAY;IAAAA,0DAAA,EAAM;;;;IADlBA,uDAAA,GAA6B;IAA7BA,+DAAA,CAAA6yC,OAAA,CAAAC,QAAA,CAAAjyC,KAAA,CAAAkyC,UAAA,CAA6B;IAC7B/yC,uDAAA,GAAY;IAAZA,+DAAA,CAAA6yC,OAAA,CAAAtE,QAAA,CAAY;;;;;IAGrCvuC,4DAAA,eAA0E;IACnEA,oDAAA,GAAoB;IAAAA,0DAAA,EAAM;IAC/BA,uDAAA,iBAAqE;IACvEA,0DAAA,EAAM;;;;IAFCA,uDAAA,GAAoB;IAApBA,gEAAA,YAAAgzC,OAAA,CAAAC,QAAA,MAAoB;;;;;IA0B/BjzC,4DAAA,cAAqB;IAAAA,oDAAA,mBAAY;IAAAA,0DAAA,EAAK;IACtCA,4DAAA,eAAwB;IAAAA,oDAAA,uDAAgD;IAAAA,0DAAA,EAAM;IAC9EA,4DAAA,eAAoC;IAC2BA,oDAAA,aAAM;IAAAA,0DAAA,EAAS;IAC5EA,4DAAA,kBAAoC;IAAAA,oDAAA,aAAM;IAAAA,0DAAA,EAAS;;;IADhCA,uDAAA,GAAyB;IAAzBA,wDAAA,0BAAyB;;;ADva1C,MAAOkzC,mBAAmB;EAuC9BzzC,YACU0zC,mBAAwC,EACxCxgB,EAAe,EACfygB,gBAAkC,EAClCza,QAAqB,EACrB3C,MAAiB,EACjBqd,iBAAoC,EACpCC,gBAAkC;IANlC,KAAAH,mBAAmB,GAAnBA,mBAAmB;IACnB,KAAAxgB,EAAE,GAAFA,EAAE;IACF,KAAAygB,gBAAgB,GAAhBA,gBAAgB;IAChB,KAAAza,QAAQ,GAARA,QAAQ;IACR,KAAA3C,MAAM,GAANA,MAAM;IACN,KAAAqd,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,gBAAgB,GAAhBA,gBAAgB;IArChB,KAAAC,UAAU,GAAG,IAAIzU,uDAAY,EAAQ;IACrC,KAAA0U,OAAO,GAAG,IAAI1U,uDAAY,EAAQ;IAClC,KAAA2U,eAAe,GAAG,IAAI3U,uDAAY,EAAU;IAC5C,KAAA4U,aAAa,GAAG,IAAI5U,uDAAY,EAAQ;IAElD,KAAA6U,QAAQ,GAAI9yC,KAAmB,IAAI,CAAG,CAAC;IACvC,KAAA+yC,SAAS,GAAG,MAAK,CAAG,CAAC;IACb,KAAAC,OAAO,GAAG,KAAK;IAEvB,KAAAjb,yBAAyB,GAAsB;MAAEC,QAAQ,EAAE;IAAI,CAAE;IACjE,KAAAC,wBAAwB,GAAsB;MAAED,QAAQ,EAAE;IAAI,CAAE;IAExD,KAAAE,SAAS,GAAG,IAAIvB,yCAAO,EAAE;IAEjC,KAAAtO,gBAAgB,GAAqB,EAAE;IACvC,KAAAU,cAAc,GAAQ,EAAE;IACxB,KAAApe,cAAc,GAAO,EAAE;IAEvB,KAAAsoC,aAAa,GAAC,CACZ;MAAEl1C,GAAG,EAAC,QAAQ;MAAEgJ,EAAE,EAAC,CAAC;MAAEmsC,OAAO,EAAC;IAAC,CAAE,EACjC;MAAEn1C,GAAG,EAAC,SAAS;MAAEgJ,EAAE,EAAC,CAAC;MAAEmsC,OAAO,EAAC;IAAC,CAAE,EAClC;MAAEn1C,GAAG,EAAC,WAAW;MAAEgJ,EAAE,EAAC,CAAC;MAAEmsC,OAAO,EAAC;IAAC,CAAE,EACpC;MAAEn1C,GAAG,EAAC,UAAU;MAAEgJ,EAAE,EAAC,CAAC;MAAEmsC,OAAO,EAAC;IAAC,CAAE,EACnC;MAAEn1C,GAAG,EAAC,QAAQ;MAAEgJ,EAAE,EAAC,CAAC;MAAEmsC,OAAO,EAAC;IAAC,CAAE,EACjC;MAAEn1C,GAAG,EAAC,UAAU;MAAEgJ,EAAE,EAAC,CAAC;MAAEmsC,OAAO,EAAC;IAAC,CAAE,EACnC;MAAEn1C,GAAG,EAAC,QAAQ;MAAEgJ,EAAE,EAAC,CAAC;MAAEmsC,OAAO,EAAC;IAAC,CAAE,CAClC;IA8RD,KAAAC,cAAc,GAAIrZ,KAAU,IAAI;MAC9B;MACA;MACA;MACA;MAEA,MAAMj8B,IAAI,GAAC0tC,2DAAU,CAACzR,KAAK,EAAC,YAAY,EAAC,OAAO,CAAC;MACjD,OAAO,IAAI,CAACmY,QAAQ,CAACjyC,KAAK,CAACozC,cAAc,EAAEC,IAAI,CAAEC,CAAK,IAAKA,CAAC,IAAIz1C,IAAI,CAAC,GAAG,UAAU,GAAG,EAAE;IACzF,CAAC;IAzRC,IAAI,CAACo0C,QAAQ,GAAG,IAAI,CAACngB,EAAE,CAACO,KAAK,CAAC;MAC5BkhB,YAAY,EAAE,GAAE,EAAE,CAAC;MACnBtH,YAAY,EAAE,GAAE,EAAE,CAAC;MACnBuH,OAAO,EAAE,GAAE,EAAE,CAAC;MACdC,kBAAkB,EAAE,CAAC,EAAE,EAAC,EAAE,CAAC;MAC3B1sC,EAAE,EAAE,GAAE,EAAE,CAAC;MACTqsC,cAAc,EAAE,CAAC,EAAE,EAAC,EAAE,CAAC;MACvBM,GAAG,EAAE,GAAE,EAAE,CAAC;MACVC,cAAc,EAAE,CAAC,IAAI,EAAC,EAAE,CAAC;MACzBC,SAAS,EAAE,CAAC,UAAU,EAAC,EAAE,CAAC;MAC1B;MACAC,UAAU,EAAE,CAAC,EAAE,EAAC,EAAE,CAAC;MACnB3B,UAAU,EAAE,GAAE,EAAE,CAAC;MACjB4B,YAAY,EAAE,IAAI,CAAChiB,EAAE,CAACO,KAAK,CAAC;QAC1B0hB,iBAAiB,EAAE,GAAG,EAAE,CAAC;QACzBC,eAAe,EAAE,GAAG,EAAE;OACvB,CAAC;MACFC,QAAQ,EAAE,GAAE,EAAE,CAAC;MACfhwC,MAAM,EAAE6tB,EAAE,CAAC1wB,KAAK,CAAC;QACf;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MAAA,CACD,EAAE,EAAE;KACN,CAAC;EACJ;EAEA;EACAgtB,QAAQA,CAAA;IACN,IAAI,CAAC8lB,mBAAmB,EAAE;IAC1B,IAAI,CAACC,iBAAiB,EAAE;IAExB,IAAI,CAACjE,WAAW,CAACkE,OAAO,CAAEC,CAAK,IAAG;MAChC,IAAI,CAACxD,OAAO,CAACrvC,IAAI,CAAC,IAAI,CAACswB,EAAE,CAACO,KAAK,CAAC;QAC9BmhB,OAAO,EAAE,GAAE,EAAE,CAAC;QACdc,IAAI,EAAE,GAAE,EAAE,CAAC;QACX5a,KAAK,EAAE,CAAC2a,CAAC,CAACtE,UAAU,EAAC,EAAE,CAAC;QACxBwE,GAAG,EAAE,GAAE,EAAE,CAAC;QACV/O,GAAG,EAAE,GAAE,EAAE,CAAC;QACVgP,KAAK,EAAE,GAAE,EAAE,CAAC;QACZ3E,MAAM,EAAE,CAACwE,CAAC,CAACvX,MAAM,EAAC,EAAE,CAAC;QACrB98B,KAAK,EAAE,CAACq0C,CAAC,CAACpH,IAAI,KAAG,IAAI,GAAC,IAAI,CAACwH,MAAM,GAAC,CAAC,EAAC,EAAE;OACvC,CAAC,CAAC;MACH,IAAI,CAACxC,QAAQ,CAACyC,aAAa,EAAE;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACzC,QAAQ,CAAC0C,YAAY,CAAC1uC,IAAI,CAAC2wB,yDAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAAC,CAACtE,SAAS,CAAC5zB,KAAK,IAAG;MAC3E,IAAI,CAAC8yC,QAAQ,CAAC9yC,KAAK,CAAC;IACtB,CAAC,CAAC;IACF,IAAI,CAACiyC,QAAQ,CAAC2C,aAAa,CAAC3uC,IAAI,CAAC2wB,yDAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAAC,CAACtE,SAAS,CAAC,MAAK;MACzE,IAAI,CAAC,IAAI,CAACof,OAAO,EAAE;QACjB,IAAI,CAACD,SAAS,EAAE;QAChB,IAAI,CAACC,OAAO,GAAG,IAAI;;IAEvB,CAAC,CAAC;IAEF,IAAG,IAAI,CAACf,QAAQ,CAACjyC,KAAK,CAACi0C,QAAQ,IAAE,IAAI,EAAC;MACpC,IAAI,CAAChC,QAAQ,CAAC1Z,UAAU,CAAC;QACvB0b,QAAQ,EAAE,IAAI,CAACjuC,OAAO,CAACiuC;OACxB,CAAC;;IAEJ,IAAI,CAAChC,QAAQ,CAACyC,aAAa,EAAE;EAC/B;EACA/hB,WAAWA,CAAA;IACT,IAAI,CAACuF,SAAS,CAACrE,IAAI,CAAC,IAAI,CAAC;IACzB,IAAI,CAACqE,SAAS,CAAC4S,QAAQ,EAAE;EAC3B;EAEA,IAAI4C,QAAQA,CAAA;IACV,MAAM2G,CAAC,GAAG,IAAI,CAACJ,QAAQ,EAAEZ,IAAI,CAAEntC,CAAK,IAAKA,CAAC,CAACa,EAAE,KAAK,IAAI,CAACkrC,QAAQ,CAACjyC,KAAK,CAACi0C,QAAQ,CAAC;IAC/E,OAAOI,CAAC,EAAEQ,IAAI,GAACR,CAAC,CAACQ,IAAI,GAAC,GAAG;EAC3B;EACA,IAAIzC,QAAQA,CAAA;IACV,MAAMiC,CAAC,GAAG,IAAI,CAACJ,QAAQ,EAAEZ,IAAI,CAAEntC,CAAK,IAAKA,CAAC,CAACa,EAAE,KAAK,IAAI,CAACkrC,QAAQ,CAACjyC,KAAK,CAACi0C,QAAQ,CAAC;IAC/E,OAAOI,CAAC,EAAE/hB,IAAI,GAAC+hB,CAAC,CAAC/hB,IAAI,GAAC,GAAG;EAC3B;EAEAgT,WAAWA,CAACC,OAAsB;IAChC,IAAG,IAAI,CAAC0M,QAAQ,CAACjyC,KAAK,CAAC4zC,SAAS,KAAG,QAAQ,EAAE,IAAI,CAACkB,cAAc,EAAE;EACpE;EAEA;EACAC,UAAUA,CAACC,OAAY;IACrB,IAAI,CAAC/C,QAAQ,CAAC1Z,UAAU,CAACyc,OAAO,CAAC;EACnC;EACAC,gBAAgBA,CAACC,EAAO;IACtB,IAAI,CAACpC,QAAQ,GAAGoC,EAAE;EACpB;EACAC,iBAAiBA,CAACD,EAAO;IACvB,IAAI,CAACnC,SAAS,GAAGmC,EAAE;EACrB;EACAE,QAAQA,CAACzb,OAAwB;IAC/B,OAAOA,OAAO,CAAC35B,KAAK,IAAI,IAAI,CAACiyC,QAAQ,CAAC1e,KAAK,GAAG,IAAI,GAAG;MAAEyhB,OAAO,EAAE;IAAI,CAAE;EACxE;EAEA;EACAK,YAAYA,CAAA;IACV,IAAI,CAAC,IAAI,CAACC,mBAAmB,EAAE;MAAE;;IACjC,IAAI,CAACngB,MAAM,CAACmD,IAAI,CAAC,IAAI,CAACgd,mBAAmB,CAAC,CACvCC,WAAW,EAAE,CACb3hB,SAAS,CAAC0H,GAAG,IAAG;MACf,IAAIA,GAAG,EAAE;QAAE,IAAI,CAACoX,UAAU,CAAC7R,IAAI,EAAE;;IACrC,CAAC,CAAC;EACJ;EACA2U,SAASA,CAAA;IACP,IAAI,CAAC7C,OAAO,CAAC9R,IAAI,EAAE;EACrB;EACA+K,YAAYA,CAACyI,CAAQ;IACnB,IAAI,CAACzB,eAAe,CAAC/R,IAAI,CAACwT,CAAC,CAAC;EAC9B;EACAoB,eAAeA,CAAA;IACb,IAAI,CAAC5C,aAAa,CAAChS,IAAI,EAAE;EAC3B;EAEA;EACA6U,SAASA,CAAA;IACP,IAAI,CAAC7E,OAAO,CAACrvC,IAAI,CAAC,IAAI,CAACswB,EAAE,CAACO,KAAK,CAAC;MAC9BmhB,OAAO,EAAE,GAAE,EAAE,CAAC;MACdc,IAAI,EAAE,GAAE,EAAE,CAAC;MACX5a,KAAK,EAAE,GAAE,EAAE,CAAC;MACZ6a,GAAG,EAAE,GAAE,EAAE,CAAC;MACV/O,GAAG,EAAE,GAAE,EAAE,CAAC;MACVgP,KAAK,EAAE,GAAE,EAAE,CAAC;MACZ3E,MAAM,EAAE,CAAC,KAAK,EAAC,EAAE,CAAC;MAClB7vC,KAAK,EAAE,GAAE,EAAE;KACZ,CAAC,CAAC;IACH,IAAI,CAACiyC,QAAQ,CAACyC,aAAa,EAAE;EAC/B;EACA,IAAI7D,OAAOA,CAAA;IACT,OAAkB,IAAI,CAACoB,QAAQ,CAACrY,GAAG,CAAC,QAAQ,CAAC;EAC/C;EAEA;EAGA2S,aAAaA,CAAC1a,KAAS;IACrB,IAAI,CAACogB,QAAQ,CAAC1Z,UAAU,CAAC;MACvB;MACA;MACAub,YAAY,EAAE;QACZC,iBAAiB,EAAEliB,KAAK,CAAC8jB,QAAQ;QACjC3B,eAAe,EAAEniB,KAAK,CAAC+jB;;KAE1B,CAAC;EACJ;EAEAC,UAAUA,CAAA;IACR,MAAMC,WAAW,GAAC,IAAI,CAAC/sB,cAAc,EAAEnjB,MAAM,CAAEmwC,MAAU,IAAKA,MAAM,CAACz1C,IAAI,CAAC01C,WAAW,EAAE,CAACC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACjE,QAAQ,CAACjyC,KAAK,CAAC6zC,UAAU,EAAEmC,WAAW,EAAE,CAACC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IACxL,OAAOH,WAAW,CAAC7b,MAAM,IAAE,CAAC,GAC1B,EAAE,GACF6b,WAAW;EACf;EACAK,UAAUA,CAAA;IACR,MAAMA,UAAU,GAAC,IAAI,CAAC9tB,gBAAgB,EAAEziB,MAAM,CAAEmwC,MAAU,IAAKA,MAAM,CAAC5J,IAAI,CAAC6J,WAAW,EAAE,CAACC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACjE,QAAQ,CAACjyC,KAAK,CAACisC,YAAY,EAAE+J,WAAW,EAAE,CAACC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;IAC3L,OAAOE,UAAU,CAAClc,MAAM,IAAE,CAAC,GACzB,EAAE,GACFkc,UAAU;EACd;EAEAC,iBAAiBA,CAACjK,IAAW;IAC3B,IAAI7rC,IAAI,GAAK,EAAE;IACf,IAAI,CAAC+nB,gBAAgB,CAAC+rB,OAAO,CAAEC,CAAkB,IAAG;MAClD,IAAGlI,IAAI,EAAE6J,WAAW,EAAE,IAAE3B,CAAC,CAAClI,IAAI,EAAE6J,WAAW,EAAE,EAAC;QAAE11C,IAAI,GAAC+zC,CAAC,CAAC/zC,IAAI;;MAAE;IAC/D,CAAC,CAAC;IACF,OAAOA,IAAI;EACb;EACA+1C,iBAAiBA,CAACtvC,EAAS;IACzB,IAAIzG,IAAI,GAAK,EAAE;IACf,IAAI,CAAC+nB,gBAAgB,CAAC+rB,OAAO,CAAEC,CAAkB,IAAG;MAClD,IAAGttC,EAAE,IAAEstC,CAAC,CAACttC,EAAE,EAAC;QAAEzG,IAAI,GAAC+zC,CAAC,CAAClI,IAAI;;MAAE;IAC7B,CAAC,CAAC;IACF,OAAOplC,EAAE,KAAGpG,SAAS,GAAC,KAAK,GAACL,IAAI;EAClC;EAEAg2C,gBAAgBA,CAAA;IACd,IAAI,CAACzF,OAAO,CAACnd,QAAQ,CAAC0gB,OAAO,CAAE/b,CAAK,IAAG;MACrCA,CAAC,CAAC3E,QAAQ,CAAC,SAAS,CAAC,CAAC6iB,KAAK,EAAE;MAC7Ble,CAAC,CAAC3E,QAAQ,CAAC,MAAM,CAAC,CAAC6iB,KAAK,EAAE;MAC1Ble,CAAC,CAAC3E,QAAQ,CAAC,KAAK,CAAC,CAAC6iB,KAAK,EAAE;MACzBle,CAAC,CAAC3E,QAAQ,CAAC,KAAK,CAAC,CAAC6iB,KAAK,EAAE;MACzBle,CAAC,CAAC3E,QAAQ,CAAC,OAAO,CAAC,CAAC6iB,KAAK,EAAE;IAC7B,CAAC,CAAC;IACF,IAAI,CAACtE,QAAQ,CAACve,QAAQ,CAAC,YAAY,CAAC,CAAC6iB,KAAK,EAAE;EAC9C;EACA;EACAvJ,KAAKA,CAACrT,OAAY;IAChB,MAAM6c,SAAS,GAAG,IAAI,CAAClE,mBAAmB,CAACmE,aAAa,CACtD9c,OAAO,CAAC35B,KAAK,CAACw0C,KAAK,EACnB7a,OAAO,CAAC35B,KAAK,CAACA,KAAK,EACnB;MAAEwlC,GAAG,EAAE7L,OAAO,CAAC35B,KAAK,CAACwlC,GAAG;MAAE+O,GAAG,EAAE5a,OAAO,CAAC35B,KAAK,CAACu0C;IAAG,CAAC,CAClD;IACD5a,OAAO,CAACpB,UAAU,CAAC;MAAE+b,IAAI,EAAEkC;IAAS,CAAE,CAAC;EACzC;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA1H,SAASA,CAACnV,OAAW;IACnBA,OAAO,CAACpB,UAAU,CAAC;MACjBv4B,KAAK,EAAE25B,OAAO,CAAC35B,KAAK,CAACs0C,IAAI;MACzBE,KAAK,EAAE;KACR,CAAC;EACJ;EACAM,cAAcA,CAAA;IACZ;IACA,IAAIR,IAAI,GAAO,EAAE;IACjB;IACA;IACA;IACA,IAAI,CAACrC,QAAQ,CAACjyC,KAAK,CAACiE,MAAM,CAACmwC,OAAO,CAAEnzC,CAAK,IAAG;MAC1C,IAAGA,CAAC,CAAC4uC,MAAM,EAAC;QACVyE,IAAI,CAAC9yC,IAAI,CAACP,CAAC,CAACqzC,IAAI,CAAC;;IAErB,CAAC,CAAC;IACF,IAAIoC,GAAG,GAAG,IAAI,CAACpE,mBAAmB,CAACqE,YAAY,CAACrC,IAAI,CAAC;IACrD,IAAI,CAACrC,QAAQ,CAAC1Z,UAAU,CAAC;MAAE2Z,UAAU,EAACwE;IAAG,CAAE,CAAC;EAC9C;EACA;EACAE,oBAAoBA,CAAA;IAClB,IAAIC,IAAI,GAAC,EAAE;IACX,IAAIC,OAAO,GAAK,EAAE;IAClB,IAAI,CAAC7E,QAAQ,CAACjyC,KAAK,CAACozC,cAAc,EAAEgB,OAAO,CAAE/b,CAAK,IAAG;MACnD,MAAMx6B,IAAI,GAAG,IAAIw+B,IAAI,CAAChE,CAAC,CAAC;MACxB,MAAM0e,QAAQ,GAAE;QACdh5C,GAAG,EAAEF,IAAI,CAACm5C,cAAc,CAAC,OAAO,EAAE;UAAEj5C,GAAG,EAAE;QAAS,CAAE,CAAC;QACrDk5C,KAAK,EAAEp5C,IAAI,CAACm5C,cAAc,CAAC,OAAO,EAAE;UAAE/4C,KAAK,EAAE;QAAO,CAAE,CAAC;QACvDJ,IAAI,EAAEw6B;OACP;MACDye,OAAO,EAAEt1C,IAAI,CAACu1C,QAAQ,CAAC;IACzB,CAAC,CAAC;IACF,MAAMG,WAAW,GAACJ,OAAO,CAACnwC,IAAI,CAAC,CAACwwC,CAAK,EAAEC,CAAK,KAAK,IAAI/a,IAAI,CAAC8a,CAAC,CAACt5C,IAAI,CAAC,GAAG,IAAIw+B,IAAI,CAAC+a,CAAC,CAACv5C,IAAI,CAAC,GAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7Fq5C,WAAW,EAAE9C,OAAO,CAAC,CAACC,CAAK,EAAC1I,KAAY,KAAG;MACzC,IAAI0L,GAAG,GAAC1L,KAAK,GAAC,CAAC;MACf,IAAGuL,WAAW,CAACG,GAAG,CAAC,EAAEJ,KAAK,KAAG5C,CAAC,CAAC4C,KAAK,EAAC;QACnCJ,IAAI,GAAEA,IAAI,GAAGxC,CAAC,CAACt2C,GAAG,GAAG,GAAG;OACzB,MAAM;QACL84C,IAAI,GAAEA,IAAI,GAAGxC,CAAC,CAACt2C,GAAG,GAAG,GAAG,GAAGs2C,CAAC,CAAC4C,KAAK,IAAIC,WAAW,CAACjd,MAAM,IAAEod,GAAG,GAAC,EAAE,GAAC,IAAI,CAAC;;IAE1E,CAAC,CAAC;IACF,OAAOR,IAAI;EACb;EAUAS,UAAUA,CAACxd,KAAU,EAAEyd,QAAa;IAClC7hB,OAAO,CAACC,GAAG,CAACmE,KAAK,EAACyd,QAAQ,CAAC;IAC3B,MAAM15C,IAAI,GAAC0tC,2DAAU,CAACzR,KAAK,EAAC,YAAY,EAAC,OAAO,CAAC;IACjD,IAAG,IAAI,CAACmY,QAAQ,CAACjyC,KAAK,CAACozC,cAAc,KAAG,IAAI,EAAE,IAAI,CAACnB,QAAQ,CAACjyC,KAAK,CAACozC,cAAc,GAAC,EAAE;IACnF,MAAMzH,KAAK,GAAG,IAAI,CAACsG,QAAQ,CAACjyC,KAAK,CAACozC,cAAc,CAACoE,SAAS,CAAElE,CAAK,IAAKA,CAAC,IAAIz1C,IAAI,CAAC;IAChF,IAAI8tC,KAAK,GAAG,CAAC,EAAE;MACb,IAAI,CAACsG,QAAQ,CAACjyC,KAAK,CAACozC,cAAc,CAAC5xC,IAAI,CAAC3D,IAAI,CAAC;MAC7C,MAAM45C,SAAS,GAAC,IAAIpb,IAAI,CAACvC,KAAK,CAAC,CAAC4d,MAAM,EAAE;MACxC;MACA,MAAMC,UAAU,GAAC,IAAI,CAAC1F,QAAQ,CAACjyC,KAAK,CAACyzC,kBAAkB,EAAEJ,IAAI,CAAEC,CAAK,IAAI;QACtE,IAAGmE,SAAS,IAAE,CAAC,IAAEnE,CAAC,IAAE,CAAC,EAAC;UACpBA,CAAC,GAAC,CAAC;UACH,OAAOA,CAAC,IAAImE,SAAS;SACtB,MAAM;UACL,OAAOnE,CAAC,IAAImE,SAAS;;MAEzB,CAAC,CAAC;MACF;MACA;MACA;MACA,IAAG,CAACE,UAAU,EAAC;QACb,IAAI,CAAC7f,QAAQ,CAACQ,IAAI,CAChB,8CAA8C,EAC9C33B,SAAS,EACT;UACEq3B,QAAQ,EAAE,IAAI;UACd4f,gBAAgB,EAAE,KAAK;UACvBC,kBAAkB,EAAE,QAAQ;UAC5BC,UAAU,EAAE,CAAC,mBAAmB,CAAC,CAAC;SACnC,CACF;;KAEJ,MAAM;MACL,IAAI,CAAC7F,QAAQ,CAACjyC,KAAK,CAACozC,cAAc,CAAC2E,MAAM,CAACpM,KAAK,EAAE,CAAC,CAAC;;IAErD4L,QAAQ,CAACS,gBAAgB,EAAE;EAC7B;EAEA;EACA;EACQ9D,mBAAmBA,CAAA;IACzB,IAAI,CAAC3B,gBAAgB,CAAClqB,gBAAgB,CAAC;MAAChU,OAAO,EAAC,IAAI,CAAC4jC;IAAa,CAAC,CAAC,CACjEhyC,IAAI,CACH4qB,mDAAG,CAACxI,gBAAgB,IAAG;MAGrB,IAAI,CAACA,gBAAgB,EAAE;QACrB,MAAO;UAAEoL,KAAK,EAAE;YAAE+E,aAAa,EAAE;UAA4B;QAAC,CAAE;;IAEpE,CAAC,CAAC,EACF5B,yDAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAC1B,CACAtE,SAAS,CAAC;MACTC,IAAI,EAAGxL,gBAAgB,IAAI;QACzB,IAAI,CAACA,gBAAgB,GAACA,gBAAgB;MACxC,CAAC;MACDoL,KAAK,EAAGD,GAAG,IAAI;QACb,IAAI,CAACsE,QAAQ,CAACQ,IAAI,CAAC,GAAG9E,GAAG,CAACC,KAAK,CAAC+E,aAAa,IAAI,GAAGhF,GAAG,CAACC,KAAK,CAACuW,yBAAyB,EAAErpC,SAAS,EAAE,IAAI,CAACo3B,yBAAyB,CAAC;MACrI;KACD,CAAC;EACN;EACA;EACQoc,iBAAiBA,CAAA;IACrB,IAAI,CAAC1B,gBAAgB,CAAC59B,cAAc,CAAC;MAACR,OAAO,EAAE,IAAI,CAAC4jC,aAAa;MAAEvjC,eAAe,EAAC,IAAI,CAAC1O,OAAO,CAAC0O,eAAe;MAACJ,oBAAoB,EAAC,IAAI,CAACtO,OAAO,CAACsO;IAAoB,CAAE,CAAC,CACtKrO,IAAI,CACH4qB,mDAAG,CAAC9H,cAAc,IAAG;MACnB,IAAI,CAACA,cAAc,EAAE;QACnB,MAAO;UAAE0K,KAAK,EAAE;YAAE+E,aAAa,EAAE;UAAyB;QAAC,CAAE;;IAEjE,CAAC,CAAC,EACF5B,yDAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAC1B,CACAtE,SAAS,CAAC;MACTC,IAAI,EAAG9K,cAAc,IAAI;QACvB,IAAI,CAACA,cAAc,GAACA,cAAc;MACpC,CAAC;MACD0K,KAAK,EAAGD,GAAG,IAAI;QACb,IAAI,CAACsE,QAAQ,CAACQ,IAAI,CAAC,GAAG9E,GAAG,CAACC,KAAK,CAAC+E,aAAa,IAAI,GAAGhF,GAAG,CAACC,KAAK,CAACuW,yBAAyB,EAAErpC,SAAS,EAAE,IAAI,CAACo3B,yBAAyB,CAAC;MACrI;KACD,CAAC;EACN;;;uBA1ZSsa,mBAAmB,EAAAlzC,+DAAA,CAAAE,+EAAA,GAAAF,+DAAA,CAAAG,uDAAA,GAAAH,+DAAA,CAAAg1B,kEAAA,GAAAh1B,+DAAA,CAAAk1B,oEAAA,GAAAl1B,+DAAA,CAAAo1B,+DAAA,GAAAp1B,+DAAA,CAAAg1B,mEAAA,GAAAh1B,+DAAA,CAAAg1B,kEAAA;IAAA;EAAA;;;YAAnBke,mBAAmB;MAAA9jB,SAAA;MAAA4pB,SAAA,WAAAC,0BAAAxpB,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;;;;;;;;;;;;;;;;;;;;;;kFAbnB,CACT;QACEsB,OAAO,EAAEmb,6DAAiB;QAC1Bjb,KAAK,EAAE,IAAI;QACXioB,WAAW,EAAEhG;OACd,EACD;QACEniB,OAAO,EAAEob,yDAAa;QACtB+M,WAAW,EAAEhG,mBAAmB;QAChCjiB,KAAK,EAAE;OACR,CACF,GAAAjxB,kEAAA;MAAAqvB,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAA4pB,6BAAA1pB,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;UC/BHzvB,4DAAA,cAA8B;UAKeA,oDAAA,YAAK;UAAAA,0DAAA,EAAM;UAElDA,4DAAA,eAAqB;UAC4CA,wDAAA,oBAAAo5C,qDAAA;YAAA,OAAU1pB,GAAA,CAAAynB,gBAAA,EAAkB;UAAA,EAAC;UAA5Fn3C,0DAAA,EAA6F;UAC7FA,uDAAA,QAAO;UACPA,4DAAA,WAAM;UAAAA,oDAAA,mBAAY;UAAAA,0DAAA,EAAO;UAG3BA,4DAAA,gBAAqB;UAC8CA,wDAAA,oBAAAq5C,sDAAA;YAAA,OAAU3pB,GAAA,CAAAynB,gBAAA,EAAkB;UAAA,EAAC;UAA9Fn3C,0DAAA,EAA+F;UAC/FA,uDAAA,SAAO;UACPA,4DAAA,YAAM;UAAAA,oDAAA,0BAAkB;UAAAA,0DAAA,EAAO;UAKnCA,4DAAA,cAAyB;UACvBA,wDAAA,KAAAs5C,mCAAA,iBAMM;UACNt5C,4DAAA,iBAAoE;UAAtBA,wDAAA,mBAAAu5C,sDAAA;YAAA,OAAS7pB,GAAA,CAAA2mB,SAAA,EAAW;UAAA,EAAC;UAACr2C,uDAAA,gBAAmC;UAAAA,oDAAA,gBAAQ;UAAAA,0DAAA,EAAS;UACxHA,4DAAA,kBAA0E;UAA5BA,wDAAA,mBAAAw5C,sDAAA;YAAA,OAAS9pB,GAAA,CAAA4mB,eAAA,EAAiB;UAAA,EAAC;UAACt2C,uDAAA,gBAAmC;UAAAA,oDAAA,sBAAc;UAAAA,0DAAA,EAAS;UACpIA,4DAAA,kBAAuE;UAAzBA,wDAAA,mBAAAy5C,sDAAA;YAAA,OAAS/pB,GAAA,CAAAwmB,YAAA,EAAc;UAAA,EAAC;UAACl2C,uDAAA,gBAAkC;UAAAA,oDAAA,mBAAW;UAAAA,0DAAA,EAAS;UAKjIA,4DAAA,eAA2B;UAIGA,oDAAA,0BAAkB;UAAAA,0DAAA,EAAM;UAChDA,4DAAA,eAAuB;UAEnBA,uDAAA,iBAA6C;UAAAA,oDAAA,WAC/C;UAAAA,0DAAA,EAAO;UAIXA,4DAAA,eAAuB;UACGA,oDAAA,gBAAQ;UAAAA,0DAAA,EAAM;UACtCA,4DAAA,eAAuB;UACrBA,uDAAA,iBAIC;UACHA,0DAAA,EAAM;UAGRA,4DAAA,eAA6C;UACnBA,oDAAA,uBAAe;UAAAA,0DAAA,EAAM;UAC7CA,4DAAA,eAAuB;UACrBA,uDAAA,iBAKC;UACDA,4DAAA,gCAAwE;UACtEA,wDAAA,KAAA05C,0CAAA,yBAA+F;UACjG15C,0DAAA,EAAmB;UAoBvBA,4DAAA,eAAuB;UACGA,oDAAA,cAAM;UAAAA,0DAAA,EAAM;UACpCA,4DAAA,eAAuB;UACrBA,uDAAA,iBAKC;UACDA,4DAAA,gCAAiE;UAE/DA,wDAAA,KAAA25C,0CAAA,yBAA0I;UAC5I35C,0DAAA,EAAmB;UAoBvBA,4DAAA,eAAuB;UACGA,oDAAA,+BAAuB;UAAAA,0DAAA,EAAM;UACrDA,4DAAA,eAA0C;UAGpCA,wDAAA,KAAA45C,0CAAA,yBAKa;UACf55C,0DAAA,EAAa;UAKnBA,4DAAA,eAAuB;UACGA,oDAAA,+BAAuB;UAAAA,0DAAA,EAAM;UACrDA,4DAAA,eAAuB;UAESA,oDAAA,IAA0B;UAAAA,0DAAA,EAAM;UAC5DA,uDAAA,eAAiC;UACnCA,0DAAA,EAAS;UACTA,4DAAA,0BAA0B;UACnBA,wDAAA,mBAAA65C,mDAAAle,MAAA;YAAA,OAASA,MAAA,CAAAme,eAAA,EAAwB;UAAA,EAAC;UACrC95C,4DAAA,4BAIG;UAFDA,wDAAA,4BAAA+5C,qEAAApe,MAAA;YAAA37B,2DAAA,CAAAg6C,KAAA;YAAA,MAAA/a,GAAA,GAAAj/B,yDAAA;YAAA,OAAkBA,yDAAA,CAAA0vB,GAAA,CAAAyoB,UAAA,CAAAxc,MAAA,EAAAsD,GAAA,CAA2B;UAAA,EAAC;UAGhDj/B,0DAAA,EAAe;UAQzBA,4DAAA,eAA+B;UAGHA,oDAAA,0BAAkB;UAAAA,0DAAA,EAAM;UAChDA,4DAAA,eAAuB;UACrBA,uDAAA,iBAA0D;UAC5DA,0DAAA,EAAM;UAGRA,4DAAA,eAAyD;UAC/BA,oDAAA,wBAAgB;UAAAA,0DAAA,EAAM;UAC9CA,4DAAA,eAAuB;UACrBA,uDAAA,iBAAwD;UAC1DA,0DAAA,EAAM;UAGRA,4DAAA,eAA4B;UACJA,oDAAA,iBAAS;UAAAA,0DAAA,EAAM;UACrCA,4DAAA,eAAuB;UAGjBA,wDAAA,KAAAk6C,0CAAA,yBAKa;UACfl6C,0DAAA,EAAa;UAQrBA,wDAAA,KAAAm6C,mCAAA,kBA8KM;UAENn6C,wDAAA,KAAAo6C,mCAAA,kBA8CM;UAENp6C,4DAAA,eAAmB;UACjBA,wDAAA,KAAAq6C,mCAAA,kBAIM;UAENr6C,wDAAA,KAAAs6C,mCAAA,kBAGM;UAENt6C,4DAAA,aAAO;UACLA,uDAAA,kBAA0D;UAE1DA,4DAAA,iBAA4B;UAAAA,oDAAA,2BAAkB;UAAAA,0DAAA,EAAO;UAIzDA,4DAAA,gBAAqE;UAG/DA,uDAAA,kBAAyH;UAC3HA,0DAAA,EAAM;UAUdA,wDAAA,MAAAu6C,4CAAA,iCAAAv6C,oEAAA,CAOc;;;;;;UA3cRA,wDAAA,cAAA0vB,GAAA,CAAAojB,QAAA,CAAsB;UAsBA9yC,uDAAA,IAAU;UAAVA,wDAAA,YAAA0vB,GAAA,CAAA+qB,KAAA,CAAU;UAqBEz6C,uDAAA,IAAgB;UAAhBA,wDAAA,UAAA0vB,GAAA,CAAA4lB,MAAA,CAAgB;UAU5Ct1C,uDAAA,GAA+D;UAA/DA,wDAAA,aAAA0vB,GAAA,CAAAunB,iBAAA,CAAAvnB,GAAA,CAAAojB,QAAA,CAAAjyC,KAAA,CAAAisC,YAAA,QAA+D,UAAApd,GAAA,CAAAunB,iBAAA,CAAAvnB,GAAA,CAAAojB,QAAA,CAAAjyC,KAAA,CAAAisC,YAAA;UAa/D9sC,uDAAA,GAAgC;UAAhCA,wDAAA,oBAAA06C,GAAA,CAAgC;UAGF16C,uDAAA,GAAe;UAAfA,wDAAA,YAAA0vB,GAAA,CAAAsnB,UAAA,GAAe;UA4B7Ch3C,uDAAA,GAAyB;UAAzBA,wDAAA,oBAAAqyB,GAAA,CAAyB;UAIgDryB,uDAAA,GAAe;UAAfA,wDAAA,YAAA0vB,GAAA,CAAAgnB,UAAA,GAAe;UA2BpE12C,uDAAA,GAAiB;UAAjBA,wDAAA,YAAA0vB,GAAA,CAAAokB,aAAA,CAAiB;UAad9zC,uDAAA,GAA0B;UAA1BA,wDAAA,sBAAAg4B,GAAA,CAA0B;UACrBh4B,uDAAA,GAA0B;UAA1BA,+DAAA,CAAA0vB,GAAA,CAAA+nB,oBAAA,GAA0B;UAQlDz3C,uDAAA,GAA4B;UAA5BA,wDAAA,cAAA0vB,GAAA,CAAAskB,cAAA,CAA4B;UAgCDh0C,uDAAA,IAAY;UAAZA,wDAAA,YAAA0vB,GAAA,CAAAolB,QAAA,CAAY;UAa7B90C,uDAAA,GAAyC;UAAzCA,wDAAA,SAAA0vB,GAAA,CAAAojB,QAAA,CAAAjyC,KAAA,CAAA4zC,SAAA,cAAyC;UAgLzCz0C,uDAAA,GAA2C;UAA3CA,wDAAA,SAAA0vB,GAAA,CAAAojB,QAAA,CAAAjyC,KAAA,CAAA4zC,SAAA,gBAA2C;UAiDpCz0C,uDAAA,GAAyC;UAAzCA,wDAAA,SAAA0vB,GAAA,CAAAojB,QAAA,CAAAjyC,KAAA,CAAA4zC,SAAA,cAAyC;UAMvCz0C,uDAAA,GAA2C;UAA3CA,wDAAA,SAAA0vB,GAAA,CAAAojB,QAAA,CAAAjyC,KAAA,CAAA4zC,SAAA,gBAA2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACva/B;AAMoB;;;;;;;;;;ICoFzDz0C,4DAAA,aAAwD;IAC9BA,oDAAA,uBAAgB;IAAAA,0DAAA,EAAM;IAC9CA,4DAAA,cAAuB;IAChBA,oDAAA,GAA4B;IAAAA,0DAAA,EAAM;;;;IAAlCA,uDAAA,GAA4B;IAA5BA,+DAAA,CAAAgyB,MAAA,CAAAnrB,OAAA,kBAAAmrB,MAAA,CAAAnrB,OAAA,CAAA+zC,eAAA,CAA4B;;;;;IA4BvC56C,4DAAA,aAAwE;IAE5CA,oDAAA,8BAAuB;IAAAA,0DAAA,EAAM;IACrDA,4DAAA,cAAuB;IAChBA,oDAAA,GAAsC;IAAAA,0DAAA,EAAM;;;;IAA5CA,uDAAA,GAAsC;IAAtCA,gEAAA,KAAAy4B,MAAA,CAAA5xB,OAAA,kBAAA4xB,MAAA,CAAA5xB,OAAA,CAAAg0C,wBAAA,MAAsC;;;;;IAcrD76C,4DAAA,cAA+C;IACjBA,oDAAA,cAAO;IAAAA,0DAAA,EAAM;IACzCA,4DAAA,cAAqB;IAAAA,oDAAA,GAAoB;IAAAA,0DAAA,EAAM;;;;IAA1BA,uDAAA,GAAoB;IAApBA,+DAAA,CAAAsyB,MAAA,CAAAzrB,OAAA,kBAAAyrB,MAAA,CAAAzrB,OAAA,CAAAwtC,OAAA,CAAoB;;;;;;IAMvCr0C,4DAAA,cAGC;IADCA,wDAAA,mBAAA86C,iEAAA;MAAA,MAAAxO,WAAA,GAAAtsC,2DAAA,CAAA+6C,GAAA;MAAA,MAAAC,gBAAA,GAAA1O,WAAA,CAAAa,SAAA;MAAA,MAAA7U,MAAA,GAAAt4B,2DAAA;MAAA,OAASA,yDAAA,CAAAs4B,MAAA,CAAA2iB,OAAA,CAAAD,gBAAA,CAAApzC,EAAA,CAAyB;IAAA,EAAC;IAEnC5H,oDAAA,GACF;IAAAA,0DAAA,EAAM;;;;IADJA,uDAAA,GACF;IADEA,gEAAA,MAAAg7C,gBAAA,kBAAAA,gBAAA,CAAAE,SAAA,MACF;;;;;;IAEAl7C,4DAAA,cAGC;IADCA,wDAAA,mBAAAm7C,iEAAA;MAAA,MAAA7O,WAAA,GAAAtsC,2DAAA,CAAAo7C,IAAA;MAAA,MAAAC,aAAA,GAAA/O,WAAA,CAAAa,SAAA;MAAA,MAAA0F,OAAA,GAAA7yC,2DAAA;MAAA,OAASA,yDAAA,CAAA6yC,OAAA,CAAAoI,OAAA,CAAAI,aAAA,CAAAzzC,EAAA,CAAqB;IAAA,EAAC;IAE/B5H,oDAAA,GACF;IAAAA,0DAAA,EAAM;;;;IADJA,uDAAA,GACF;IADEA,gEAAA,MAAAq7C,aAAA,kBAAAA,aAAA,CAAAH,SAAA,MACF;;;;;IAfJl7C,4DAAA,cAAiG;IACnEA,oDAAA,qBAAc;IAAAA,0DAAA,EAAM;IAChDA,4DAAA,cAAmC;IACjCA,wDAAA,IAAAs7C,2CAAA,kBAKM;IAENt7C,wDAAA,IAAAu7C,2CAAA,kBAKM;IACRv7C,0DAAA,EAAM;;;;IAZwBA,uDAAA,GAA2B;IAA3BA,wDAAA,YAAA+gC,MAAA,CAAAl6B,OAAA,kBAAAk6B,MAAA,CAAAl6B,OAAA,CAAA20C,cAAA,CAA2B;IAO/Bx7C,uDAAA,GAAuB;IAAvBA,wDAAA,YAAA+gC,MAAA,CAAAl6B,OAAA,kBAAAk6B,MAAA,CAAAl6B,OAAA,CAAA40C,UAAA,CAAuB;;;;;;;;;;;IASjDz7C,4DAAA,UAAuD;IAEnDA,wDAAA,wBAAA07C,4EAAA;MAAA,MAAApP,WAAA,GAAAtsC,2DAAA,CAAA+iC,IAAA;MAAA,MAAA4Y,KAAA,GAAArP,WAAA,CAAAE,KAAA;MAAA,MAAAxJ,OAAA,GAAAhjC,2DAAA;MAAA,OAAcA,yDAAA,CAAAgjC,OAAA,CAAAuQ,UAAA,CAAAoI,KAAA,CAAa;IAAA,EAAC,qBAAAC,yEAAA;MAAA57C,2DAAA,CAAA+iC,IAAA;MAAA,MAAAI,OAAA,GAAAnjC,2DAAA;MAAA,OACjBA,yDAAA,CAAAmjC,OAAA,CAAAqQ,OAAA,EAAS;IAAA,EADQ,6BAAAqI,iFAAAlgB,MAAA;MAAA37B,2DAAA,CAAA+iC,IAAA;MAAA,MAAA1C,OAAA,GAAArgC,2DAAA;MAAA,OAETA,yDAAA,CAAAqgC,OAAA,CAAAoT,eAAA,CAAA9X,MAAA,CAAuB;IAAA,EAFd,2BAAAmgB,+EAAA;MAAA97C,2DAAA,CAAA+iC,IAAA;MAAA,MAAAS,OAAA,GAAAxjC,2DAAA;MAAA,OAGXA,yDAAA,CAAAwjC,OAAA,CAAAkQ,aAAA,EAAe;IAAA,EAHJ;IAc9B1zC,0DAAA,EAAkB;;;;;IAVhBA,uDAAA,GAAwC;IAAxCA,wDAAA,YAAAA,6DAAA,IAAA81B,GAAA,EAAA6lB,KAAA,KAAA9jB,MAAA,CAAA8U,iBAAA,EAAwC,oBAAAgP,KAAA,mBAAA9jB,MAAA,CAAAhxB,OAAA,CAAA2N,iBAAA,WAAAqjB,MAAA,CAAAkkB,WAAA,CAAAl7C,KAAA,CAAA45C,KAAA,uBAAA5iB,MAAA,CAAA8U,iBAAA,iBAAA9U,MAAA,CAAAkZ,WAAA,YAAAlZ,MAAA,CAAAhxB,OAAA,CAAAm1C,wBAAA,aAAAnkB,MAAA,CAAAhxB,OAAA,cAAAgxB,MAAA,CAAAokB,YAAA;;;AD3J5C,MAAOvuB,oBAAoB;EAkB/B;EACAjuB,YACUizB,KAAqB,EACrBC,EAAe,EACfupB,cAA8B,EAC9BvjB,QAAqB,EACrBwjB,UAAuB,EACvBC,aAA4B;IAL5B,KAAA1pB,KAAK,GAALA,KAAK;IACL,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAupB,cAAc,GAAdA,cAAc;IACd,KAAAvjB,QAAQ,GAARA,QAAQ;IACR,KAAAwjB,UAAU,GAAVA,UAAU;IACV,KAAAC,aAAa,GAAbA,aAAa;IAxBvB;IACA,KAAAx0C,EAAE,GAAS,CAAC;IACZ;IACA,KAAAgxB,yBAAyB,GAAsB;MAAEC,QAAQ,EAAE;IAAI,CAAE;IACjE,KAAAC,wBAAwB,GAAsB;MAAED,QAAQ,EAAE;IAAI,CAAE;IAChE;IACQ,KAAAE,SAAS,GAAG,IAAIvB,yCAAO,EAAE;IACjC;IACA,KAAA6kB,UAAU,GAAG1B,kEAAW,CAAC0B,UAAU;IAInC,KAAA1P,iBAAiB,GAAQ,CAAC;IAC1B,KAAAoE,WAAW,GAAK,EAAE;IAClB,KAAA7nB,gBAAgB,GAAK,EAAE;IAEd,KAAAozB,YAAY,GAAG,mEAAmE;IAUzF,IAAI,CAACP,WAAW,GAAG,IAAI,CAACppB,EAAE,CAACO,KAAK,CAAC;MAC/BjU,GAAG,EAAE,GAAE,EAAE,CAAC;MACVw7B,KAAK,EAAE9nB,EAAE,CAAC1wB,KAAK,CAAC,EAAE,EAAE,EAAE;KACvB,CAAC;EACJ;EACA;EACAuxB,WAAWA,CAAA;IACT,IAAI,CAACuF,SAAS,CAACrE,IAAI,CAAC,IAAI,CAAC;IACzB,IAAI,CAACqE,SAAS,CAAC4S,QAAQ,EAAE;EAC3B;EACA1c,QAAQA,CAAA;IACN,MAAMhQ,GAAG,GAAG,IAAI,CAACyT,KAAK,CAACW,QAAQ,CAACkpB,QAAQ,CAAC9hB,GAAG,CAAC,KAAK,CAAC;IACnD,IAAI,CAACshB,WAAW,CAAC3iB,UAAU,CAAC;MAC1Bna,GAAG,EAACA;KACL,CAAC;IACF,IAAI,CAACu9B,eAAe,CAACv9B,GAAG,CAAC;IACzB,IAAI,CAACw9B,WAAW,EAAE;EACpB;EAEA;EACAlJ,UAAUA,CAAC2B,CAAS;IAClB,IAAI,CAACuF,KAAK,CAACiC,QAAQ,CAACxH,CAAC,CAAC;IACtB,IAAI,CAAC6G,WAAW,CAACxG,aAAa,EAAE;IAChC,IAAI,CAAC5I,iBAAiB,GAAC,IAAI,CAAC8N,KAAK,CAAC3f,MAAM,GAAC,CAAC;IAC1C,IAAG,IAAI,CAAC2f,KAAK,CAAC3f,MAAM,GAAC,CAAC,EAAC;MACrB,IAAI,CAAC0Y,OAAO,EAAE;;EAElB;EACAA,OAAOA,CAAA;IACL,IAAG,IAAI,CAACiH,KAAK,CAAC3f,MAAM,GAAC,CAAC,EAAC;MACrB,IAAI,CAAC2f,KAAK,CAACp4C,IAAI,CAAC,IAAI,CAACswB,EAAE,CAAC6H,OAAO,CAAC,EAAE,CAAC,CAAC;MACpC,IAAI,CAACmS,iBAAiB,GAAC,IAAI,CAAC8N,KAAK,CAAC3f,MAAM,GAAC,CAAC;MAC1C,IAAI,CAACihB,WAAW,CAACxG,aAAa,EAAE;;EAEpC;EACA7B,aAAaA,CAAA;IACX,IAAI,CAAC+G,KAAK,CAACp4C,IAAI,CAAC,IAAI,CAACswB,EAAE,CAAC6H,OAAO,CAAC,IAAI,CAACuhB,WAAW,CAACl7C,KAAK,CAAC45C,KAAK,CAAC,IAAI,CAAC9N,iBAAiB,CAAC,CAAC,CAAC;IACtF,IAAI,CAACoP,WAAW,CAACxG,aAAa,EAAE;EAClC;EACA,IAAIkF,KAAKA,CAAA;IACP,OAAkB,IAAI,CAACsB,WAAW,CAACthB,GAAG,CAAC,OAAO,CAAC;EACjD;EAEA;EACAgZ,eAAeA,CAACva,CAAK;IACnB,IAAI,CAACyT,iBAAiB,GAACzT,CAAC;EAC1B;EACAyjB,gBAAgBA,CAAA;IACd3gB,MAAM,CAAC4gB,SAAS,CAACC,SAAS,CAACC,SAAS,CAAC,GAAG,IAAI,CAACj2C,OAAO,CAACk2C,sBAAsB,KAAK,IAAI,CAACl2C,OAAO,CAACm2C,mBAAmB,KAAK,IAAI,CAACn2C,OAAO,CAACo2C,iBAAiB,KAAK,IAAI,CAACp2C,OAAO,CAACq2C,oBAAoB,EAAE,CAAC;IAC5L,IAAI,CAACvkB,QAAQ,CAACQ,IAAI,CAAC,kBAAkB,GAAG,GAAG,IAAI,CAACtyB,OAAO,CAACk2C,sBAAsB,KAAK,IAAI,CAACl2C,OAAO,CAACm2C,mBAAmB,KAAK,IAAI,CAACn2C,OAAO,CAACo2C,iBAAiB,KAAK,IAAI,CAACp2C,OAAO,CAACq2C,oBAAoB,EAAE,EAAG17C,SAAS,EAAE,IAAI,CAACs3B,wBAAwB,CAAC;EAC5O;EACAqkB,mBAAmBA,CAAA;IACjBnhB,MAAM,CAAC4gB,SAAS,CAACC,SAAS,CAACC,SAAS,CAAC,GAAG,IAAI,CAACj2C,OAAO,CAACu2C,oBAAoB,KAAK,IAAI,CAACv2C,OAAO,CAACw2C,iBAAiB,KAAK,IAAI,CAACx2C,OAAO,CAACy2C,eAAe,KAAK,IAAI,CAACz2C,OAAO,CAAC02C,kBAAkB,EAAE,CAAC;IACpL,IAAI,CAAC5kB,QAAQ,CAACQ,IAAI,CAAC,kBAAkB,GAAG,GAAG,IAAI,CAACtyB,OAAO,CAACu2C,oBAAoB,KAAK,IAAI,CAACv2C,OAAO,CAACw2C,iBAAiB,KAAK,IAAI,CAACx2C,OAAO,CAACy2C,eAAe,KAAK,IAAI,CAACz2C,OAAO,CAAC02C,kBAAkB,EAAE,EAAE/7C,SAAS,EAAE,IAAI,CAACs3B,wBAAwB,CAAC;EACnO;EAEA2jB,WAAWA,CAAA;IACT,IAAI,CAACL,aAAa,CAAC/1B,cAAc,EAAE,CAACvf,IAAI,CACtC4qB,yCAAG,CAAEuqB,YAAY,IAAI,CACrB,CAAC,CAAC,EACFxkB,+CAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAC1B,CAACtE,SAAS,CAAC;MACVC,IAAI,EAAGunB,YAAY,IAAI;QACrB1lB,OAAO,CAACC,GAAG,CAAC,cAAc,EAACylB,YAAY,CAAC;QACxC,IAAI,CAACA,YAAY,GAACA,YAAY,CAACuB,OAAO;MACxC,CAAC;MACDlpB,KAAK,EAAGD,GAAG,IAAI;QACbkC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MACjD;KACD,CAAC;EACJ;EAEA;EACAykB,OAAOA,CAACrzC,EAAS;IACf,IAAI,CAACu0C,UAAU,CAACtlC,YAAY,CAAC;MAACjP,EAAE,EAAEA;IAAE,CAAC,CAAC,CACnCd,IAAI,CACH4qB,yCAAG,CAAE+rB,IAAI,IAAG;MACV;MACA;MACA;IAAA,CACD,CAAC,EAAEhmB,+CAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAAC,CAC/BtE,SAAS,CAAC;MACTC,IAAI,EAAEA,CAAC;QAACvzB,IAAI;QAAEyzB;MAAI,CAAC,KAAI;QACrB,MAAM8oB,OAAO,GAAG,QAAQ,IAAI,CAACpB,YAAY,WAAW1nB,IAAI,EAAE;QAC1D,MAAMojB,CAAC,GAAG2F,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;QACrC5F,CAAC,CAAC6F,IAAI,GAAGH,OAAO;QAChB1F,CAAC,CAAC8F,QAAQ,GAAG38C,IAAK;QAClB62C,CAAC,CAAC+F,KAAK,EAAE;MACX,CAAC;MACDzpB,KAAK,EAAGD,GAAG,IAAI;QACb,IAAI,CAACsE,QAAQ,CAACQ,IAAI,CAAC,8BAA8B,GAAG9E,GAAG,CAACC,KAAK,CAAC+E,aAAa,EAAE73B,SAAS,EAAE,IAAI,CAACo3B,yBAAyB,CAAC;MAAA;KAC1H,CAAC;EACN;EAEA;EACQ4jB,eAAeA,CAACv9B,GAAO;IAC7B,IAAI,CAACi9B,cAAc,CAACh9B,YAAY,CAAC;MAACD,GAAG,EAACA;IAAG,CAAC,CAAC,CACxCnY,IAAI,CACH4qB,yCAAG,CAAE+oB,KAAK,IAAG;MACXlkB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEikB,KAAK,CAAC;MACrC,IAAI,CAACA,KAAK,EAAE,MAAO;QAAEnmB,KAAK,EAAE;UAAE+E,aAAa,EAAE;QAAsB;MAAE,CAAE;MACvE;MACAohB,KAAK,CAACA,KAAK,EAAExF,OAAO,CAAE/b,CAAK,IAAI;QAC7B,IAAI,CAACsa,OAAO,EAAE;QACd,IAAI,CAACuI,WAAW,CAAC3iB,UAAU,CAACqhB,KAAK,CAAC;MAEpC,CAAC,CAAC;IACJ,CAAC,CAAC,EACFhjB,+CAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAAC,CAC3BtE,SAAS,CAAC;MACTC,IAAI,EAAG+lB,KAAS,IAAI;QAClB,IAAI,CAAC1J,WAAW,GAAC0J,KAAK,CAAC/I,OAAO;QAC9B,IAAI,CAAC7qC,OAAO,GAAC4zC,KAAK;MACpB,CAAC;MACDnmB,KAAK,EAAGD,GAAG,IAAI;QACb,IAAI,CAACsE,QAAQ,CAACQ,IAAI,CAAC,GAAG9E,GAAG,CAACC,KAAK,CAAC+E,aAAa,IAAI,GAAGhF,GAAG,CAACC,KAAK,CAACuW,yBAAyB,EAAErpC,SAAS,EAAE,IAAI,CAACo3B,yBAAyB,CAAC;MACrI;KACD,CAAC;EACN;EACA;EACAolB,gBAAgBA,CAAA;IACdznB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACulB,WAAW,CAACl7C,KAAK,CAAC;IACnC,IAAI,CAACq7C,cAAc,CAAC78B,gBAAgB,CAAC;MAACzb,IAAI,EAAC,IAAI,CAACm4C,WAAW,CAACl7C;IAAK,CAAC,CAAC,CAChEiG,IAAI,CACH4qB,yCAAG,CAAEyK,GAAG,IAAG;MACT5F,OAAO,CAACC,GAAG,CAAC2F,GAAG,CAAC;MAChB,IAAI,CAACA,GAAG,EAAE;QACR,MAAO;UAAE7H,KAAK,EAAE;YAAE+E,aAAa,EAAE;UAAmB;QAAE,CAAE;;IAE5D,CAAC,CAAC,EACF5B,+CAAS,CAAC,IAAI,CAACsB,SAAS,CAAC,CAAC,CAC3BtE,SAAS,CAAC;MACTC,IAAI,EAAGyH,GAAO,IAAI;QAChB,IAAI,CAACxD,QAAQ,CAACQ,IAAI,CAChB,IAAI,CAAC4iB,WAAW,CAACl7C,KAAK,CAAC45C,KAAK,CAAC3f,MAAM,GAAC,CAAC,GACpC,iCAAiC,IAAI,CAACihB,WAAW,CAACl7C,KAAK,CAAC45C,KAAK,CAAC3f,MAAM,2BAA2B,GAC/F,wBAAwB,EACzBt5B,SAAS,EACT;UACEq3B,QAAQ,EAAE,IAAI;UACd4f,gBAAgB,EAAE,KAAK;UACvBC,kBAAkB,EAAE,QAAQ;UAC5BC,UAAU,EAAE,CAAC,mBAAmB,CAAC,CAAC;SACnC,CACF;QACD;MACF,CAAC;;MACDrkB,KAAK,EAAGD,GAAG,IAAI;QACb,IAAI,CAACsE,QAAQ,CAACQ,IAAI,CAAC,GAAG9E,GAAG,CAACC,KAAK,CAAC+E,aAAa,IAAI,GAAGhF,GAAG,CAACC,KAAK,CAACuW,yBAAyB,EAAErpC,SAAS,EAAE,IAAI,CAACo3B,yBAAyB,CAAC;MACrI;KACD,CAAC;EACN;;;uBAlLWlL,oBAAoB,EAAA1tB,+DAAA,CAAAE,2DAAA,GAAAF,+DAAA,CAAAG,uDAAA,GAAAH,+DAAA,CAAAg1B,gEAAA,GAAAh1B,+DAAA,CAAAk1B,oEAAA,GAAAl1B,+DAAA,CAAAg1B,6DAAA,GAAAh1B,+DAAA,CAAAg1B,+DAAA;IAAA;EAAA;;;YAApBtH,oBAAoB;MAAA0B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAA0uB,8BAAAxuB,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UClBjCzvB,4DAAA,aAAsB;UACpBA,uDAAA,UAEM;UACRA,0DAAA,EAAM;UAENA,4DAAA,aAA6B;UAC3BA,oDAAA,GACA;UAAAA,4DAAA,aAAsB;UACpBA,oDAAA,cACA;UAAAA,4DAAA,WAAM;UAAAA,oDAAA,GAAqB;UAAAA,0DAAA,EAAO;UAItCA,4DAAA,cAAkD;UAMdA,oDAAA,+BAAuB;UAAAA,0DAAA,EAAM;UAEzDA,4DAAA,cAA8B;UAEFA,oDAAA,gBAAQ;UAAAA,0DAAA,EAAM;UACtCA,4DAAA,eAAuB;UAEnBA,oDAAA,IAGF;UAAAA,0DAAA,EAAM;UACNA,4DAAA,eAA6B;UAAAA,oDAAA,IAAiC;UAAAA,0DAAA,EAAM;UAGtEA,4DAAA,eAAsB;UACZA,wDAAA,mBAAAk+C,uDAAA;YAAA,OAASxuB,GAAA,CAAAitB,gBAAA,EAAkB;UAAA,EAAC;UAAkB38C,oDAAA,YAAI;UAAAA,0DAAA,EAAS;UACnEA,4DAAA,aAGkB;UAChBA,oDAAA,gBACF;UAAAA,0DAAA,EAAI;UAMVA,4DAAA,cAA8B;UAEFA,oDAAA,mBAAW;UAAAA,0DAAA,EAAM;UACzCA,4DAAA,eAAuB;UAEnBA,oDAAA,IAGF;UAAAA,0DAAA,EAAM;UACNA,4DAAA,eAA6B;UAAAA,oDAAA,IAA+B;UAAAA,0DAAA,EAAM;UAEpEA,4DAAA,eAAsB;UACZA,wDAAA,mBAAAm+C,uDAAA;YAAA,OAASzuB,GAAA,CAAAytB,mBAAA,EAAqB;UAAA,EAAC;UAAkBn9C,oDAAA,YAAI;UAAAA,0DAAA,EAAS;UACtEA,4DAAA,aAIG;UAACA,oDAAA,gBACJ;UAAAA,0DAAA,EAAI;UAQZA,4DAAA,cAAsB;UAEQA,oDAAA,qBAAa;UAAAA,0DAAA,EAAM;UAE/CA,4DAAA,cAA8B;UAEFA,oDAAA,sBAAc;UAAAA,0DAAA,EAAM;UAC5CA,4DAAA,eAAuB;UAChBA,oDAAA,IAA4B;UAAAA,0DAAA,EAAM;UAG3CA,4DAAA,cAAuB;UACGA,oDAAA,mBAAW;UAAAA,0DAAA,EAAM;UACzCA,4DAAA,eAAuB;UAChBA,oDAAA,IAA8B;UAAAA,0DAAA,EAAM;UAK/CA,4DAAA,cAA8B;UAC5BA,wDAAA,KAAAo+C,oCAAA,kBAKM;UACNp+C,4DAAA,cAAuB;UACGA,oDAAA,iBAAS;UAAAA,0DAAA,EAAM;UACvCA,4DAAA,eAAuB;UAChBA,oDAAA,IAA4D;UAAAA,0DAAA,EAAM;UAK7EA,4DAAA,cAA8B;UAEFA,oDAAA,sBAAc;UAAAA,0DAAA,EAAM;UAC5CA,4DAAA,eAAuB;UAEnBA,oDAAA,IAA+B;UAAAA,4DAAA,YAAM;UAACA,oDAAA,aAAI;UAAAA,0DAAA,EAAO;UACjDA,4DAAA,gBAAoB;UAAAA,oDAAA,SAAC;UAAAA,0DAAA,EAAO;UAC5BA,oDAAA,IAAgC;UAAAA,4DAAA,YAAM;UAACA,oDAAA,UAAC;UAAAA,4DAAA,eAAiB;UAAAA,oDAAA,SAAC;UAAAA,0DAAA,EAAM;UAChEA,4DAAA,gBAAoB;UAAAA,oDAAA,SAAC;UAAAA,0DAAA,EAAO;UAC5BA,oDAAA,IAAgC;UAAAA,4DAAA,YAAM;UAACA,oDAAA,WAAE;UAAAA,0DAAA,EAAO;UAChDA,4DAAA,gBAAoB;UAAAA,oDAAA,SAAC;UAAAA,0DAAA,EAAO;UAC5BA,oDAAA,IAAmD;;UAAAA,4DAAA,YAAM;UAACA,oDAAA,aAAI;UAAAA,4DAAA,eAAiB;UAAAA,oDAAA,SAAC;UAAAA,0DAAA,EAAM;UAM9FA,wDAAA,KAAAq+C,oCAAA,kBAOM;UAERr+C,0DAAA,EAAM;UAENA,4DAAA,eAAqE;UACvCA,oDAAA,kBAAU;UAAAA,0DAAA,EAAM;UAC5CA,4DAAA,oBAAuD;UAAAA,oDAAA,KAA6B;UAAAA,0DAAA,EAAW;UAKnGA,wDAAA,MAAAs+C,qCAAA,kBAGM;UAENt+C,wDAAA,MAAAu+C,qCAAA,kBAiBM;UAENv+C,4DAAA,gBAAiD;UAC/CA,wDAAA,MAAAw+C,qCAAA,mBAiBM;UACRx+C,0DAAA,EAAM;UAENA,4DAAA,gBAAqE;UACtBA,wDAAA,mBAAAy+C,wDAAA;YAAA,OAAS/uB,GAAA,CAAAsuB,gBAAA,EAAkB;UAAA,EAAC;UACvEh+C,uDAAA,iBAAyC;UACzCA,oDAAA,qBACF;UAAAA,0DAAA,EAAS;;;UAxLbA,uDAAA,GACA;UADAA,gEAAA,qBAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAe,EAAA,MACA;UAEQ5H,uDAAA,GAAqB;UAArBA,+DAAA,CAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAA63C,QAAA,CAAqB;UAIP1+C,uDAAA,GAAyB;UAAzBA,wDAAA,cAAA0vB,GAAA,CAAAqsB,WAAA,CAAyB;UAajC/7C,uDAAA,IAGF;UAHEA,gEAAA,MAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAk2C,sBAAA,QAAArtB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAm2C,mBAAA,QAAAttB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAo2C,iBAAA,MAGF;UAC6Bj9C,uDAAA,GAAiC;UAAjCA,+DAAA,CAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAq2C,oBAAA,CAAiC;UAO5Dl9C,uDAAA,GAAgM;UAAhMA,oEAAA,6DAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAk2C,sBAAA,OAAArtB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAm2C,mBAAA,OAAAttB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAo2C,iBAAA,OAAAvtB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAq2C,oBAAA,MAAAl9C,2DAAA,CAAgM;UAchMA,uDAAA,GAGF;UAHEA,gEAAA,MAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAu2C,oBAAA,QAAA1tB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAw2C,iBAAA,QAAA3tB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAy2C,eAAA,MAGF;UAC6Bt9C,uDAAA,GAA+B;UAA/BA,+DAAA,CAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAA02C,kBAAA,CAA+B;UAM1Dv9C,uDAAA,GAAwL;UAAxLA,oEAAA,6DAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAu2C,oBAAA,OAAA1tB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAw2C,iBAAA,OAAA3tB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAy2C,eAAA,OAAA5tB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAA02C,kBAAA,MAAAv9C,2DAAA,CAAwL;UAmBrLA,uDAAA,IAA4B;UAA5BA,+DAAA,CAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAg4C,eAAA,CAA4B;UAM5B7+C,uDAAA,GAA8B;UAA9BA,+DAAA,CAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAi4C,iBAAA,CAA8B;UAMf9+C,uDAAA,GAA8B;UAA9BA,wDAAA,SAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAA+zC,eAAA,CAA8B;UAS7C56C,uDAAA,GAA4D;UAA5DA,gEAAA,KAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAk4C,cAAA,OAAArvB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAm4C,mBAAA,KAA4D;UAU/Dh/C,uDAAA,GAA+B;UAA/BA,gEAAA,MAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAo4C,kBAAA,KAA+B;UAE/Bj/C,uDAAA,GAAgC;UAAhCA,gEAAA,MAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAq4C,mBAAA,KAAgC;UAEhCl/C,uDAAA,GAAgC;UAAhCA,gEAAA,MAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAs4C,mBAAA,KAAgC;UAEhCn/C,uDAAA,GAAmD;UAAnDA,gEAAA,MAAAA,yDAAA,SAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAw4C,oBAAA,eAAmD;UAM5Br/C,uDAAA,GAAuC;UAAvCA,wDAAA,SAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAg0C,wBAAA,CAAuC;UAaf76C,uDAAA,GAA6B;UAA7BA,+DAAA,CAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAy4C,gBAAA,CAA6B;UAKjEt/C,uDAAA,GAAsB;UAAtBA,wDAAA,SAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAAwtC,OAAA,CAAsB;UAKtBr0C,uDAAA,GAAwE;UAAxEA,wDAAA,UAAA0vB,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAA20C,cAAA,kBAAA9rB,GAAA,CAAA7oB,OAAA,CAAA20C,cAAA,CAAA1gB,MAAA,UAAApL,GAAA,CAAA7oB,OAAA,kBAAA6oB,GAAA,CAAA7oB,OAAA,CAAA40C,UAAA,kBAAA/rB,GAAA,CAAA7oB,OAAA,CAAA40C,UAAA,CAAA3gB,MAAA,MAAwE;UAoBvE96B,uDAAA,GAAmB;UAAnBA,wDAAA,YAAA0vB,GAAA,CAAA+qB,KAAA,CAAAlmB,QAAA,CAAmB;;;;;;;;;;;;;;;;;;;;;;;;AClKzC,MAAOwkB,mBAAmB;EAE9Bt5C,YAAA,GAAgB;EAEhB;;;;;EAKA+3C,YAAYA,CAAC1yC,MAA8C;IACzD,MAAMy6C,OAAO,GAAG,IAAI,CAACC,iBAAiB,CAAC16C,MAAM,CAAC;IAC9C,MAAMyyC,GAAG,GAAGgI,OAAO,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK,IAAI,CAACC,WAAW,CAACF,GAAG,EAAEC,IAAI,CAAC,EAAE,CAAC,CAAC;IACzE,OAAO,IAAI,CAACE,mBAAmB,CAACtI,GAAG,CAAC;EACtC;EAEA;;;;;EAKAuI,gBAAgBA,CAACh7C,MAA8C;IAC7D,MAAMy6C,OAAO,GAAG,IAAI,CAACC,iBAAiB,CAAC16C,MAAM,CAAC;IAE9C;IACA,IAAIy6C,OAAO,CAACzkB,MAAM,KAAK,CAAC,IAAIykB,OAAO,CAACjlB,KAAK,CAACia,GAAG,IAAIA,GAAG,KAAK,CAAC,CAAC,EAAE;MAC3D,OAAO,CAAC;;IAGV,MAAMwL,OAAO,GAAGR,OAAO,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK,IAAI,CAACK,gBAAgB,CAACN,GAAG,EAAEC,IAAI,CAAC,EAAE,CAAC,CAAC;IAClF,OAAO,IAAI,CAACE,mBAAmB,CAACE,OAAO,CAAC;EAC1C;EAEA;;;;;;;EAOAzI,aAAaA,CACXjC,KAAyC,EACzCx0C,KAAyC,EACzCO,OAAA,GAA0E,EAAE;IAE5E,MAAM6+C,QAAQ,GAAG,IAAI,CAACC,oBAAoB,CAAC7K,KAAK,CAAC;IACjD,MAAM8K,QAAQ,GAAG,IAAI,CAACD,oBAAoB,CAACr/C,KAAK,CAAC;IACjD,MAAMu/C,MAAM,GAAGh/C,OAAO,CAACilC,GAAG,KAAK7kC,SAAS,GAAG,IAAI,CAAC0+C,oBAAoB,CAAC9+C,OAAO,CAACilC,GAAG,CAAC,GAAG7kC,SAAS;IAC7F,MAAM6+C,MAAM,GAAGj/C,OAAO,CAACg0C,GAAG,KAAK5zC,SAAS,GAAG,IAAI,CAAC0+C,oBAAoB,CAAC9+C,OAAO,CAACg0C,GAAG,CAAC,GAAG5zC,SAAS;IAE7F;IACA,IAAIy+C,QAAQ,KAAK,CAAC,IAAIE,QAAQ,KAAK,CAAC,EAAE;MACpC,OAAO,CAAC;;IAGV,IAAIt9C,MAAM,GAAG,IAAI,CAACm9C,gBAAgB,CAACC,QAAQ,EAAEE,QAAQ,CAAC;IAEtD;IACA,IAAIC,MAAM,KAAK5+C,SAAS,IAAI4+C,MAAM,KAAK,CAAC,IAAIv9C,MAAM,GAAGu9C,MAAM,EAAE;MAC3Dv9C,MAAM,GAAGu9C,MAAM;;IAGjB;IACA,IAAIC,MAAM,KAAK7+C,SAAS,IAAI6+C,MAAM,KAAK,CAAC,EAAE;MACxCx9C,MAAM,GAAG,IAAI,CAAC+8C,WAAW,CAAC/8C,MAAM,EAAEw9C,MAAM,CAAC;;IAG3C,OAAO,IAAI,CAACR,mBAAmB,CAACh9C,MAAM,CAAC;EACzC;EAEA;EAEA;;;EAGQ+8C,WAAWA,CAAC5H,CAAS,EAAEC,CAAS;IACtC,MAAMqI,SAAS,GAAG,CAACtI,CAAC,CAACuI,QAAQ,EAAE,CAACx+C,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE+4B,MAAM;IAC3D,MAAM0lB,SAAS,GAAG,CAACvI,CAAC,CAACsI,QAAQ,EAAE,CAACx+C,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE+4B,MAAM;IAC3D,MAAM2lB,WAAW,GAAG5sB,IAAI,CAAC6sB,GAAG,CAACJ,SAAS,EAAEE,SAAS,CAAC;IAClD,MAAMG,MAAM,GAAG9sB,IAAI,CAAC+sB,GAAG,CAAC,EAAE,EAAEH,WAAW,CAAC;IAExC,OAAO,CAACzI,CAAC,GAAG2I,MAAM,GAAG1I,CAAC,GAAG0I,MAAM,IAAIA,MAAM;EAC3C;EAEA;;;EAGQX,gBAAgBA,CAAChI,CAAS,EAAEC,CAAS;IAC3C,MAAMqI,SAAS,GAAG,CAACtI,CAAC,CAACuI,QAAQ,EAAE,CAACx+C,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE+4B,MAAM;IAC3D,MAAM0lB,SAAS,GAAG,CAACvI,CAAC,CAACsI,QAAQ,EAAE,CAACx+C,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE+4B,MAAM;IAC3D,MAAM6lB,MAAM,GAAG9sB,IAAI,CAAC+sB,GAAG,CAAC,EAAE,EAAEN,SAAS,GAAGE,SAAS,CAAC;IAElD,MAAMK,IAAI,GAAG7I,CAAC,GAAGnkB,IAAI,CAAC+sB,GAAG,CAAC,EAAE,EAAEN,SAAS,CAAC;IACxC,MAAMQ,IAAI,GAAG7I,CAAC,GAAGpkB,IAAI,CAAC+sB,GAAG,CAAC,EAAE,EAAEJ,SAAS,CAAC;IAExC,OAAQK,IAAI,GAAGC,IAAI,GAAIH,MAAM;EAC/B;EAEA;;;EAGQd,mBAAmBA,CAACtL,GAAW;IACrC;IACA,IAAIwM,MAAM,CAACC,SAAS,CAACzM,GAAG,CAAC,EAAE;MACzB,OAAOA,GAAG;;IAEZ,OAAO0M,UAAU,CAAC,CAACptB,IAAI,CAACqtB,KAAK,CAAC,CAAC3M,GAAG,GAAGwM,MAAM,CAACI,OAAO,IAAI,GAAG,CAAC,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;EAChF;EAEA;;;EAGQ5B,iBAAiBA,CAAC16C,MAA8C;IACtE,OAAOA,MAAM,CAACjD,GAAG,CAAChB,KAAK,IAAI,IAAI,CAACq/C,oBAAoB,CAACr/C,KAAK,CAAC,CAAC;EAC9D;EAEA;;;EAGQq/C,oBAAoBA,CAACr/C,KAAyC;IACpE,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKW,SAAS,IAAIX,KAAK,KAAK,EAAE,EAAE;MACzD,OAAO,CAAC;;IAGV;IACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAOA,KAAK;;IAGd;IACA,MAAMwgD,YAAY,GAAGxgD,KAAK,CAAC0/C,QAAQ,EAAE,CAClC39C,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAClBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAErB,MAAM2xC,GAAG,GAAG0M,UAAU,CAACI,YAAY,CAAC;IACpC,OAAOC,KAAK,CAAC/M,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;EAC7B;;;uBAvIWwE,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAAz5C,OAAA,EAAnBy5C,mBAAmB,CAAAx5C,IAAA;MAAAI,UAAA,EAFlB;IAAM;EAAA;;;;;;;;;;;;;;;;;;;ACFmB;AACK;AACF;;AAKpC,MAAOwvB,aAAa;EAH1B1vB,YAAA;IAIU,KAAAi/B,cAAc,GAAa,EAAE;IAC7B,KAAAR,SAAS,GAAG,IAAIO,iDAAe,CAAU,IAAI,CAAC;IACtD,KAAAJ,UAAU,GAAG,IAAI,CAACH,SAAS,CAACU,YAAY,EAAE;;EAE1C;EACA4iB,YAAYA,CAAIC,cAAkD;IAChE;IACA,MAAMC,WAAW,GAAGx/C,MAAM,CAACC,IAAI,CAACs/C,cAAc,CAAC;IAC/C,IAAI,CAACE,WAAW,CAACD,WAAW,CAAC;IAE7B;IACA,MAAME,eAAe,GAAG,EAAwC;IAEhE,KAAK,MAAMlhD,GAAG,IAAIghD,WAAW,EAAE;MAC7BE,eAAe,CAAClhD,GAAG,CAAC,GAAG+gD,cAAc,CAAC/gD,GAAG,CAAC,CAACoG,IAAI,CAC7C2qB,wDAAQ,CAAC,MAAM,IAAI,CAACowB,aAAa,CAACnhD,GAAG,CAAC,CAAC,CACxC;;IAGH;IACA,OAAO6gD,8CAAQ,CAACK,eAAe,CAAkB;EACnD;EAEQD,WAAWA,CAACx/C,IAAc;IAChC,IAAI,CAACu8B,cAAc,GAAG,CAAC,GAAG,IAAI,CAACA,cAAc,EAAE,GAAGv8B,IAAI,CAAC;IACvD,IAAI,CAAC2/C,kBAAkB,EAAE;IACzB;EACF;;EAEQD,aAAaA,CAACnhD,GAAW;IAC/B,IAAI,CAACg+B,cAAc,GAAG,IAAI,CAACA,cAAc,CAACj4B,MAAM,CAACs7C,CAAC,IAAIA,CAAC,KAAKrhD,GAAG,CAAC;IAChE,IAAI,CAACohD,kBAAkB,EAAE;IACzB;EACF;;EAEQA,kBAAkBA,CAAA;IACxB,MAAME,eAAe,GAAG,IAAI,CAACtjB,cAAc,CAAC5D,MAAM,GAAG,CAAC;IACtD,IAAIknB,eAAe,KAAK,IAAI,CAAC9jB,SAAS,CAACr9B,KAAK,EAAE;MAC5C,IAAI,CAACq9B,SAAS,CAACxJ,IAAI,CAACstB,eAAe,CAAC;;IAEtC;EACF;;;;uBA1CW7yB,aAAa;IAAA;EAAA;;;aAAbA,aAAa;MAAA7vB,OAAA,EAAb6vB,aAAa,CAAA5vB,IAAA;MAAAI,UAAA,EAFZ;IAAM;EAAA;;;;;;;;;;;;;;;;;;ACJ2C;AACvB;;;AAUlC,MAAOmiC,wBAAwB;EAInCriC,YAAoBmzB,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAHlB,KAAAsvB,OAAO,GAA6B,EAAE;IACtC,KAAAC,gBAAgB,GAAG,EAAE;IAG3B,IAAI,CAACC,uBAAuB,EAAE;EAChC;EAEQA,uBAAuBA,CAAA;IAC7B,IAAI,CAACxvB,MAAM,CAACyvB,MAAM,CACfv7C,IAAI,CACHL,sDAAM,CAAEk0B,KAAY,IAA6BA,KAAK,YAAYsnB,0DAAa,CAAC,CACjF,CACAxtB,SAAS,CAAEkG,KAAoB,IAAI;MAClC,IAAI,CAAC2nB,YAAY,CAAC3nB,KAAK,CAAC4nB,iBAAiB,CAAC;MAC1C,IAAI,CAACC,qBAAqB,EAAE;IAC9B,CAAC,CAAC;EACN;EAEQF,YAAYA,CAACG,OAAe;IAClC,IAAI,CAAC,IAAI,CAACC,gBAAgB,CAACD,OAAO,CAAC,EAAE;MACnC;;IAGF;IACA,MAAME,iBAAiB,GAAG,IAAI,CAACC,iBAAiB,CAACH,OAAO,CAAC;IAEzD;IACA,IAAI,IAAI,CAACI,UAAU,CAACF,iBAAiB,CAAC,EAAE;MACtC;MACA,IAAI,CAACG,eAAe,CAACL,OAAO,CAAC;MAC7B;;IAGF;IACA,MAAMM,eAAe,GAA2B;MAC9Ch+C,GAAG,EAAE09C,OAAO;MACZO,SAAS,EAAE,IAAI9lB,IAAI;KACpB;IAED,IAAI,CAACglB,OAAO,CAAC7/C,IAAI,CAAC0gD,eAAe,CAAC;IAElC,IAAI,IAAI,CAACb,OAAO,CAACpnB,MAAM,GAAG,IAAI,CAACqnB,gBAAgB,EAAE;MAC/C,IAAI,CAACD,OAAO,CAACe,KAAK,EAAE;;EAExB;EAEQP,gBAAgBA,CAAC39C,GAAW;IAClC,OAAOA,GAAG,CAACm+C,UAAU,CAAC,QAAQ,CAAC,IAAIn+C,GAAG,KAAK,QAAQ;EACrD;EAEQ69C,iBAAiBA,CAAC79C,GAAW;IACnC,OAAOA,GAAG,CAAChD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1B;EAEQ8gD,UAAUA,CAACM,WAAmB;IACpC,IAAI,IAAI,CAACjB,OAAO,CAACpnB,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;IAE3C,MAAMsoB,SAAS,GAAG,IAAI,CAAClB,OAAO,CAAC,IAAI,CAACA,OAAO,CAACpnB,MAAM,GAAG,CAAC,CAAC;IACvD,MAAMuoB,aAAa,GAAG,IAAI,CAACT,iBAAiB,CAACQ,SAAS,CAACr+C,GAAG,CAAC;IAC3D,OAAOs+C,aAAa,KAAKF,WAAW;EACtC;EAEQL,eAAeA,CAACQ,MAAc;IACpC,IAAI,IAAI,CAACpB,OAAO,CAACpnB,MAAM,GAAG,CAAC,EAAE;MAC3B,IAAI,CAAConB,OAAO,CAAC,IAAI,CAACA,OAAO,CAACpnB,MAAM,GAAG,CAAC,CAAC,CAAC/1B,GAAG,GAAGu+C,MAAM;MAClD,IAAI,CAACpB,OAAO,CAAC,IAAI,CAACA,OAAO,CAACpnB,MAAM,GAAG,CAAC,CAAC,CAACkoB,SAAS,GAAG,IAAI9lB,IAAI,EAAE;;EAEhE;EAEQslB,qBAAqBA,CAAA;IAC3BjsB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE,IAAI,CAAC0rB,OAAO,CAAC;EAC3D;EAEA;;;;EAIAvgB,IAAIA,CAAC4hB,WAAmB;IACtB,IAAI,IAAI,CAACrB,OAAO,CAACpnB,MAAM,GAAG,CAAC,EAAE;MAC3B;MACA,IAAI,CAAConB,OAAO,CAACsB,GAAG,EAAE;MAElB;MACA,MAAMC,aAAa,GAAG,IAAI,CAACvB,OAAO,CAAC,IAAI,CAACA,OAAO,CAACpnB,MAAM,GAAG,CAAC,CAAC;MAC3D,IAAI,CAAClI,MAAM,CAACgE,aAAa,CAAC6sB,aAAa,CAAC1+C,GAAG,CAAC;KAC7C,MAAM,IAAI,IAAI,CAACm9C,OAAO,CAACpnB,MAAM,KAAK,CAAC,EAAE;MACpC;MACA,IAAI,CAAConB,OAAO,CAACsB,GAAG,EAAE;MAClB,IAAI,CAAC5wB,MAAM,CAACgE,aAAa,CAAC2sB,WAAW,CAAC;KACvC,MAAM;MACL;MACA,IAAI,CAAC3wB,MAAM,CAACgE,aAAa,CAAC2sB,WAAW,CAAC;;EAE1C;EAEA;;;EAGAG,UAAUA,CAAA;IACR,OAAO,CAAC,GAAG,IAAI,CAACxB,OAAO,CAAC;EAC1B;EAEA;;;EAGAyB,YAAYA,CAAA;IACV,OAAO,IAAI,CAACzB,OAAO,CAACpnB,MAAM,GAAG,CAAC,GAAG,IAAI,CAAConB,OAAO,CAAC,IAAI,CAACA,OAAO,CAACpnB,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;EAC/E;EAEA;;;EAGA8oB,YAAYA,CAAA;IACV,IAAI,CAAC1B,OAAO,GAAG,EAAE;IACjB3rB,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C;EAEA;;;EAGAqtB,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAC3B,OAAO,CAACpnB,MAAM;EAC5B;;;uBA3HWgH,wBAAwB,EAAA9hC,sDAAA,CAAAE,mDAAA;IAAA;EAAA;;;aAAxB4hC,wBAAwB;MAAAxiC,OAAA,EAAxBwiC,wBAAwB,CAAAviC,IAAA;MAAAI,UAAA,EAFvB;IAAM;EAAA;;;;;;;;;;;;;;;;;;ACV4C;AAEJ;;AAgBtD,MAAOqkD,gBAAgB;;;uBAAhBA,gBAAgB;IAAA;EAAA;;;YAAhBA;IAAgB;EAAA;;;;;;sHAAhBA,gBAAgB;IAAA7yB,YAAA,GAXzB2yB,yEAAoB,EACpBC,qEAAkB;IAAAl1B,OAAA,GAMlBi1B,yEAAoB,EACpBC,qEAAkB;EAAA;AAAA;;;;;;;;;;;;;;;;ACVhB,MAAOA,kBAAkB;EAG7BtkD,YAAoBsoC,EAAc;IAAd,KAAAA,EAAE,GAAFA,EAAE;IAFC,KAAAkc,KAAK,GAAW,cAAc;EAEhB;EAErCh1B,QAAQA,CAAA;IACN,IAAI,CAACi1B,WAAW,EAAE;EACpB;EAEQA,WAAWA,CAAA;IACjB,MAAMzc,OAAO,GAAG,IAAI,CAACM,EAAE,CAACJ,aAAa;IAErC;IACAF,OAAO,CAAClmC,KAAK,CAAC4iD,WAAW,CAAC,cAAc,EAAE,IAAI,CAACF,KAAK,CAAC;IAErD;IACAxc,OAAO,CAAC2c,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC;EACvC;;;uBAjBWN,kBAAkB,EAAA/jD,+DAAA,CAAAA,qDAAA;IAAA;EAAA;;;YAAlB+jD,kBAAkB;MAAA30B,SAAA;MAAA2S,MAAA;QAAAkiB,KAAA;MAAA;IAAA;EAAA;;;;;;;;;;;;;;;;;ACAzB,MAAOH,oBAAoB;EAO/BrkD,YAAoBgoC,OAAsC;IAAtC,KAAAA,OAAO,GAAPA,OAAO;IANF,KAAA6c,WAAW,GAAW,EAAE;IACzC,KAAAC,cAAc,GAAG,KAAK;IACtB,KAAAC,cAAc,GAA0B,IAAI;IAC5C,KAAAC,gBAAgB,GAA4B,IAAI;IAChD,KAAAC,UAAU,GAAW,CAAC;IAG5B,IAAI,CAACjd,OAAO,CAACE,aAAa,CAACgd,gBAAgB,CAAC,MAAM,EAAE,MAAK;MACvDpuB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAI,CAAC+tB,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACK,MAAM,EAAE;MACb,IAAI,CAACC,mBAAmB,EAAE;IAC5B,CAAC,CAAC;EACJ;EAEA1e,WAAWA,CAACC,OAAY;IACtB7P,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC8tB,WAAW,CAAC;IAEnD,IAAIle,OAAO,CAACke,WAAW,EAAE;MACvB,IAAI,CAACA,WAAW,GAAGle,OAAO,CAACke,WAAW,CAACQ,YAAY;;IAGrD,IAAI,IAAI,CAACP,cAAc,IAAI,IAAI,CAACD,WAAW,EAAE;MAC3C/tB,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/B,IAAI,CAACouB,MAAM,EAAE;;EAEjB;EAEQA,MAAMA,CAAA;IACZ,MAAMG,MAAM,GAAG,IAAI,CAACtd,OAAO,CAACE,aAAa;IACzC,MAAMqd,GAAG,GAAGD,MAAM,CAACE,eAAe;IAClC,IAAI,CAACD,GAAG,EAAE;IAEV;IACA,IAAIzjD,KAAK,GAAGyjD,GAAG,CAACE,cAAc,CAAC,uBAAuB,CAAC;IACvD,IAAI,CAAC3jD,KAAK,EAAE;MACVA,KAAK,GAAGyjD,GAAG,CAACpH,aAAa,CAAC,OAAO,CAAC;MAClCr8C,KAAK,CAACqG,EAAE,GAAG,uBAAuB;MAClCo9C,GAAG,CAACG,IAAI,CAACC,WAAW,CAAC7jD,KAAK,CAAC;;IAG7B;IACAA,KAAK,CAAC8jD,WAAW,GAAG;gBACR,IAAI,CAACf,WAAW;;;UAGtB,IAAI,CAACA,WAAW;;;;UAIhB,IAAI,CAACA,WAAW;;KAErB;IAED;IACA,MAAMgB,UAAU,GAAGN,GAAG,CAACO,aAAa,CAAC,aAAa,CAAC;IACnD,IAAID,UAAU,EAAE;MACd,MAAME,UAAU,GAAGF,UAAyB;MAE5C;MACA,IAAI,CAAChB,WAAW,CAACviD,KAAK,CAAC,GAAG,CAAC,CAACkzC,OAAO,CAAC1zC,KAAK,IAAG;QAC1C,MAAM,CAACkkD,QAAQ,EAAE5kD,KAAK,CAAC,GAAGU,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC;QAC1C,IAAI0jD,QAAQ,IAAI5kD,KAAK,EAAE;UACrB2kD,UAAU,CAACjkD,KAAK,CAAC4iD,WAAW,CAACsB,QAAQ,CAACC,IAAI,EAAE,EAAE7kD,KAAK,CAAC6kD,IAAI,EAAE,CAAC;;MAE/D,CAAC,CAAC;MAEF;MACAF,UAAU,CAACpB,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;;;IAGzC9tB,OAAO,CAACC,GAAG,CAAC,0DAA0D,CAAC;EACzE;EAEQquB,mBAAmBA,CAAA;IACzB,MAAME,MAAM,GAAG,IAAI,CAACtd,OAAO,CAACE,aAAa;IACzC,MAAMqd,GAAG,GAAGD,MAAM,CAACE,eAAe;IAClC,IAAI,CAACD,GAAG,EAAE;IAEV,MAAMW,aAAa,GAAGX,GAAG,CAACO,aAAa,CAAC,iBAAiB,CAAgB;IACzE,IAAI,CAACI,aAAa,EAAE;MAClBpvB,OAAO,CAACqvB,IAAI,CAAC,qCAAqC,CAAC;MACnD;;IAGF;IACA,MAAMC,kBAAkB,GAAGA,CAAA,KAAK;MAC9B,MAAMC,gBAAgB,GAAGH,aAAa,CAACI,YAAY;MACnD,MAAMC,SAAS,GAAGF,gBAAgB,GAAG,CAAC,CAAC,CAAC;MAExC;MACA,IAAI,IAAI,CAACpB,UAAU,KAAKsB,SAAS,EAAE;QACjC,IAAI,CAACtB,UAAU,GAAGsB,SAAS;QAC3BjB,MAAM,CAACxjD,KAAK,CAAC0kD,MAAM,GAAGD,SAAS,GAAG,IAAI;QACtCzvB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEwvB,SAAS,CAAC;;IAEpD,CAAC;IAED;IACA,IAAI,gBAAgB,IAAIhqB,MAAM,EAAE;MAC9B,IAAI,CAACwoB,cAAc,GAAG,IAAI0B,cAAc,CAAC,MAAK;QAC5CL,kBAAkB,EAAE;MACtB,CAAC,CAAC;MACF,IAAI,CAACrB,cAAc,CAAC2B,OAAO,CAACR,aAAa,CAAC;;IAG5C;IACA,IAAI,CAAClB,gBAAgB,GAAG,IAAI2B,gBAAgB,CAAC,MAAK;MAChDP,kBAAkB,EAAE;IACtB,CAAC,CAAC;IAEF,IAAI,CAACpB,gBAAgB,CAAC0B,OAAO,CAACR,aAAa,EAAE;MAC3CU,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,IAAI;MAChBC,aAAa,EAAE;KAChB,CAAC;IAEF;IACA,IAAI,CAAC/B,gBAAgB,CAAC0B,OAAO,CAACnB,GAAG,CAACphD,IAAI,EAAE;MACtCyiD,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;KACV,CAAC;IAEF;IACAznB,UAAU,CAAC,MAAMgnB,kBAAkB,EAAE,EAAE,GAAG,CAAC;IAE3C;IACAd,MAAM,CAAC0B,aAAa,EAAE9B,gBAAgB,CAAC,QAAQ,EAAEkB,kBAAkB,CAAC;EACtE;EAEAryB,WAAWA,CAAA;IACT;IACA,IAAI,CAACgxB,cAAc,EAAEkC,UAAU,EAAE;IACjC,IAAI,CAACjC,gBAAgB,EAAEiC,UAAU,EAAE;EACrC;;;uBAxIW5C,oBAAoB,EAAA9jD,+DAAA,CAAAA,qDAAA;IAAA;EAAA;;;YAApB8jD,oBAAoB;MAAA10B,SAAA;MAAA2S,MAAA;QAAAuiB,WAAA;MAAA;MAAA9d,QAAA,GAAAxmC,kEAAA;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;ACLc;AACL;AACuB;AACI;;AAmB/D,MAAO4wB,YAAY;;;uBAAZA,YAAY;IAAA;EAAA;;;YAAZA;IAAY;EAAA;;;gBAbrB+1B,mDAAQ,EACR3C,0EAAgB,EAChB5yB,+EAAc,EAIdC,yDAAY,EACZs1B,mDAAQ,EACR3C,0EAAgB,EAChB5yB,+EAAc;IAAA;EAAA;;;sHAILR,YAAY;IAAAhC,OAAA,GAbrB+3B,mDAAQ,EACR3C,0EAAgB,EAChB5yB,+EAAc;IAAAvC,OAAA,GAIdwC,yDAAY,EACZs1B,mDAAQ,EACR3C,0EAAgB,EAChB5yB,+EAAc;EAAA;AAAA;;;;;;;;;;;;;;;;ACnB6B;;AAczC,MAAOw1B,kBAAkB;;;uBAAlBA,kBAAkB;IAAA;EAAA;;;YAAlBA;IAAkB;EAAA;;;gBAN3Bv1B,yDAAY;IAAA;EAAA;;;sHAMHu1B,kBAAkB;IAAAh4B,OAAA,GAN3ByC,yDAAY;EAAA;AAAA;;;;;;;;;;;;;;;;;;;ACP4C;AACH;AACA;AACV;;AAiBzC,MAAO21B,SAAS;;;uBAATA,SAAS;IAAA;EAAA;;;YAATA;IAAS;EAAA;;;gBARlB31B,yDAAY;IAAA;EAAA;;;sHAQH21B,SAAS;IAAA71B,YAAA,GAblB01B,qEAAe,EACfC,kEAAc,EACdC,kEAAc;IAAAn4B,OAAA,GAGdyC,yDAAY;IAAAxC,OAAA,GAGZg4B,qEAAe,EACfC,kEAAc,EACdC,kEAAc;EAAA;AAAA;;;;;;;;;;;;;;;;AClBmE;;;;;;ICArF/mD,4DAAA,aAGoC;IAAlCA,wDAAA,mBAAAinD,oDAAAtrB,MAAA;MAAA37B,2DAAA,CAAAknD,GAAA;MAAA,MAAAzuB,MAAA,GAAAz4B,2DAAA;MAAA,OAASA,yDAAA,CAAAy4B,MAAA,CAAA0uB,eAAA,CAAAxrB,MAAA,CAAuB;IAAA,EAAC;IACjC37B,4DAAA,aAA4B;IAC1BA,0DAAA,GAAyB;IAC3BA,0DAAA,EAAM;;;;ADCF,MAAO6mD,eAAe;EAL5BpnD,YAAA;IAMW,KAAAu+B,IAAI,GAAY,KAAK;IACpB,KAAAopB,MAAM,GAAG,IAAItoB,uDAAY,EAAQ;;EAG3CuoB,QAAQA,CAAA;IACN,IAAI,CAACC,KAAK,EAAE;EACd;EAEAA,KAAKA,CAAA;IACH,IAAI,CAACF,MAAM,CAAC1lB,IAAI,EAAE;EACpB;EAEAylB,eAAeA,CAACxsB,KAAiB;IAC/B,IAAIA,KAAK,CAACE,MAAM,KAAKF,KAAK,CAAC4sB,aAAa,EAAE;MACxC,IAAI,CAACD,KAAK,EAAE;;EAEhB;;;uBAjBWT,eAAe;IAAA;EAAA;;;YAAfA,eAAe;MAAAz3B,SAAA;MAAA6Z,YAAA,WAAAue,6BAAA/3B,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;mBAAfC,GAAA,CAAA23B,QAAA,EAAU;UAAA,UAAArnD,+DAAA;;;;;;;;;;;;;;;;UCPvBA,wDAAA,IAAA0nD,8BAAA,iBAOM;;;UALH1nD,wDAAA,SAAA0vB,GAAA,CAAAsO,IAAA,CAAU;;;;;;;;;;;;;;;;;;;;;;;ACF8G;;;;;;ICGzHh+B,4DAAA,aAGgD;IAClBA,wDAAA,mBAAA2nD,mDAAAhsB,MAAA;MAAA37B,2DAAA,CAAAknD,GAAA;MAAA,MAAAzuB,MAAA,GAAAz4B,2DAAA;MAAA,OAASA,yDAAA,CAAAy4B,MAAA,CAAA0uB,eAAA,CAAAxrB,MAAA,CAAuB;IAAA,EAAC;IAAC37B,0DAAA,EAAM;IACpEA,4DAAA,aAA4D;IAAjCA,wDAAA,mBAAA4nD,mDAAAjsB,MAAA;MAAA37B,2DAAA,CAAAknD,GAAA;MAAA,MAAAnmB,MAAA,GAAA/gC,2DAAA;MAAA,OAASA,yDAAA,CAAA+gC,MAAA,CAAA8mB,cAAA,CAAAlsB,MAAA,CAAsB;IAAA,EAAC;IACzD37B,0DAAA,MAA4C;IAC9CA,0DAAA,EAAM;;;;IALHA,yDAAA,oBAAAgyB,MAAA,CAAA+1B,SAAA,cAAgD,iBAAA/1B,MAAA,CAAA+1B,SAAA;;;;;ADIjD,MAAOhB,cAAc;EAUzBtnD,YAAoBuoD,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IATrB,KAAAC,MAAM,GAAY,KAAK;IACvB,KAAAC,kBAAkB,GAAmB,QAAQ;IAC7C,KAAAC,oBAAoB,GAAY,IAAI;IAEnC,KAAAf,MAAM,GAAG,IAAItoB,uDAAY,EAAQ;IAE3C,KAAAipB,SAAS,GAAmB,QAAQ;IAC5B,KAAAvD,cAAc,GAA0B,IAAI;EAEP;EAE7C9c,eAAeA,CAAA;IACb,IAAI,CAAC0gB,mBAAmB,EAAE;EAC5B;EAEA50B,WAAWA,CAAA;IACT,IAAI,IAAI,CAACgxB,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,CAACkC,UAAU,EAAE;;EAEpC;EAEQ0B,mBAAmBA,CAAA;IACzB,IAAI,OAAOlC,cAAc,KAAK,WAAW,EAAE;MACzC,IAAI,CAAC1B,cAAc,GAAG,IAAI0B,cAAc,CAAC,MAAK;QAC5C,IAAI,IAAI,CAAC+B,MAAM,EAAE;UACf,IAAI,CAACI,mBAAmB,EAAE;;MAE9B,CAAC,CAAC;MAEF,MAAMC,SAAS,GAAG,IAAI,CAACN,UAAU,CAACrgB,aAAa,CAAC4d,aAAa,CAAC,kBAAkB,CAAC;MACjF,IAAI+C,SAAS,EAAE;QACb,IAAI,CAAC9D,cAAc,CAAC2B,OAAO,CAACmC,SAAS,CAAC;;;EAG5C;EAEQD,mBAAmBA,CAAA;IACzB,MAAMC,SAAS,GAAG,IAAI,CAACN,UAAU,CAACrgB,aAAa,CAAC4d,aAAa,CAAC,kBAAkB,CAAC;IACjF,IAAI,CAAC+C,SAAS,EAAE;IAEhB,MAAMC,IAAI,GAAGD,SAAS,CAACE,qBAAqB,EAAE;IAC9C,MAAMC,cAAc,GAAGzsB,MAAM,CAAC0sB,WAAW;IACzC,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;IAEzB,MAAMC,UAAU,GAAGH,cAAc,GAAGF,IAAI,CAACM,MAAM;IAC/C,MAAMC,UAAU,GAAGP,IAAI,CAACQ,GAAG;IAE3B,IAAI,IAAI,CAACb,kBAAkB,KAAK,QAAQ,IAAIU,UAAU,IAAID,WAAW,EAAE;MACrE,IAAI,CAACZ,SAAS,GAAG,QAAQ;KAC1B,MAAM,IAAI,IAAI,CAACG,kBAAkB,KAAK,KAAK,IAAIY,UAAU,IAAIH,WAAW,EAAE;MACzE,IAAI,CAACZ,SAAS,GAAG,KAAK;KACvB,MAAM,IAAIa,UAAU,IAAID,WAAW,EAAE;MACpC,IAAI,CAACZ,SAAS,GAAG,QAAQ;KAC1B,MAAM,IAAIe,UAAU,IAAIH,WAAW,EAAE;MACpC,IAAI,CAACZ,SAAS,GAAG,KAAK;KACvB,MAAM;MACL,IAAI,CAACA,SAAS,GAAGa,UAAU,IAAIE,UAAU,GAAG,QAAQ,GAAG,KAAK;;EAEhE;EAGAE,eAAeA,CAACruB,KAAiB;IAC/B,IAAI,CAAC,IAAI,CAACstB,MAAM,IAAI,CAAC,IAAI,CAACE,oBAAoB,EAAE;IAEhD,MAAMttB,MAAM,GAAGF,KAAK,CAACE,MAAqB;IAC1C,MAAMouB,aAAa,GAAG,IAAI,CAACjB,UAAU,CAACrgB,aAAa,CAACuhB,QAAQ,CAACruB,MAAM,CAAC;IAEpE,IAAI,CAACouB,aAAa,EAAE;MAClB,IAAI,CAACE,UAAU,EAAE;;EAErB;EAIAC,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACnB,MAAM,EAAE;MACf,IAAI,CAACI,mBAAmB,EAAE;;EAE9B;EAEAc,UAAUA,CAAA;IACR,IAAI,CAAC/B,MAAM,CAAC1lB,IAAI,EAAE;EACpB;EAEAylB,eAAeA,CAACxsB,KAAiB;IAC/B,IAAI,IAAI,CAACwtB,oBAAoB,EAAE;MAC7B,IAAI,CAACgB,UAAU,EAAE;;EAErB;EAEAtB,cAAcA,CAACltB,KAAiB;IAC9BA,KAAK,CAACmf,eAAe,EAAE;EACzB;;;uBA7FWiN,cAAc,EAAA/mD,+DAAA,CAAAA,qDAAA;IAAA;EAAA;;;YAAd+mD,cAAc;MAAA33B,SAAA;MAAA6Z,YAAA,WAAAogB,4BAAA55B,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;mBAAdC,GAAA,CAAAs5B,eAAA,CAAArtB,MAAA,CAAuB;UAAA,UAAA37B,+DAAA,qBAAAspD,yCAAA;YAAA,OAAvB55B,GAAA,CAAA05B,cAAA,EAAgB;UAAA,UAAAppD,6DAAA,qBAAAwpD,yCAAA;YAAA,OAAhB95B,GAAA,CAAA05B,cAAA,EAAgB;UAAA,UAAAppD,6DAAA;;;;;;;;;;;;;;;;;;UCT7BA,4DAAA,aAA6B;UAC3BA,0DAAA,GAA4C;UAE5CA,wDAAA,IAAAypD,6BAAA,iBAQM;UACRzpD,0DAAA,EAAM;;;UAREA,uDAAA,GAAY;UAAZA,wDAAA,SAAA0vB,GAAA,CAAAu4B,MAAA,CAAY;;;;;;;;;;;;;;;;;;;;;;;ACJiE;;;;AAO/E,MAAOnB,cAAc;EAL3BrnD,YAAA;IAMW,KAAAu+B,IAAI,GAAY,KAAK;IACpB,KAAAopB,MAAM,GAAG,IAAItoB,uDAAY,EAAQ;;EAG3CuoB,QAAQA,CAAA;IACN,IAAI,CAACC,KAAK,EAAE;EACd;EAEAA,KAAKA,CAAA;IACH,IAAI,CAACF,MAAM,CAAC1lB,IAAI,EAAE;EACpB;EAEAylB,eAAeA,CAACxsB,KAAiB;IAC/B,IAAIA,KAAK,CAACE,MAAM,KAAKF,KAAK,CAAC4sB,aAAa,EAAE;MACxC,IAAI,CAACD,KAAK,EAAE;;EAEhB;;;uBAjBWR,cAAc;IAAA;EAAA;;;YAAdA,cAAc;MAAA13B,SAAA;MAAA6Z,YAAA,WAAAygB,4BAAAj6B,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;mBAAdC,GAAA,CAAA23B,QAAA,EAAU;UAAA,UAAArnD,+DAAA;;;;;;;;;;;;;;;;UCPvBA,4DAAA,oBAA6C;UAAnBA,wDAAA,oBAAA2pD,qDAAA;YAAA,OAAUj6B,GAAA,CAAA43B,KAAA,EAAO;UAAA,EAAC;UAC1CtnD,4DAAA,aAA8D;UAAnCA,wDAAA,mBAAA4pD,6CAAAjuB,MAAA;YAAA,OAASA,MAAA,CAAAme,eAAA,EAAwB;UAAA,EAAC;UAC3D95C,0DAAA,GAAyB;UAC3BA,0DAAA,EAAM;;;UAHIA,wDAAA,SAAA0vB,GAAA,CAAAsO,IAAA,CAAa;;;;;;;;;;;;;;;;;;;;;;;;;ACA2G;AAC3D;;;;;;;;;;;;;ICwBjEh+B,4DAAA,cAAuJ;IAA3BA,wDAAA,mBAAA8pD,mEAAA;MAAA,MAAAxd,WAAA,GAAAtsC,2DAAA,CAAA+pD,GAAA;MAAA,MAAAC,MAAA,GAAA1d,WAAA,CAAAa,SAAA;MAAA,MAAAtV,MAAA,GAAA73B,2DAAA;MAAA,OAAAA,yDAAA,CAAA63B,MAAA,CAAAoyB,YAAA,GAAAD,MAAA;IAAA,EAA0B;IAAChqD,0DAAA,EAAM;;;;IAArEA,wDAAA,CAAAA,6DAAA,IAAAo3B,GAAA,EAAA4yB,MAAA,EAAmC;;;;;;IAbjIhqD,4DAAA,aAGsD;IACvBA,wDAAA,mBAAAmqD,6DAAA;MAAAnqD,2DAAA,CAAAi/B,GAAA;MAAA,MAAAC,MAAA,GAAAl/B,2DAAA;MAAA,OAASA,yDAAA,CAAAk/B,MAAA,CAAAkrB,WAAA,EAAa;IAAA,EAAC;IAACpqD,0DAAA,EAAM;IAC3DA,4DAAA,aAA4B;IAKxBA,wDAAA,yBAAAqqD,4EAAA1uB,MAAA;MAAA37B,2DAAA,CAAAi/B,GAAA;MAAA,MAAA3G,MAAA,GAAAt4B,2DAAA;MAAA,OAAAA,yDAAA,CAAAs4B,MAAA,CAAA2xB,YAAA,GAAAtuB,MAAA;IAAA,EAAmC;IACrC37B,0DAAA,EAAe;IACfA,4DAAA,aAAoD;IAClDA,wDAAA,IAAAsqD,6CAAA,iBAA6J;IAC/JtqD,0DAAA,EAAM;IAENA,4DAAA,iBAAmJ;IAAnDA,wDAAA,mBAAAuqD,gEAAA;MAAAvqD,2DAAA,CAAAi/B,GAAA;MAAA,MAAAzG,MAAA,GAAAx4B,2DAAA;MAAA,OAASA,yDAAA,CAAAw4B,MAAA,CAAAgyB,KAAA,EAAO;IAAA,EAAC;IAC/GxqD,oDAAA,GACF;IAAAA,0DAAA,EAAS;;;;IAhBRA,yDAAA,iBAAAy4B,MAAA,CAAAsvB,SAAA,WAA0C,oBAAAtvB,MAAA,CAAAsvB,SAAA;IAMzC/nD,uDAAA,GAAsB;IAAtBA,wDAAA,UAAAy4B,MAAA,CAAAwxB,YAAA,CAAsB;IAKDjqD,uDAAA,GAAU;IAAVA,wDAAA,YAAAy4B,MAAA,CAAAypB,OAAA,CAAU;IAGkBliD,uDAAA,GAA4C;IAA5CA,wDAAA,CAAAA,6DAAA,KAAAo3B,GAAA,EAAAqB,MAAA,CAAAwxB,YAAA,EAA4C;IAAmBjqD,wDAAA,aAAAy4B,MAAA,CAAAwxB,YAAA,IAAAxxB,MAAA,CAAAwrB,KAAA,CAAgC;IAChJjkD,uDAAA,GACF;IADEA,gEAAA,MAAAy4B,MAAA,CAAAwxB,YAAA,IAAAxxB,MAAA,CAAAwrB,KAAA,yIACF;;;;;;;;ADbA,MAAOwG,wBAAwB;EAkBnChrD,YAAoBuoD,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAjBrB,KAAA0C,WAAW,GAAW,eAAe;IACrC,KAAAC,QAAQ,GAAY,KAAK;IACzB,KAAAzC,kBAAkB,GAAsB,QAAQ;IAChD,KAAA0C,aAAa,GAAQ,EAAE;IAIhC,KAAA3G,KAAK,GAAW,SAAS;IACzB,KAAAgG,YAAY,GAAQ,SAAS;IAC7B,KAAAhC,MAAM,GAAY,KAAK;IACvB,KAAAF,SAAS,GAAsB,QAAQ;IACvC,KAAA7F,OAAO,GAAU,EAAE;IAEX,KAAAsC,cAAc,GAA0B,IAAI;IAC5C,KAAA7Q,QAAQ,GAA4B,MAAK,CAAE,CAAC;IAC5C,KAAAC,SAAS,GAAe,MAAK,CAAE,CAAC;EAEK;EAE7C3kB,QAAQA,CAAA;IACN,IAAG,IAAI,CAAC27B,aAAa,IAAE,EAAE,EAAC,IAAI,CAAC1I,OAAO,CAAC7/C,IAAI,CAAC,IAAI,CAACuoD,aAAa,CAAC;IAC/D,IAAG,IAAI,CAAC3G,KAAK,IAAE,EAAE,EAAC,IAAI,CAACgG,YAAY,GAAC,IAAI,CAAChG,KAAK;EAChD;EAEAvc,eAAeA,CAAA;IACb,IAAI,CAAC0gB,mBAAmB,EAAE;EAC5B;EAEA50B,WAAWA,CAAA;IACT,IAAI,IAAI,CAACgxB,cAAc,EAAE;MACvB,IAAI,CAACA,cAAc,CAACkC,UAAU,EAAE;;EAEpC;EAEA;EACAmE,aAAaA,CAAA;IACX,IAAI,CAACjX,SAAS,EAAE;EAClB;EAEQwU,mBAAmBA,CAAA;IACzB,IAAI,OAAOlC,cAAc,KAAK,WAAW,EAAE;MACzC,IAAI,CAAC1B,cAAc,GAAG,IAAI0B,cAAc,CAAC,MAAK;QAC5C,IAAI,IAAI,CAAC+B,MAAM,EAAE;UACf,IAAI,CAAC6C,sBAAsB,EAAE;;MAEjC,CAAC,CAAC;MAEF,IAAI,CAACtG,cAAc,CAAC2B,OAAO,CAAC,IAAI,CAACmC,SAAS,CAAC3gB,aAAa,CAAC;;EAE7D;EAEQmjB,sBAAsBA,CAAA;IAC5B,IAAI,CAAC,IAAI,CAACxC,SAAS,EAAE;IAErB,MAAMyC,gBAAgB,GAAG,IAAI,CAACzC,SAAS,CAAC3gB,aAAa;IACrD,MAAM4gB,IAAI,GAAGwC,gBAAgB,CAACvC,qBAAqB,EAAE;IACrD,MAAMC,cAAc,GAAGzsB,MAAM,CAAC0sB,WAAW;IACzC,MAAMsC,cAAc,GAAG,GAAG;IAE1B,MAAMpC,UAAU,GAAGH,cAAc,GAAGF,IAAI,CAACM,MAAM;IAC/C,MAAMC,UAAU,GAAGP,IAAI,CAACQ,GAAG;IAE3B,IAAI,IAAI,CAACb,kBAAkB,KAAK,QAAQ,IAAIU,UAAU,IAAIoC,cAAc,EAAE;MACxE,IAAI,CAACjD,SAAS,GAAG,QAAQ;KAC1B,MAAM,IAAI,IAAI,CAACG,kBAAkB,KAAK,KAAK,IAAIY,UAAU,IAAIkC,cAAc,EAAE;MAC5E,IAAI,CAACjD,SAAS,GAAG,KAAK;KACvB,MAAM,IAAIa,UAAU,IAAIoC,cAAc,EAAE;MACvC,IAAI,CAACjD,SAAS,GAAG,QAAQ;KAC1B,MAAM,IAAIe,UAAU,IAAIkC,cAAc,EAAE;MACvC,IAAI,CAACjD,SAAS,GAAG,KAAK;KACvB,MAAM;MACL,IAAI,CAACA,SAAS,GAAGa,UAAU,IAAIE,UAAU,GAAG,QAAQ,GAAG,KAAK;;EAEhE;EAGAE,eAAeA,CAACruB,KAAiB;IAC/B,MAAME,MAAM,GAAGF,KAAK,CAACE,MAAqB;IAC1C,IAAI,CAAC,IAAI,CAACotB,MAAM,IAAI,CAACptB,MAAM,EAAE;IAE7B,MAAMouB,aAAa,GAAGpuB,MAAM,CAACowB,OAAO,CAAC,yBAAyB,CAAC;IAC/D,IAAI,CAAChC,aAAa,EAAE;MAClB,IAAI,CAACmB,WAAW,EAAE;;EAEtB;EAIAhB,cAAcA,CAAA;IACZ,IAAI,IAAI,CAACnB,MAAM,EAAE;MACf,IAAI,CAAC6C,sBAAsB,EAAE;;EAEjC;EAEAlV,UAAUA,CAAC/0C,KAAa;IACtB,IAAIA,KAAK,IAAI,IAAI,CAACqqD,YAAY,CAACrqD,KAAK,CAAC,EAAE;MACrC,IAAI,CAACojD,KAAK,GAAGpjD,KAAK;MAClB,IAAI,CAACopD,YAAY,GAAGppD,KAAK;;EAE7B;EAEAi1C,gBAAgBA,CAACC,EAA2B;IAC1C,IAAI,CAACpC,QAAQ,GAAGoC,EAAE;EACpB;EAEAC,iBAAiBA,CAACD,EAAc;IAC9B,IAAI,CAACnC,SAAS,GAAGmC,EAAE;EACrB;EAEAoV,gBAAgBA,CAACC,UAAmB;IAClC,IAAI,CAACT,QAAQ,GAAGS,UAAU;EAC5B;EAEAC,YAAYA,CAAA;IACV,IAAI,IAAI,CAACV,QAAQ,EAAE;IAEnB,IAAI,CAAC,IAAI,CAAC1C,MAAM,EAAE;MAChB,IAAI,CAAC6C,sBAAsB,EAAE;;IAG/B,IAAI,CAAC7C,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;IAC1B,IAAI,IAAI,CAACA,MAAM,EAAE;MACf,IAAI,CAAC4C,aAAa,EAAE;;EAExB;EAEAT,WAAWA,CAAA;IACT,IAAI,CAACnC,MAAM,GAAG,KAAK;EACrB;EAEAuC,KAAKA,CAAA;IACH,IAAI,CAACc,aAAa,CAAC,IAAI,CAACrB,YAAY,CAAC;EACvC;EAEAqB,aAAaA,CAACC,UAAsB;IAClC,IAAIA,UAAU,IAAIA,UAAU,IAAE,IAAI,CAACtH,KAAK,EAAE;MACxC,IAAI,CAACuH,iBAAiB,CAAC,IAAI,CAACvH,KAAK,CAAC;MAClC,IAAI,CAACA,KAAK,GAAGsH,UAAU;MACvB,IAAI,CAAC5X,QAAQ,CAAC,IAAI,CAACsQ,KAAK,CAAC;;EAG7B;EAEAuH,iBAAiBA,CAACvH,KAAY;IAC5B;IACA,IAAG,IAAI,CAAC/B,OAAO,CAAC,CAAC,CAAC,IAAI+B,KAAK,IAAI,CAAC,IAAI,CAAC/B,OAAO,CAACnL,QAAQ,CAACkN,KAAK,CAAC,EAAE,IAAI,CAAC/B,OAAO,CAACtJ,MAAM,CAAC,CAAC,EAAE,CAAC,EAAEqL,KAAK,CAAC,CAAC,CAAC;IAChG;IACA,IAAG,IAAI,CAAC/B,OAAO,CAACpnB,MAAM,GAAC,CAAC,EAAE,IAAI,CAAConB,OAAO,CAACsB,GAAG,EAAE;EAC9C;EAEQ0H,YAAYA,CAACjH,KAAa;IAChC,MAAMxY,CAAC,GAAG,IAAIggB,MAAM,EAAE,CAAClqD,KAAK;IAC5BkqC,CAAC,CAACwY,KAAK,GAAGA,KAAK;IACf,OAAOxY,CAAC,CAACwY,KAAK,KAAK,EAAE;EACvB;;;uBA3JWwG,wBAAwB,EAAAzqD,+DAAA,CAAAA,qDAAA;IAAA;EAAA;;;YAAxByqD,wBAAwB;MAAAr7B,SAAA;MAAA4pB,SAAA,WAAA0S,+BAAAj8B,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;;;;;;;;;;mBAAxBC,GAAA,CAAAs5B,eAAA,CAAArtB,MAAA,CAAuB;UAAA,UAAA37B,+DAAA,qBAAA2rD,mDAAA;YAAA,OAAvBj8B,GAAA,CAAA05B,cAAA,EAAgB;UAAA,UAAAppD,6DAAA,qBAAA4rD,mDAAA;YAAA,OAAhBl8B,GAAA,CAAA05B,cAAA,EAAgB;UAAA,UAAAppD,6DAAA;;;;;;;;;kFARhB,CACT;QACE+wB,OAAO,EAAEmb,6DAAiB;QAC1BgN,WAAW,EAAE2Q,yDAAU,CAAC,MAAMY,wBAAwB,CAAC;QACvDx5B,KAAK,EAAE;OACR,CACF;MAAA5B,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAAs8B,kCAAAp8B,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCdHzvB,4DAAA,gBAAkF;UAG9DA,wDAAA,mBAAA8rD,yDAAA;YAAA,OAASp8B,GAAA,CAAA27B,YAAA,EAAc;UAAA,EAAC,kBAAAU,wDAAA;YAAA,OAIhCr8B,GAAA,CAAAm7B,aAAA,EAAe;UAAA,EAJiB;UAF1C7qD,0DAAA,EAQC;UAEDA,wDAAA,IAAAgsD,uCAAA,kBAoBM;UACRhsD,0DAAA,EAAM;;;UAhCyCA,wDAAA,CAAAA,6DAAA,IAAAisD,GAAA,EAAAv8B,GAAA,CAAAu0B,KAAA,EAAkC;UAG7EjkD,uDAAA,GAAe;UAAfA,wDAAA,UAAA0vB,GAAA,CAAAu0B,KAAA,CAAe,gBAAAv0B,GAAA,CAAAg7B,WAAA;UASX1qD,uDAAA,GAAY;UAAZA,wDAAA,SAAA0vB,GAAA,CAAAu4B,MAAA,CAAY;;;;;;;;;;;;;;;;;;;;;;;;;;ACbiD;AACI;;;;;;;;;;;;;IC0BnEjoD,4DAAA,aAI+B;IAA7BA,wDAAA,mBAAAksD,iEAAA;MAAA,MAAA5f,WAAA,GAAAtsC,2DAAA,CAAAqyB,GAAA;MAAA,MAAA85B,MAAA,GAAA7f,WAAA,CAAAa,SAAA;MAAA,MAAA7a,MAAA,GAAAtyB,2DAAA;MAAA,OAAAA,yDAAA,CAAAsyB,MAAA,CAAA23B,YAAA,GAAAkC,MAAA;IAAA,EAA4B;IAC9BnsD,0DAAA,EAAM;;;;IAFJA,wDAAA,CAAAA,6DAAA,IAAA81B,GAAA,EAAAq2B,MAAA,EAAmC;;;;;;;;ADfrC,MAAOC,4BAA4B;EAZzC3sD,YAAA;IAaW,KAAAirD,WAAW,GAAW,eAAe;IACrC,KAAAC,QAAQ,GAAY,KAAK;IACzB,KAAAzC,kBAAkB,GAAqB,QAAQ;IAC/C,KAAA0C,aAAa,GAAW,EAAE;IAEnC,KAAA3G,KAAK,GAAW,SAAS;IACzB,KAAAgG,YAAY,GAAQ,SAAS;IAC7B,KAAAhC,MAAM,GAAY,KAAK;IACvB,KAAA/F,OAAO,GAAa,EAAE;IAEd,KAAAvO,QAAQ,GAA4B,MAAK,CAAE,CAAC;IAC5C,KAAAC,SAAS,GAAe,MAAK,CAAE,CAAC;;EAExC3kB,QAAQA,CAAA;IACN,IAAI,IAAI,CAAC27B,aAAa,IAAI,EAAE,EAAE,IAAI,CAAC1I,OAAO,CAAC7/C,IAAI,CAAC,IAAI,CAACuoD,aAAa,CAAC;IACnE,IAAI,IAAI,CAAC3G,KAAK,IAAI,EAAE,EAAE,IAAI,CAACgG,YAAY,GAAG,IAAI,CAAChG,KAAK;EACtD;EAEArO,UAAUA,CAAC/0C,KAAa;IACtB,IAAIA,KAAK,IAAI,IAAI,CAACqqD,YAAY,CAACrqD,KAAK,CAAC,EAAE;MACrC,IAAI,CAACojD,KAAK,GAAGpjD,KAAK;MAClB,IAAI,CAACopD,YAAY,GAAGppD,KAAK;;EAE7B;EAEAi1C,gBAAgBA,CAACC,EAA2B;IAC1C,IAAI,CAACpC,QAAQ,GAAGoC,EAAE;EACpB;EAEAC,iBAAiBA,CAACD,EAAc;IAC9B,IAAI,CAACnC,SAAS,GAAGmC,EAAE;EACrB;EAEAoV,gBAAgBA,CAACC,UAAmB;IAClC,IAAI,CAACT,QAAQ,GAAGS,UAAU;EAC5B;EAEAP,aAAaA,CAAA;IACX,IAAI,CAACjX,SAAS,EAAE;EAClB;EAEAyX,YAAYA,CAAA;IACV,IAAI,IAAI,CAACV,QAAQ,EAAE;IAEnB,IAAI,CAAC1C,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;IAC1B,IAAI,IAAI,CAACA,MAAM,EAAE;MACf,IAAI,CAAC4C,aAAa,EAAE;;EAExB;EAEAT,WAAWA,CAAA;IACT,IAAI,CAACnC,MAAM,GAAG,KAAK;EACrB;EAEAuC,KAAKA,CAAA;IACH,IAAI,CAACc,aAAa,CAAC,IAAI,CAACrB,YAAY,CAAC;EACvC;EAEAqB,aAAaA,CAACC,UAAwB;IACpC,IAAIA,UAAU,IAAIA,UAAU,IAAI,IAAI,CAACtH,KAAK,EAAE;MAC1C,IAAI,CAACuH,iBAAiB,CAAC,IAAI,CAACvH,KAAK,CAAC;MAClC,IAAI,CAACA,KAAK,GAAGsH,UAAU;MACvB,IAAI,CAAC5X,QAAQ,CAAC,IAAI,CAACsQ,KAAK,CAAC;;EAE7B;EAEAuH,iBAAiBA,CAACvH,KAAa;IAC7B,IAAI,IAAI,CAAC/B,OAAO,CAAC,CAAC,CAAC,IAAI+B,KAAK,IAAI,CAAC,IAAI,CAAC/B,OAAO,CAACnL,QAAQ,CAACkN,KAAK,CAAC,EAAE;MAC7D,IAAI,CAAC/B,OAAO,CAACtJ,MAAM,CAAC,CAAC,EAAE,CAAC,EAAEqL,KAAK,CAAC;;IAElC,IAAI,IAAI,CAAC/B,OAAO,CAACpnB,MAAM,GAAG,CAAC,EAAE,IAAI,CAAConB,OAAO,CAACsB,GAAG,EAAE;EACjD;EAEQ0H,YAAYA,CAACjH,KAAa;IAChC,MAAMxY,CAAC,GAAG,IAAIggB,MAAM,EAAE,CAAClqD,KAAK;IAC5BkqC,CAAC,CAACwY,KAAK,GAAGA,KAAK;IACf,OAAOxY,CAAC,CAACwY,KAAK,KAAK,EAAE;EACvB;;;uBA9EWmI,4BAA4B;IAAA;EAAA;;;YAA5BA,4BAA4B;MAAAh9B,SAAA;MAAA2S,MAAA;QAAA2oB,WAAA;QAAAC,QAAA;QAAAzC,kBAAA;QAAA0C,aAAA;MAAA;MAAApkB,QAAA,GAAAxmC,gEAAA,CAR5B,CACT;QACE+wB,OAAO,EAAEmb,6DAAiB;QAC1BgN,WAAW,EAAE2Q,yDAAU,CAAC,MAAMuC,4BAA4B,CAAC;QAC3Dn7B,KAAK,EAAE;OACR,CACF;MAAA5B,KAAA;MAAAC,IAAA;MAAA+F,MAAA;MAAA9F,QAAA,WAAA+8B,sCAAA78B,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCbHzvB,4DAAA,mBAG2B;UAAzBA,wDAAA,oBAAAusD,kEAAA;YAAA,OAAU78B,GAAA,CAAA06B,WAAA,EAAa;UAAA,EAAC;UAGxBpqD,4DAAA,aAA6E;UAIzEA,wDAAA,mBAAAwsD,6DAAA;YAAA,OAAS98B,GAAA,CAAA27B,YAAA,EAAc;UAAA,EAAC,kBAAAoB,4DAAA;YAAA,OAIhB/8B,GAAA,CAAAm7B,aAAA,EAAe;UAAA,EAJC;UAH1B7qD,0DAAA,EAQC;UAIHA,4DAAA,aAAa;UAITA,wDAAA,yBAAA0sD,0EAAA/wB,MAAA;YAAA,OAAAjM,GAAA,CAAAu6B,YAAA,GAAAtuB,MAAA;UAAA,EAAqC;UACvC37B,0DAAA,EAAe;UAEfA,4DAAA,aAA2B;UACzBA,wDAAA,IAAA2sD,2CAAA,iBAKM;UACR3sD,0DAAA,EAAM;UAENA,4DAAA,gBAKqC;UADnCA,wDAAA,mBAAA4sD,8DAAA;YAAA,OAASl9B,GAAA,CAAA86B,KAAA,EAAO;UAAA,EAAC;UAEjBxqD,oDAAA,GACF;UAAAA,0DAAA,EAAS;;;UAzCXA,wDAAA,WAAA0vB,GAAA,CAAAu4B,MAAA,CAAiB,uBAAAv4B,GAAA,CAAAw4B,kBAAA;UAKyBloD,uDAAA,GAAkC;UAAlCA,wDAAA,CAAAA,6DAAA,KAAAo3B,GAAA,EAAA1H,GAAA,CAAAu0B,KAAA,EAAkC;UAGxEjkD,uDAAA,GAAe;UAAfA,wDAAA,UAAA0vB,GAAA,CAAAu0B,KAAA,CAAe,gBAAAv0B,GAAA,CAAAg7B,WAAA;UAYf1qD,uDAAA,GAAsB;UAAtBA,wDAAA,UAAA0vB,GAAA,CAAAu6B,YAAA,CAAsB;UAOJjqD,uDAAA,GAAU;UAAVA,wDAAA,YAAA0vB,GAAA,CAAAwyB,OAAA,CAAU;UAU5BliD,uDAAA,GAA4C;UAA5CA,wDAAA,CAAAA,6DAAA,KAAA81B,GAAA,EAAApG,GAAA,CAAAu6B,YAAA,EAA4C;UAE5CjqD,wDAAA,aAAA0vB,GAAA,CAAAu6B,YAAA,IAAAv6B,GAAA,CAAAu0B,KAAA,CAAkC;UAClCjkD,uDAAA,GACF;UADEA,gEAAA,MAAA0vB,GAAA,CAAAu6B,YAAA,IAAAv6B,GAAA,CAAAu0B,KAAA,yIACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxC2C;AAC4C;AACnC;AACa;AACkC;AACzD;;AAoBxC,MAAO8I,iBAAiB;;;uBAAjBA,iBAAiB;IAAA;EAAA;;;YAAjBA;IAAiB;EAAA;;;gBAZ1B17B,yDAAY,EACZw7B,iEAAc,EACdC,8EAAoB,EACpB9F,sDAAS;IAAA;EAAA;;;sHASA+F,iBAAiB;IAAA57B,YAAA,GAhB1Bs5B,oGAAwB,EACxB2B,gHAA4B;IAAAx9B,OAAA,GAG5ByC,yDAAY,EACZw7B,iEAAc,EACdC,8EAAoB,EACpB9F,sDAAS;IAAAn4B,OAAA,GAGT47B,oGAAwB,EACxB2B,gHAA4B;EAAA;AAAA;;;;;;;;;;;;;;;;ACrBqB;;AAU/C,MAAOU,oBAAoB;;;uBAApBA,oBAAoB;IAAA;EAAA;;;YAApBA;IAAoB;EAAA;;;gBAN7BC,+DAAiB,EAGjBA,+DAAiB;IAAA;EAAA;;;sHAGRD,oBAAoB;IAAAl+B,OAAA,GAN7Bm+B,+DAAiB;IAAAl+B,OAAA,GAGjBk+B,+DAAiB;EAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACN8B,CAAC;AACD,CAAC;AACC,CAAC;AACD,CAAC;AACC,CAAC;AACH,CAAC;AACP,CAAC;AACS,CAAC;AACC,CAAC;AACP,CAAC;AACD,CAAC;AACG,CAAC;AACH,CAAC;AACL,CAAC;;AAoC9C,MAAOF,cAAc;;;uBAAdA,cAAc;IAAA;EAAA;;;YAAdA;IAAc;EAAA;;;gBAhCvBG,6DAAgB,EAChBC,6DAAgB,EAChBC,+DAAiB,EACjBC,+DAAiB,EACjBC,iEAAkB,EAClBC,+DAAiB,EACjBC,yDAAc,EACdC,mEAAmB,EACnBC,qEAAoB,EACpBC,gEAAiB,EACjBC,gEAAiB,EACjBC,oEAAmB,EACnBC,kEAAkB,EAClBC,8DAAgB,EAGhBb,6DAAgB,EAChBC,6DAAgB,EAChBC,+DAAiB,EACjBC,+DAAiB,EACjBC,iEAAkB,EAClBC,+DAAiB,EACjBC,yDAAc,EACdC,mEAAmB,EACnBC,qEAAoB,EACpBC,gEAAiB,EACjBC,gEAAiB,EACjBC,oEAAmB,EACnBC,kEAAkB,EAClBC,8DAAgB;IAAA;EAAA;;;sHAGPhB,cAAc;IAAAj+B,OAAA,GAhCvBo+B,6DAAgB,EAChBC,6DAAgB,EAChBC,+DAAiB,EACjBC,+DAAiB,EACjBC,iEAAkB,EAClBC,+DAAiB,EACjBC,yDAAc,EACdC,mEAAmB,EACnBC,qEAAoB,EACpBC,gEAAiB,EACjBC,gEAAiB,EACjBC,oEAAmB,EACnBC,kEAAkB,EAClBC,8DAAgB;IAAAh/B,OAAA,GAGhBm+B,6DAAgB,EAChBC,6DAAgB,EAChBC,+DAAiB,EACjBC,+DAAiB,EACjBC,iEAAkB,EAClBC,+DAAiB,EACjBC,yDAAc,EACdC,mEAAmB,EACnBC,qEAAoB,EACpBC,gEAAiB,EACjBC,gEAAiB,EACjBC,oEAAmB,EACnBC,kEAAkB,EAClBC,8DAAgB;EAAA;AAAA;;;;;;;;;;;;;;;;;AC/CmD;AACC;;AAkBlE,MAAOlH,QAAQ;;;uBAARA,QAAQ;IAAA;EAAA;;;YAARA;IAAQ;EAAA;;;gBARjBoG,gFAAiB,EACjBnG,iFAAkB,EAGlBmG,gFAAiB,EACjBnG,iFAAkB;IAAA;EAAA;;;sHAGTD,QAAQ;IAAA/3B,OAAA,GARjBm+B,gFAAiB,EACjBnG,iFAAkB;IAAA/3B,OAAA,GAGlBk+B,gFAAiB,EACjBnG,iFAAkB;EAAA;AAAA;;;;;;;;;;;;;;;;;;;ACTqE;;;;AAIrF,MAAO12B,gBAAgB;EAI3BzwB,YACUs2B,IAAiB,EACzBg4B,SAA2B;IADnB,KAAAh4B,IAAI,GAAJA,IAAI;IAGZ,IAAI,CAACi4B,MAAM,GAAGD,SAAS,CAACruD,OAAO;EACjC;EAEA+9B,SAASA,CAAC52B,OAAyB,EAAE6tB,IAAiB;IACpD,IAAI,IAAI,CAACu5B,mBAAmB,CAACpnD,OAAO,CAAC,EAAE;MACrC,OAAO6tB,IAAI,CAACgJ,MAAM,CAAC72B,OAAO,CAAC;;IAE7B,IAAI,CAAC,IAAI,CAACkvB,IAAI,CAACgH,cAAc,EAAE,EAAE;MAC/B,OAAOrI,IAAI,CAACgJ,MAAM,CAAC,IAAI,CAACwwB,WAAW,CAACrnD,OAAO,CAAC,CAAC;;IAE/C,IAAI,CAAC,IAAI,CAACsnD,mBAAmB,EAAE;MAC7B,IAAI,CAACA,mBAAmB,GAAG,IAAI32B,yCAAO,EAAE;MACxC,IAAI,CAACzB,IAAI,CAACsH,YAAY,EAAE,CAAC5I,SAAS,CAChC,MAAK;QACH,IAAI,CAAC05B,mBAAoB,CAACz5B,IAAI,EAAE;QAChC,IAAI,CAACy5B,mBAAoB,CAACxiB,QAAQ,EAAE;QACpC,IAAI,CAACwiB,mBAAmB,GAAG3sD,SAAS;MACtC,CAAC,CACF;;IAEH,OAAO,IAAI,CAAC2sD,mBAAmB,CAACrnD,IAAI,CAClCgnD,+CAAS,CAAC,MAAMp5B,IAAI,CAACgJ,MAAM,CAAC,IAAI,CAACwwB,WAAW,CAACrnD,OAAO,CAAC,CAAC,CAAC,CACxD;EACH;EAEQqnD,WAAWA,CAACrnD,OAAyB;IAC3C,MAAM01B,KAAK,GAAG,IAAI,CAACxG,IAAI,CAAC0G,QAAQ,EAAE;IAClC,IAAIF,KAAK,IAAI11B,OAAO,CAAC9B,GAAG,CAACm+C,UAAU,CAAC,IAAI,CAAC8K,MAAM,CAAC,EAAE;MAChDnnD,OAAO,GAAGA,OAAO,CAACunD,KAAK,CAAC;QACtBnrD,OAAO,EAAE4D,OAAO,CAAC5D,OAAO,CAACQ,GAAG,CAAC,eAAe,EAAE,UAAU84B,KAAK,EAAE;OAChE,CAAC;;IAEJ,OAAO11B,OAAO;EAChB;EAEAonD,mBAAmBA,CAACpnD,OAAyB;IAC3C,MAAMwnD,SAAS,GAAG,CAAC,oBAAoB,EAAE,cAAc,CAAC;IACxD,OAAOA,SAAS,CAACC,IAAI,CAAC7rD,IAAI,IAAIoE,OAAO,CAAC9B,GAAG,CAACwpD,QAAQ,CAAC9rD,IAAI,CAAC,CAAC;EAC3D;;;uBA9CWytB,gBAAgB,EAAAlwB,sDAAA,CAAAE,oEAAA,GAAAF,sDAAA,CAAAG,oEAAA;IAAA;EAAA;;;aAAhB+vB,gBAAgB;MAAA5wB,OAAA,EAAhB4wB,gBAAgB,CAAA3wB;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEVvB,SAAUivD,gBAAgBA,CAACC,KAAa,EAAEC,OAAe;EAC7D,OAAQl0B,OAAwB,IAA6B;IAC3D,IAAIm0B,iBAAiB,CAACn0B,OAAO,CAAC35B,KAAK,CAAC,EAAE;MACpC,OAAO,IAAI;;IAEb,MAAM+tD,OAAO,GAAGF,OAAO,CAACnmB,IAAI,CAAC/N,OAAO,CAAC35B,KAAK,CAAC;IAC3C,OAAO+tD,OAAO,GAAG,IAAI,GAAG;MAAE,CAACH,KAAK,GAAG;IAAI,CAAE;EAC3C,CAAC;AACH;AAEO,MAAM50B,YAAY,GAAG20B,gBAAgB,CAAC,KAAK,EAAE,kBAAkB,CAAC;AAChE,MAAM50B,cAAc,GAAG40B,gBAAgB,CAAC,OAAO,EAAE,6CAA6C,CAAC;AAGtG,SAASG,iBAAiBA,CAAC9tD,KAAU;EACnC,OAAOA,KAAK,IAAI,IAAI,IACjB,CAAC,OAAOA,KAAK,KAAK,QAAQ,IAAIe,KAAK,CAACgpC,OAAO,CAAC/pC,KAAK,CAAC,KAAKA,KAAK,CAACi6B,MAAM,KAAK,CAAE;AAC/E;;;;;;;;;;;;;;ACnBA;AACA;AACA;AAEO,MAAM6f,WAAW,GAAG;EACzB0B,UAAU,EAAE,KAAK;EACjB2R,MAAM,EAAE;CACT;AAED;;;;;;;AAOA;;;;;;;;;;;;;;;;AChB+C;AAGF;AACY;AAEzD,IAAIrT,kEAAW,CAAC0B,UAAU,EAAE;EAC1BwS,6DAAc,EAAE;;AAGlBC,sEAAA,EAAwB,CAACE,eAAe,CAACn+B,sDAAS,CAAC,CAChDo+B,KAAK,CAAC56B,GAAG,IAAIkC,OAAO,CAACjC,KAAK,CAACD,GAAG,CAAC,CAAC","sources":["./src/app/adapters/custom-date.adapter.ts","./src/app/api/api-configuration.ts","./src/app/api/base-service.ts","./src/app/api/request-builder.ts","./src/app/api/services.ts","./src/app/api/services/cargo.service.ts","./src/app/api/services/company.service.ts","./src/app/api/services/contractor.service.ts","./src/app/api/services/customer.service.ts","./src/app/api/services/data.service.ts","./src/app/api/services/direction.service.ts","./src/app/api/services/file.service.ts","./src/app/api/services/message.service.ts","./src/app/api/services/order.service.ts","./src/app/api/services/request.service.ts","./src/app/api/services/settings.service.ts","./src/app/api/services/system.service.ts","./src/app/api/services/transport.service.ts","./src/app/api/services/user.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/components/confirm/confirm.component.ts","./src/app/auth/components/confirm/confirm.component.html","./src/app/auth/components/login/login.component.ts","./src/app/auth/components/login/login.component.html","./src/app/auth/components/logout/logout.component.ts","./src/app/auth/components/logout/logout.component.html","./src/app/auth/components/password-recovery/password-recovery.component.ts","./src/app/auth/components/password-recovery/password-recovery.component.html","./src/app/auth/components/register/register.component.ts","./src/app/auth/components/register/register.component.html","./src/app/auth/services/auth.service.ts","./src/app/auth/services/register.service.ts","./src/app/auth/user.guard.ts","./src/app/error.interceptor.ts","./src/app/interceptors/loader.interceptor.ts","./src/app/loader/loader.component.ts","./src/app/loader/loader.service.ts","./src/app/material/components/editor-header/editor-header.component.ts","./src/app/material/components/editor-header/editor-header.component.html","./src/app/material/components/paginator/paginator.component.ts","./src/app/material/components/paginator/paginator.component.html","./src/app/material/components/popup-dialog/popup-dialog.component.ts","./src/app/material/components/popup-dialog/popup-dialog.component.html","./src/app/material/directives/focus-initial.directive.ts","./src/app/material/directives/phone-mask.directive.ts","./src/app/material/material.module.ts","./src/app/material/services/popup.service.ts","./src/app/page-title.service.ts","./src/app/pages/components/employee-register/employee-register.component.ts","./src/app/pages/components/employee-register/employee-register.component.html","./src/app/pages/components/rate-editor/rate-editor.component.ts","./src/app/pages/components/rate-editor/rate-editor.component.html","./src/app/pages/components/request-rate/request-rate.component.ts","./src/app/pages/components/request-rate/request-rate.component.html","./src/app/pages/services/calculations.service.ts","./src/app/pages/services/loader.service.ts","./src/app/pages/services/navigation-history.service.ts","./src/app/shared/directives/directive.module.ts","./src/app/shared/directives/icon-color.directive.ts","./src/app/shared/directives/iframe-style.directive.ts","./src/app/shared/shared.module.ts","./src/app/shared/ui/autocomplete/autocomplete.module.ts","./src/app/shared/ui/cdk/cdk.module.ts","./src/app/shared/ui/cdk/layout/layout.component.ts","./src/app/shared/ui/cdk/layout/layout.component.html","./src/app/shared/ui/cdk/panel/panel.component.ts","./src/app/shared/ui/cdk/panel/panel.component.html","./src/app/shared/ui/cdk/popup/popup.component.ts","./src/app/shared/ui/cdk/popup/popup.component.html","./src/app/shared/ui/color-picker/color-picker-demo/color-picker-demo.component.ts","./src/app/shared/ui/color-picker/color-picker-demo/color-picker-demo.component.html","./src/app/shared/ui/color-picker/color-picker-standart/color-picker-standart.component.ts","./src/app/shared/ui/color-picker/color-picker-standart/color-picker-standart.component.html","./src/app/shared/ui/color-picker/color-picker.module.ts","./src/app/shared/ui/color-picker/lib/ngx-color-picker.module.ts","./src/app/shared/ui/color-picker/lib/ngx-color.module.ts","./src/app/shared/ui/ui.module.ts","./src/app/token.interceptor.ts","./src/app/validators/index.ts","./src/app/validators/pattern-validator.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDateFormats, NativeDateAdapter } from '@angular/material/core';\n\n@Injectable()\nexport class CustomDateAdapter extends NativeDateAdapter {\n  override getFirstDayOfWeek(): number {\n    return 1; // Понедельник\n  }\n\n  override format(date: Date, displayFormat: Object): string {\n    if (displayFormat === 'input') {\n      const day = date.getDate();\n      const month = date.getMonth() + 1;\n      const year = date.getFullYear();\n      return `${this._to2digit(day)}.${this._to2digit(month)}.${year}`;\n    }\n    return super.format(date, displayFormat);\n  }\n\n  private _to2digit(n: number): string {\n    return ('00' + n).slice(-2);\n  }\n}\n\n// export const APP_DATE_FORMATS: MatDateFormats = {\n//   parse: {\n//     dateInput: 'DD.MM.YYYY',\n//   },\n//   display: {\n//     dateInput: 'input',\n//     monthYearLabel: 'monthYearLabel',\n//     dateA11yLabel: 'LL',\n//     monthYearA11yLabel: 'MMMM YYYY',\n//   }\n// };\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'https://dev.cargodrom.com/api/1.0';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ApiConfiguration } from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    let alreadySerialized = false;\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          value = value.join(';');\n          alreadySerialized = true;\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n          alreadySerialized = true\n        }\n      }\n    }\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n\n  // @ts-ignore\n  serializeValue(value: any, separator = ','): string {\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\n    result = result.replace(/%3D/g, '=');\n    result = result.replace(/%3B/g, ';');\n    result = result.replace(/%2C/g, ',');\n    return result;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: Array<[string, string]> = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n\n    /** Allow passing HttpContext for HttpClient */\n    context?: HttpContext;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress,\n      context: options.context\n    });\n  }\n}\n","export { CargoService } from './services/cargo.service';\nexport { CompanyService } from './services/company.service';\nexport { ContractorService } from './services/contractor.service';\nexport { CustomerService } from './services/customer.service';\nexport { DataService } from './services/data.service';\nexport { DirectionService } from './services/direction.service';\nexport { FileService } from './services/file.service';\nexport { MessageService } from './services/message.service';\nexport { OrderService } from './services/order.service';\nexport { RequestService } from './services/request.service';\nexport { SettingsService } from './services/settings.service';\nexport { SystemService } from './services/system.service';\nexport { TransportService } from './services/transport.service';\nexport { UserService } from './services/user.service';\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Груз\n */\n@Injectable({ providedIn: 'root' })\nexport class CargoService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `cargoPackage()` */\n  static readonly CargoPackagePath = '/cargo_package';\n\n  /**\n   * Вид упаковки.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cargoPackage()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cargoPackage$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, CargoService.CargoPackagePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Вид упаковки.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `cargoPackage$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cargoPackage(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.cargoPackage$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `cargoType()` */\n  static readonly CargoTypePath = '/cargo_type';\n\n  /**\n   * Вид груза.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `cargoType()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cargoType$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Параметры\n */\n'param'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, CargoService.CargoTypePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Параметры\n         */\n        'param'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Вид груза.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `cargoType$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  cargoType(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Параметры\n */\n'param'?: string;\n}>> {\n    return this.cargoType$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Параметры\n */\n'param'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Параметры\n */\n'param'?: string;\n}> => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Работа с компаниями\n */\n@Injectable({ providedIn: 'root' })\nexport class CompanyService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `companyList()` */\n  static readonly CompanyListPath = '/company_list';\n\n  /**\n   * Компания: список.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name'?: string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_fio'?: string;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование полное\n         */\n        'name'?: string;\n        \n        /**\n         * Наименование сокращенное\n         */\n        'name_short'?: string;\n        \n        /**\n         * Юридический адрес\n         */\n        'jur_address'?: string;\n        \n        /**\n         * Почтовый адрес\n         */\n        'post_address'?: string;\n        \n        /**\n         * ИНН\n         */\n        'inn'?: string;\n        \n        /**\n         * КПП\n         */\n        'kpp'?: string;\n        \n        /**\n         * ОГРН\n         */\n        'ogrn'?: string;\n        \n        /**\n         * ОКПО\n         */\n        'okpo'?: string;\n        \n        /**\n         * Номер телефона\n         */\n        'phone'?: string;\n        \n        /**\n         * Email\n         */\n        'email'?: string;\n        \n        /**\n         * Вебсайт\n         */\n        'website'?: string;\n        \n        /**\n         * Skype\n         */\n        'skype'?: string;\n        \n        /**\n         * Ф.И.О.\n         */\n        'responsible_person_id'?: number;\n        \n        /**\n         * Ф.И.О.\n         */\n        'responsible_person_fio'?: string;\n        \n        /**\n         * Должность\n         */\n        'responsible_person_position'?: string;\n        \n        /**\n         * Основание\n         */\n        'responsible_person_base'?: string;\n        \n        /**\n         * Ф.И.О.\n         */\n        'chief_accountant_id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'bank_name'?: string;\n        \n        /**\n         * БИК\n         */\n        'bank_bik'?: string;\n        \n        /**\n         * КПП\n         */\n        'bank_kpp'?: string;\n        \n        /**\n         * Расчетный счет\n         */\n        'bank_rs'?: string;\n        \n        /**\n         * Корреспондентский счет\n         */\n        'bank_ks'?: string;\n        \n        /**\n         * Валюта счета\n         */\n        'bank_currency'?: string;\n        \n        /**\n         * Full name\n         */\n        'noresident_name'?: string;\n        \n        /**\n         * Address\n         */\n        'noresident_address'?: string;\n        \n        /**\n         * Phone / fax\n         */\n        'noresident_phone'?: string;\n        \n        /**\n         * Email\n         */\n        'noresident_email'?: string;\n        \n        /**\n         * Website\n         */\n        'noresident_website'?: string;\n        \n        /**\n         * Skype\n         */\n        'noresident_skype'?: string;\n        \n        /**\n         * Full name\n         */\n        'noresident_signatory_id'?: number;\n        \n        /**\n         * Position\n         */\n        'noresident_signatory_position'?: string;\n        \n        /**\n         * Bank name\n         */\n        'noresident_bank_name'?: string;\n        \n        /**\n         * Bank address\n         */\n        'noresident_bank_address'?: string;\n        \n        /**\n         * Account Number\n         */\n        'noresident_bank_rs'?: string;\n        \n        /**\n         * Account currency\n         */\n        'noresident_bank_currency'?: string;\n        \n        /**\n         * Account name\n         */\n        'noresident_bank_rs_name'?: string;\n        \n        /**\n         * Swift code\n         */\n        'noresident_bank_swift'?: string;\n        \n        /**\n         * Intermediary bank\n         */\n        'noresident_bank_im'?: string;\n        \n        /**\n         * Система налогообложения (ID берем из запроса - tax_system)\n         */\n        'tax_system'?: number;\n        \n        /**\n         * Основная валюта счетов\n         */\n        'base_currency'?: string;\n        \n        /**\n         * Порядок для сортировки (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Главная фирма\n         */\n        'general'?: boolean;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Компания: список.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name'?: string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_fio'?: string;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}> {\n    return this.companyList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name'?: string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_fio'?: string;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>): {\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name'?: string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_fio'?: string;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyInfo()` */\n  static readonly CompanyInfoPath = '/company_info';\n\n  /**\n   * Компания: данные.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyInfo$Response(\n    params: {\n\n    /**\n     * ID компании\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name'?: string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_fio'?: string;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование полное\n         */\n        'name'?: string;\n        \n        /**\n         * Наименование сокращенное\n         */\n        'name_short'?: string;\n        \n        /**\n         * Юридический адрес\n         */\n        'jur_address'?: string;\n        \n        /**\n         * Почтовый адрес\n         */\n        'post_address'?: string;\n        \n        /**\n         * ИНН\n         */\n        'inn'?: string;\n        \n        /**\n         * КПП\n         */\n        'kpp'?: string;\n        \n        /**\n         * ОГРН\n         */\n        'ogrn'?: string;\n        \n        /**\n         * ОКПО\n         */\n        'okpo'?: string;\n        \n        /**\n         * Номер телефона\n         */\n        'phone'?: string;\n        \n        /**\n         * Email\n         */\n        'email'?: string;\n        \n        /**\n         * Вебсайт\n         */\n        'website'?: string;\n        \n        /**\n         * Skype\n         */\n        'skype'?: string;\n        \n        /**\n         * Ф.И.О.\n         */\n        'responsible_person_id'?: number;\n        \n        /**\n         * Ф.И.О.\n         */\n        'responsible_person_fio'?: string;\n        \n        /**\n         * Должность\n         */\n        'responsible_person_position'?: string;\n        \n        /**\n         * Основание\n         */\n        'responsible_person_base'?: string;\n        \n        /**\n         * Ф.И.О.\n         */\n        'chief_accountant_id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'bank_name'?: string;\n        \n        /**\n         * БИК\n         */\n        'bank_bik'?: string;\n        \n        /**\n         * КПП\n         */\n        'bank_kpp'?: string;\n        \n        /**\n         * Расчетный счет\n         */\n        'bank_rs'?: string;\n        \n        /**\n         * Корреспондентский счет\n         */\n        'bank_ks'?: string;\n        \n        /**\n         * Валюта счета\n         */\n        'bank_currency'?: string;\n        \n        /**\n         * Full name\n         */\n        'noresident_name'?: string;\n        \n        /**\n         * Address\n         */\n        'noresident_address'?: string;\n        \n        /**\n         * Phone / fax\n         */\n        'noresident_phone'?: string;\n        \n        /**\n         * Email\n         */\n        'noresident_email'?: string;\n        \n        /**\n         * Website\n         */\n        'noresident_website'?: string;\n        \n        /**\n         * Skype\n         */\n        'noresident_skype'?: string;\n        \n        /**\n         * Full name\n         */\n        'noresident_signatory_id'?: number;\n        \n        /**\n         * Position\n         */\n        'noresident_signatory_position'?: string;\n        \n        /**\n         * Bank name\n         */\n        'noresident_bank_name'?: string;\n        \n        /**\n         * Bank address\n         */\n        'noresident_bank_address'?: string;\n        \n        /**\n         * Account Number\n         */\n        'noresident_bank_rs'?: string;\n        \n        /**\n         * Account currency\n         */\n        'noresident_bank_currency'?: string;\n        \n        /**\n         * Account name\n         */\n        'noresident_bank_rs_name'?: string;\n        \n        /**\n         * Swift code\n         */\n        'noresident_bank_swift'?: string;\n        \n        /**\n         * Intermediary bank\n         */\n        'noresident_bank_im'?: string;\n        \n        /**\n         * Система налогообложения (ID берем из запроса - tax_system)\n         */\n        'tax_system'?: number;\n        \n        /**\n         * Основная валюта счетов\n         */\n        'base_currency'?: string;\n        \n        /**\n         * Порядок для сортировки (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Главная фирма\n         */\n        'general'?: boolean;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Компания: данные.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyInfo(\n    params: {\n\n    /**\n     * ID компании\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name'?: string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_fio'?: string;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> {\n    return this.companyInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name'?: string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_fio'?: string;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name'?: string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_fio'?: string;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyCreate()` */\n  static readonly CompanyCreatePath = '/company_create';\n\n  /**\n   * Компания: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование полное\n */\n'name': string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Компания: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyCreate(\n    params?: {\n      body?: {\n\n/**\n * Наименование полное\n */\n'name': string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyUpdate()` */\n  static readonly CompanyUpdatePath = '/company_update';\n\n  /**\n   * Компания: обновление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name': string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Компания: обновление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование полное\n */\n'name': string;\n\n/**\n * Наименование сокращенное\n */\n'name_short'?: string;\n\n/**\n * Юридический адрес\n */\n'jur_address'?: string;\n\n/**\n * Почтовый адрес\n */\n'post_address'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Вебсайт\n */\n'website'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Ф.И.О.\n */\n'responsible_person_id'?: number;\n\n/**\n * Должность\n */\n'responsible_person_position'?: string;\n\n/**\n * Основание\n */\n'responsible_person_base'?: string;\n\n/**\n * Ф.И.О.\n */\n'chief_accountant_id'?: number;\n\n/**\n * Наименование\n */\n'bank_name'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_rs'?: string;\n\n/**\n * Корреспондентский счет\n */\n'bank_ks'?: string;\n\n/**\n * Валюта счета\n */\n'bank_currency'?: string;\n\n/**\n * Full name\n */\n'noresident_name'?: string;\n\n/**\n * Address\n */\n'noresident_address'?: string;\n\n/**\n * Phone / fax\n */\n'noresident_phone'?: string;\n\n/**\n * Email\n */\n'noresident_email'?: string;\n\n/**\n * Website\n */\n'noresident_website'?: string;\n\n/**\n * Skype\n */\n'noresident_skype'?: string;\n\n/**\n * Full name\n */\n'noresident_signatory_id'?: number;\n\n/**\n * Position\n */\n'noresident_signatory_position'?: string;\n\n/**\n * Bank name\n */\n'noresident_bank_name'?: string;\n\n/**\n * Bank address\n */\n'noresident_bank_address'?: string;\n\n/**\n * Account Number\n */\n'noresident_bank_rs'?: string;\n\n/**\n * Account currency\n */\n'noresident_bank_currency'?: string;\n\n/**\n * Account name\n */\n'noresident_bank_rs_name'?: string;\n\n/**\n * Swift code\n */\n'noresident_bank_swift'?: string;\n\n/**\n * Intermediary bank\n */\n'noresident_bank_im'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - tax_system)\n */\n'tax_system'?: number;\n\n/**\n * Основная валюта счетов\n */\n'base_currency'?: string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Главная фирма\n */\n'general'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyDelete()` */\n  static readonly CompanyDeletePath = '/company_delete';\n\n  /**\n   * Компания: удаление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого компании\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Компания: удаление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого компании\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyDepartmentList()` */\n  static readonly CompanyDepartmentListPath = '/company_department_list';\n\n  /**\n   * Подразделения: список.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyDepartmentList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyDepartmentList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество должностей\n */\n'count_position'?: number;\n\n/**\n * Количество сотрудников\n */\n'count_user'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Руководитель подразделения\n */\n'leader_user'?: string;\n\n/**\n * ID Руководителя подразделения\n */\n'leader_user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyDepartmentListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Количество должностей\n         */\n        'count_position'?: number;\n        \n        /**\n         * Количество сотрудников\n         */\n        'count_user'?: number;\n        \n        /**\n         * Порядок (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Руководитель подразделения\n         */\n        'leader_user'?: string;\n        \n        /**\n         * ID Руководителя подразделения\n         */\n        'leader_user_id'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подразделения: список.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyDepartmentList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyDepartmentList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество должностей\n */\n'count_position'?: number;\n\n/**\n * Количество сотрудников\n */\n'count_user'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Руководитель подразделения\n */\n'leader_user'?: string;\n\n/**\n * ID Руководителя подразделения\n */\n'leader_user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}> {\n    return this.companyDepartmentList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество должностей\n */\n'count_position'?: number;\n\n/**\n * Количество сотрудников\n */\n'count_user'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Руководитель подразделения\n */\n'leader_user'?: string;\n\n/**\n * ID Руководителя подразделения\n */\n'leader_user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>): {\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество должностей\n */\n'count_position'?: number;\n\n/**\n * Количество сотрудников\n */\n'count_user'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Руководитель подразделения\n */\n'leader_user'?: string;\n\n/**\n * ID Руководителя подразделения\n */\n'leader_user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyDepartmentInfo()` */\n  static readonly CompanyDepartmentInfoPath = '/company_department_info';\n\n  /**\n   * Подразделения: данные.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyDepartmentInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyDepartmentInfo$Response(\n    params?: {\n\n    /**\n     * ID подразделения\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество должностей\n */\n'count_position'?: number;\n\n/**\n * Количество сотрудников\n */\n'count_user'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * ID Руководителя подразделения\n */\n'leader_user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyDepartmentInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Количество должностей\n         */\n        'count_position'?: number;\n        \n        /**\n         * Количество сотрудников\n         */\n        'count_user'?: number;\n        \n        /**\n         * Порядок (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * ID Руководителя подразделения\n         */\n        'leader_user_id'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подразделения: данные.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyDepartmentInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyDepartmentInfo(\n    params?: {\n\n    /**\n     * ID подразделения\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество должностей\n */\n'count_position'?: number;\n\n/**\n * Количество сотрудников\n */\n'count_user'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * ID Руководителя подразделения\n */\n'leader_user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> {\n    return this.companyDepartmentInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество должностей\n */\n'count_position'?: number;\n\n/**\n * Количество сотрудников\n */\n'count_user'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * ID Руководителя подразделения\n */\n'leader_user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>): {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество должностей\n */\n'count_position'?: number;\n\n/**\n * Количество сотрудников\n */\n'count_user'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * ID Руководителя подразделения\n */\n'leader_user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyDepartmentCreate()` */\n  static readonly CompanyDepartmentCreatePath = '/company_department_create';\n\n  /**\n   * Подразделения: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyDepartmentCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyDepartmentCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyDepartmentCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подразделения: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyDepartmentCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyDepartmentCreate(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyDepartmentCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyDepartmentUpdate()` */\n  static readonly CompanyDepartmentUpdatePath = '/company_department_update';\n\n  /**\n   * Подразделения: обновление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyDepartmentUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyDepartmentUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID изменяемого подразделения\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyDepartmentUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подразделения: обновление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyDepartmentUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyDepartmentUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID изменяемого подразделения\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyDepartmentUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyDepartmentDelete()` */\n  static readonly CompanyDepartmentDeletePath = '/company_department_delete';\n\n  /**\n   * Подразделения: удаление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyDepartmentDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyDepartmentDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого подразделения\n */\n'id': number;\n\n/**\n * Удалять вместе с должностями\n */\n'with_position'?: boolean;\n\n/**\n * Удалять вместе с сотрудниками\n */\n'with_staff'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyDepartmentDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подразделения: удаление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyDepartmentDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyDepartmentDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого подразделения\n */\n'id': number;\n\n/**\n * Удалять вместе с должностями\n */\n'with_position'?: boolean;\n\n/**\n * Удалять вместе с сотрудниками\n */\n'with_staff'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyDepartmentDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyPositionList()` */\n  static readonly CompanyPositionListPath = '/company_position_list';\n\n  /**\n   * Должности: список.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyPositionList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyPositionList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyPositionListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n         */\n        'permission'?: {\n        };\n        \n        /**\n         * Порядок для сортировки (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Должности: список.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyPositionList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyPositionList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}> {\n    return this.companyPositionList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>): {\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyPositionInfo()` */\n  static readonly CompanyPositionInfoPath = '/company_position_info';\n\n  /**\n   * Должности: данные.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyPositionInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyPositionInfo$Response(\n    params: {\n\n    /**\n     * ID должности\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyPositionInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n         */\n        'permission'?: {\n        };\n        \n        /**\n         * Порядок для сортировки (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Должности: данные.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyPositionInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyPositionInfo(\n    params: {\n\n    /**\n     * ID должности\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> {\n    return this.companyPositionInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyPositionCreate()` */\n  static readonly CompanyPositionCreatePath = '/company_position_create';\n\n  /**\n   * Должности: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyPositionCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyPositionCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyPositionCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Должности: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyPositionCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyPositionCreate(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyPositionCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyPositionUpdate()` */\n  static readonly CompanyPositionUpdatePath = '/company_position_update';\n\n  /**\n   * Должности: обновление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyPositionUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyPositionUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyPositionUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Должности: обновление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyPositionUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyPositionUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Права доступа к разделам {permission_object: {permission_action: permission_rule}} (ID берем из запроса - settings_get)\n */\n'permission'?: {\n};\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyPositionUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyPositionDelete()` */\n  static readonly CompanyPositionDeletePath = '/company_position_delete';\n\n  /**\n   * Должности: удаление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyPositionDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyPositionDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой должности\n */\n'id': number;\n\n/**\n * Удалять сотрудников с этой должностью\n */\n'delete_staff'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyPositionDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Должности: удаление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyPositionDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyPositionDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой должности\n */\n'id': number;\n\n/**\n * Удалять сотрудников с этой должностью\n */\n'delete_staff'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyPositionDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyEmployeeList()` */\n  static readonly CompanyEmployeeListPath = '/company_employee_list';\n\n  /**\n   * Сотрудники: список.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyEmployeeList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyEmployeeList$Response(\n    params?: {\n\n    /**\n     * ID подразделения\n     */\n      department_id?: number;\n\n    /**\n     * ID должности\n     */\n      position_id?: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * Наименование компании\n */\n'company_name'?: string;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * Наименование подразделения\n */\n'department_name'?: string;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Наименование должности\n */\n'position_name'?: string;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Пароль создан\n */\n'has_password'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyEmployeeListPath, 'get');\n    if (params) {\n      rb.query('department_id', params.department_id, {});\n      rb.query('position_id', params.position_id, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Email\n         */\n        'email'?: string;\n        \n        /**\n         * Пароль\n         */\n        'password'?: string;\n        \n        /**\n         * Доступ в систему\n         */\n        'access'?: boolean;\n        \n        /**\n         * Телефон\n         */\n        'phone'?: string;\n        \n        /**\n         * Skype\n         */\n        'skype'?: string;\n        \n        /**\n         * ФИО\n         */\n        'name'?: string;\n        \n        /**\n         * Фамилия\n         */\n        'name_f'?: string;\n        \n        /**\n         * Имя\n         */\n        'name_i'?: string;\n        \n        /**\n         * Отчество\n         */\n        'name_o'?: string;\n        \n        /**\n         * Дата рождения\n         */\n        'birth_date'?: string;\n        \n        /**\n         * Дата трудоустройства\n         */\n        'employment_date'?: string;\n        \n        /**\n         * Дата увольнения\n         */\n        'dismissal_date'?: string;\n        \n        /**\n         * ID компании\n         */\n        'company_id'?: number;\n        \n        /**\n         * Наименование компании\n         */\n        'company_name'?: string;\n        \n        /**\n         * ID подразделения\n         */\n        'department_id'?: number;\n        \n        /**\n         * Наименование подразделения\n         */\n        'department_name'?: string;\n        \n        /**\n         * ID должности\n         */\n        'position_id'?: number;\n        \n        /**\n         * Наименование должности\n         */\n        'position_name'?: string;\n        \n        /**\n         * Руководитель подразделения\n         */\n        'department_leader'?: boolean;\n        \n        /**\n         * Порядок для сортировки (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Пароль создан\n         */\n        'has_password'?: boolean;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сотрудники: список.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyEmployeeList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyEmployeeList(\n    params?: {\n\n    /**\n     * ID подразделения\n     */\n      department_id?: number;\n\n    /**\n     * ID должности\n     */\n      position_id?: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * Наименование компании\n */\n'company_name'?: string;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * Наименование подразделения\n */\n'department_name'?: string;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Наименование должности\n */\n'position_name'?: string;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Пароль создан\n */\n'has_password'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}> {\n    return this.companyEmployeeList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * Наименование компании\n */\n'company_name'?: string;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * Наименование подразделения\n */\n'department_name'?: string;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Наименование должности\n */\n'position_name'?: string;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Пароль создан\n */\n'has_password'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>): {\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * Наименование компании\n */\n'company_name'?: string;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * Наименование подразделения\n */\n'department_name'?: string;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Наименование должности\n */\n'position_name'?: string;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Пароль создан\n */\n'has_password'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyEmployeeInfo()` */\n  static readonly CompanyEmployeeInfoPath = '/company_employee_info';\n\n  /**\n   * Сотрудники: данные.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyEmployeeInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyEmployeeInfo$Response(\n    params: {\n\n    /**\n     * ID сотрудника\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * Наименование компании\n */\n'company_name'?: string;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * Наименование подразделения\n */\n'department_name'?: string;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Наименование должности\n */\n'position_name'?: string;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Пароль создан\n */\n'has_password'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyEmployeeInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Email\n         */\n        'email'?: string;\n        \n        /**\n         * Пароль\n         */\n        'password'?: string;\n        \n        /**\n         * Доступ в систему\n         */\n        'access'?: boolean;\n        \n        /**\n         * Телефон\n         */\n        'phone'?: string;\n        \n        /**\n         * Skype\n         */\n        'skype'?: string;\n        \n        /**\n         * ФИО\n         */\n        'name'?: string;\n        \n        /**\n         * Фамилия\n         */\n        'name_f'?: string;\n        \n        /**\n         * Имя\n         */\n        'name_i'?: string;\n        \n        /**\n         * Отчество\n         */\n        'name_o'?: string;\n        \n        /**\n         * Дата рождения\n         */\n        'birth_date'?: string;\n        \n        /**\n         * Дата трудоустройства\n         */\n        'employment_date'?: string;\n        \n        /**\n         * Дата увольнения\n         */\n        'dismissal_date'?: string;\n        \n        /**\n         * ID компании\n         */\n        'company_id'?: number;\n        \n        /**\n         * Наименование компании\n         */\n        'company_name'?: string;\n        \n        /**\n         * ID подразделения\n         */\n        'department_id'?: number;\n        \n        /**\n         * Наименование подразделения\n         */\n        'department_name'?: string;\n        \n        /**\n         * ID должности\n         */\n        'position_id'?: number;\n        \n        /**\n         * Наименование должности\n         */\n        'position_name'?: string;\n        \n        /**\n         * Руководитель подразделения\n         */\n        'department_leader'?: boolean;\n        \n        /**\n         * Порядок для сортировки (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Пароль создан\n         */\n        'has_password'?: boolean;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сотрудники: данные.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyEmployeeInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  companyEmployeeInfo(\n    params: {\n\n    /**\n     * ID сотрудника\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * Наименование компании\n */\n'company_name'?: string;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * Наименование подразделения\n */\n'department_name'?: string;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Наименование должности\n */\n'position_name'?: string;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Пароль создан\n */\n'has_password'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> {\n    return this.companyEmployeeInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * Наименование компании\n */\n'company_name'?: string;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * Наименование подразделения\n */\n'department_name'?: string;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Наименование должности\n */\n'position_name'?: string;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Пароль создан\n */\n'has_password'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * Наименование компании\n */\n'company_name'?: string;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * Наименование подразделения\n */\n'department_name'?: string;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Наименование должности\n */\n'position_name'?: string;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Пароль создан\n */\n'has_password'?: boolean;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyEmployeeCreate()` */\n  static readonly CompanyEmployeeCreatePath = '/company_employee_create';\n\n  /**\n   * Сотрудники: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyEmployeeCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyEmployeeCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Фамилия\n */\n'name_f': string;\n\n/**\n * Имя\n */\n'name_i': string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id': number;\n\n/**\n * ID подразделения\n */\n'department_id': number;\n\n/**\n * ID должности\n */\n'position_id': number;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyEmployeeCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сотрудники: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyEmployeeCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyEmployeeCreate(\n    params?: {\n      body?: {\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Фамилия\n */\n'name_f': string;\n\n/**\n * Имя\n */\n'name_i': string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id': number;\n\n/**\n * ID подразделения\n */\n'department_id': number;\n\n/**\n * ID должности\n */\n'position_id': number;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyEmployeeCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyEmployeeUpdate()` */\n  static readonly CompanyEmployeeUpdatePath = '/company_employee_update';\n\n  /**\n   * Сотрудники: обновление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyEmployeeUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyEmployeeUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyEmployeeUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сотрудники: обновление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyEmployeeUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyEmployeeUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Пароль\n */\n'password'?: string;\n\n/**\n * Доступ в систему\n */\n'access'?: boolean;\n\n/**\n * Телефон\n */\n'phone'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Дата рождения\n */\n'birth_date'?: string;\n\n/**\n * Дата трудоустройства\n */\n'employment_date'?: string;\n\n/**\n * Дата увольнения\n */\n'dismissal_date'?: string;\n\n/**\n * ID компании\n */\n'company_id'?: number;\n\n/**\n * ID подразделения\n */\n'department_id'?: number;\n\n/**\n * ID должности\n */\n'position_id'?: number;\n\n/**\n * Руководитель подразделения\n */\n'department_leader'?: boolean;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyEmployeeUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `companyEmployeeDelete()` */\n  static readonly CompanyEmployeeDeletePath = '/company_employee_delete';\n\n  /**\n   * Сотрудники: удаление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `companyEmployeeDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyEmployeeDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого сотрудника\n */\n'id'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CompanyService.CompanyEmployeeDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сотрудники: удаление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `companyEmployeeDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  companyEmployeeDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого сотрудника\n */\n'id'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.companyEmployeeDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Работа с контрагентами\n */\n@Injectable({ providedIn: 'root' })\nexport class ContractorService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `contractorList()` */\n  static readonly ContractorListPath = '/contractor_list';\n\n  /**\n   * Список контрагентов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'name' | 'rating_nps_text' | 'trade_rating' | 'allow_trade' | 'avg_answer_time';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения\n */\n'country_name'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город\n */\n'city_name'?: string;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения\n */\n'language_name'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика\n */\n'type_name'?: string;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях\n */\n'association_name'?: Array<string>;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения\n */\n'tax_name'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса\n */\n'request_format_name'?: string;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Участник торгов\n */\n'allow_trade_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps_text'?: string;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps'?: number;\n\n/**\n * Средняя скорость ответа\n */\n'avg_answer_time': string;\n\n/**\n * Отзывы по работе с подрядчиком (всего)\n */\n'review_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (позитивные)\n */\n'review_positive_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (негативные)\n */\n'review_negative_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (нейтральные)\n */\n'review_neutral_count'?: number;\n\n/**\n * Всего выполнено перевозок\n */\n'order_count'?: number;\n\n/**\n * % успешных торгов\n */\n'trade_percent'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Количество контактных лиц\n */\n'contact_count'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Контактные лица\n */\n'contact_name'?: string;\n\n/**\n * Контактная информация\n */\n'contact_info'?: string;\n\n/**\n * Контактная информация для таблицы\n */\n'contact_info_tbl'?: string;\n\n/**\n * Специализация\n */\n'specialization'?: Array<string>;\n\n/**\n * Специализация\n */\n'specialization_text'?: any;\n\n/**\n * Загрузка грузов\n */\n'container'?: Array<string>;\n\n/**\n * Загрузка грузов\n */\n'container_text'?: string;\n\n/**\n * Время создания\n */\n'time'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Запрос на торги отправлен\n */\n'bidding_send'?: boolean;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование подрядчика\n         */\n        'name'?: string;\n        \n        /**\n         * Идентификатор (ИНН, Rec № и пр.)\n         */\n        'ind'?: string;\n        \n        /**\n         * Страна нахождения\n         */\n        'country_name'?: string;\n        \n        /**\n         * Страна нахождения (ID берем из запроса - direction_country)\n         */\n        'country_id'?: number;\n        \n        /**\n         * Город\n         */\n        'city_name'?: string;\n        \n        /**\n         * Город (ID берем из запроса - direction_city)\n         */\n        'city_id'?: number;\n        \n        /**\n         * Адрес\n         */\n        'address'?: string;\n        \n        /**\n         * Общий телефон\n         */\n        'phone'?: string;\n        \n        /**\n         * Сайт компании\n         */\n        'web'?: string;\n        \n        /**\n         * Язык общения\n         */\n        'language_name'?: string;\n        \n        /**\n         * Язык общения (ID берем из запроса - settings_get из поля language)\n         */\n        'language_id'?: string;\n        \n        /**\n         * Агент транспортной компании\n         */\n        'carrier_name'?: string;\n        \n        /**\n         * Агент транспортной компании (ID берем из запроса - transport_carrier)\n         */\n        'carrier_id'?: number;\n        \n        /**\n         * Вид подрядчика\n         */\n        'type_name'?: string;\n        \n        /**\n         * Вид подрядчика (ID берем из запроса - contractor_type)\n         */\n        'type_id'?: number;\n        \n        /**\n         * Тип контрагента\n         */\n        'counterparty_name'?: string;\n        \n        /**\n         * Тип контрагента (ID берем из запроса - system_counterparty)\n         */\n        'counterparty_id'?: number;\n        \n        /**\n         * Членство в ассоциациях\n         */\n        'association_name'?: Array<string>;\n        \n        /**\n         * Членство в ассоциациях (ID берем из запроса - system_association)\n         */\n        'association_id'?: Array<string>;\n        \n        /**\n         * Система налогообложения\n         */\n        'tax_name'?: string;\n        \n        /**\n         * Система налогообложения (ID берем из запроса - system_tax_system)\n         */\n        'tax_id'?: number;\n        \n        /**\n         * Формат отправки запроса\n         */\n        'request_format_name'?: string;\n        \n        /**\n         * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n         */\n        'request_format_id'?: string;\n        \n        /**\n         * Участник торгов\n         */\n        'allow_trade'?: boolean;\n        \n        /**\n         * Валюта (ID берем из запроса - system_currency)\n         */\n        'currency'?: number;\n        \n        /**\n         * Участник торгов\n         */\n        'allow_trade_text'?: string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps_text'?: string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps'?: number;\n        \n        /**\n         * Моя оценка подрядчика (NPS)\n         */\n        'user_rating_nps_text'?: string;\n        \n        /**\n         * Моя оценка подрядчика (NPS)\n         */\n        'user_rating_nps'?: number;\n        \n        /**\n         * Средняя скорость ответа\n         */\n        'avg_answer_time': string;\n        \n        /**\n         * Отзывы по работе с подрядчиком (всего)\n         */\n        'review_count'?: number;\n        \n        /**\n         * Отзывы по работе с подрядчиком (позитивные)\n         */\n        'review_positive_count'?: number;\n        \n        /**\n         * Отзывы по работе с подрядчиком (негативные)\n         */\n        'review_negative_count'?: number;\n        \n        /**\n         * Отзывы по работе с подрядчиком (нейтральные)\n         */\n        'review_neutral_count'?: number;\n        \n        /**\n         * Всего выполнено перевозок\n         */\n        'order_count'?: number;\n        \n        /**\n         * % успешных торгов\n         */\n        'trade_percent'?: number;\n        \n        /**\n         * Участие в торгах (общее количество)\n         */\n        'trade_count'?: number;\n        \n        /**\n         * Количество выигранных торгов\n         */\n        'trade_success_count'?: number;\n        \n        /**\n         * Количество проигранных торгов\n         */\n        'trade_fail_count'?: number;\n        \n        /**\n         * Участие в торгах (результаты)\n         */\n        'trade_count_text'?: number;\n        \n        /**\n         * Количество контактных лиц\n         */\n        'contact_count'?: number;\n        \n        /**\n         * Контактные лица\n         */\n        'contacts'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ФИО\n         */\n        'name'?: string;\n        \n        /**\n         * Фамилия\n         */\n        'name_f'?: string;\n        \n        /**\n         * Имя\n         */\n        'name_i'?: string;\n        \n        /**\n         * Отчество\n         */\n        'name_o'?: string;\n        \n        /**\n         * Должность\n         */\n        'position'?: string;\n        \n        /**\n         * Местонахождение офиса\n         */\n        'city_name'?: string;\n        \n        /**\n         * Местонахождение офиса (ID берем из запроса - direction_city)\n         */\n        'city_id'?: number;\n        \n        /**\n         * Офисный телефон\n         */\n        'phone'?: string;\n        \n        /**\n         * Мобильный телефон\n         */\n        'mobile_phone'?: string;\n        \n        /**\n         * E-mail\n         */\n        'email'?: string;\n        \n        /**\n         * Skype\n         */\n        'skype'?: string;\n        \n        /**\n         * Telegram\n         */\n        'telegram'?: string;\n        \n        /**\n         * Whatsapp\n         */\n        'whatsapp'?: string;\n        \n        /**\n         * WeChat\n         */\n        'wechat'?: string;\n        \n        /**\n         * Ответственный за направления\n         */\n        'direction'?: Array<{\n        \n        /**\n         * Страна отправления\n         */\n        'direction_departure': number;\n        \n        /**\n         * Страна прибытия\n         */\n        'direction_arrival': number;\n        \n        /**\n         * Транспорт\n         */\n        'direction_items': Array<string>;\n        }>;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n        \n        /**\n         * Контактные лица\n         */\n        'contact_name'?: string;\n        \n        /**\n         * Контактная информация\n         */\n        'contact_info'?: string;\n        \n        /**\n         * Контактная информация для таблицы\n         */\n        'contact_info_tbl'?: string;\n        \n        /**\n         * Специализация\n         */\n        'specialization'?: Array<string>;\n        \n        /**\n         * Специализация\n         */\n        'specialization_text'?: any;\n        \n        /**\n         * Загрузка грузов\n         */\n        'container'?: Array<string>;\n        \n        /**\n         * Загрузка грузов\n         */\n        'container_text'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        \n        /**\n         * Запрос на торги отправлен\n         */\n        'bidding_send'?: boolean;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Список контрагентов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'name' | 'rating_nps_text' | 'trade_rating' | 'allow_trade' | 'avg_answer_time';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения\n */\n'country_name'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город\n */\n'city_name'?: string;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения\n */\n'language_name'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика\n */\n'type_name'?: string;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях\n */\n'association_name'?: Array<string>;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения\n */\n'tax_name'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса\n */\n'request_format_name'?: string;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Участник торгов\n */\n'allow_trade_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps_text'?: string;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps'?: number;\n\n/**\n * Средняя скорость ответа\n */\n'avg_answer_time': string;\n\n/**\n * Отзывы по работе с подрядчиком (всего)\n */\n'review_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (позитивные)\n */\n'review_positive_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (негативные)\n */\n'review_negative_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (нейтральные)\n */\n'review_neutral_count'?: number;\n\n/**\n * Всего выполнено перевозок\n */\n'order_count'?: number;\n\n/**\n * % успешных торгов\n */\n'trade_percent'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Количество контактных лиц\n */\n'contact_count'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Контактные лица\n */\n'contact_name'?: string;\n\n/**\n * Контактная информация\n */\n'contact_info'?: string;\n\n/**\n * Контактная информация для таблицы\n */\n'contact_info_tbl'?: string;\n\n/**\n * Специализация\n */\n'specialization'?: Array<string>;\n\n/**\n * Специализация\n */\n'specialization_text'?: any;\n\n/**\n * Загрузка грузов\n */\n'container'?: Array<string>;\n\n/**\n * Загрузка грузов\n */\n'container_text'?: string;\n\n/**\n * Время создания\n */\n'time'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Запрос на торги отправлен\n */\n'bidding_send'?: boolean;\n}>;\n}> {\n    return this.contractorList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения\n */\n'country_name'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город\n */\n'city_name'?: string;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения\n */\n'language_name'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика\n */\n'type_name'?: string;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях\n */\n'association_name'?: Array<string>;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения\n */\n'tax_name'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса\n */\n'request_format_name'?: string;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Участник торгов\n */\n'allow_trade_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps_text'?: string;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps'?: number;\n\n/**\n * Средняя скорость ответа\n */\n'avg_answer_time': string;\n\n/**\n * Отзывы по работе с подрядчиком (всего)\n */\n'review_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (позитивные)\n */\n'review_positive_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (негативные)\n */\n'review_negative_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (нейтральные)\n */\n'review_neutral_count'?: number;\n\n/**\n * Всего выполнено перевозок\n */\n'order_count'?: number;\n\n/**\n * % успешных торгов\n */\n'trade_percent'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Количество контактных лиц\n */\n'contact_count'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Контактные лица\n */\n'contact_name'?: string;\n\n/**\n * Контактная информация\n */\n'contact_info'?: string;\n\n/**\n * Контактная информация для таблицы\n */\n'contact_info_tbl'?: string;\n\n/**\n * Специализация\n */\n'specialization'?: Array<string>;\n\n/**\n * Специализация\n */\n'specialization_text'?: any;\n\n/**\n * Загрузка грузов\n */\n'container'?: Array<string>;\n\n/**\n * Загрузка грузов\n */\n'container_text'?: string;\n\n/**\n * Время создания\n */\n'time'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Запрос на торги отправлен\n */\n'bidding_send'?: boolean;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения\n */\n'country_name'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город\n */\n'city_name'?: string;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения\n */\n'language_name'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика\n */\n'type_name'?: string;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях\n */\n'association_name'?: Array<string>;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения\n */\n'tax_name'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса\n */\n'request_format_name'?: string;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Участник торгов\n */\n'allow_trade_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps_text'?: string;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps'?: number;\n\n/**\n * Средняя скорость ответа\n */\n'avg_answer_time': string;\n\n/**\n * Отзывы по работе с подрядчиком (всего)\n */\n'review_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (позитивные)\n */\n'review_positive_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (негативные)\n */\n'review_negative_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (нейтральные)\n */\n'review_neutral_count'?: number;\n\n/**\n * Всего выполнено перевозок\n */\n'order_count'?: number;\n\n/**\n * % успешных торгов\n */\n'trade_percent'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Количество контактных лиц\n */\n'contact_count'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Контактные лица\n */\n'contact_name'?: string;\n\n/**\n * Контактная информация\n */\n'contact_info'?: string;\n\n/**\n * Контактная информация для таблицы\n */\n'contact_info_tbl'?: string;\n\n/**\n * Специализация\n */\n'specialization'?: Array<string>;\n\n/**\n * Специализация\n */\n'specialization_text'?: any;\n\n/**\n * Загрузка грузов\n */\n'container'?: Array<string>;\n\n/**\n * Загрузка грузов\n */\n'container_text'?: string;\n\n/**\n * Время создания\n */\n'time'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Запрос на торги отправлен\n */\n'bidding_send'?: boolean;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorListParam()` */\n  static readonly ContractorListParamPath = '/contractor_list_param';\n\n  /**\n   * Параметры вывода контрагентов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorListParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorListParam$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorListParamPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Параметры поиска\n         */\n        'search'?: Array<{\n        \n        /**\n         * Поиск в заголовке\n         */\n        'header'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск основной\n         */\n        'main'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск расширенный\n         */\n        'additional'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        }>;\n        \n        /**\n         * Параметры таблицы\n         */\n        'table'?: Array<{\n        \n        /**\n         * Блок колонок\n         */\n        'column'?: string;\n        \n        /**\n         * Данные колонок\n         */\n        'items'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Заголовок поля\n         */\n        'title'?: string;\n        \n        /**\n         * Ширина поля\n         */\n        'width'?: number;\n        }>;\n        }>;\n        \n        /**\n         * Параметры сортировки\n         */\n        'order'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Сортировка по умолчанию\n         */\n        'dir'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры вывода контрагентов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorListParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorListParam(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}> {\n    return this.contractorListParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>): {\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorInfo()` */\n  static readonly ContractorInfoPath = '/contractor_info';\n\n  /**\n   * Данные контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorInfo$Response(\n    params: {\n\n    /**\n     * ID контрагента\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения\n */\n'country_name'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город\n */\n'city_name'?: string;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения\n */\n'language_name'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика\n */\n'type_name'?: string;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях\n */\n'association_name'?: Array<string>;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения\n */\n'tax_name'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса\n */\n'request_format_name'?: string;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Участник торгов\n */\n'allow_trade_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps_text'?: string;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps'?: number;\n\n/**\n * Средняя скорость ответа\n */\n'avg_answer_time': string;\n\n/**\n * Отзывы по работе с подрядчиком (всего)\n */\n'review_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (позитивные)\n */\n'review_positive_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (негативные)\n */\n'review_negative_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (нейтральные)\n */\n'review_neutral_count'?: number;\n\n/**\n * Всего выполнено перевозок\n */\n'order_count'?: number;\n\n/**\n * % успешных торгов\n */\n'trade_percent'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Количество контактных лиц\n */\n'contact_count'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Контактные лица\n */\n'contact_name'?: string;\n\n/**\n * Контактная информация\n */\n'contact_info'?: string;\n\n/**\n * Контактная информация для таблицы\n */\n'contact_info_tbl'?: string;\n\n/**\n * Специализация\n */\n'specialization'?: Array<string>;\n\n/**\n * Специализация\n */\n'specialization_text'?: any;\n\n/**\n * Загрузка грузов\n */\n'container'?: Array<string>;\n\n/**\n * Загрузка грузов\n */\n'container_text'?: string;\n\n/**\n * Время создания\n */\n'time'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Запрос на торги отправлен\n */\n'bidding_send'?: boolean;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование подрядчика\n         */\n        'name'?: string;\n        \n        /**\n         * Идентификатор (ИНН, Rec № и пр.)\n         */\n        'ind'?: string;\n        \n        /**\n         * Страна нахождения\n         */\n        'country_name'?: string;\n        \n        /**\n         * Страна нахождения (ID берем из запроса - direction_country)\n         */\n        'country_id'?: number;\n        \n        /**\n         * Город\n         */\n        'city_name'?: string;\n        \n        /**\n         * Город (ID берем из запроса - direction_city)\n         */\n        'city_id'?: number;\n        \n        /**\n         * Адрес\n         */\n        'address'?: string;\n        \n        /**\n         * Общий телефон\n         */\n        'phone'?: string;\n        \n        /**\n         * Сайт компании\n         */\n        'web'?: string;\n        \n        /**\n         * Язык общения\n         */\n        'language_name'?: string;\n        \n        /**\n         * Язык общения (ID берем из запроса - settings_get из поля language)\n         */\n        'language_id'?: string;\n        \n        /**\n         * Агент транспортной компании\n         */\n        'carrier_name'?: string;\n        \n        /**\n         * Агент транспортной компании (ID берем из запроса - transport_carrier)\n         */\n        'carrier_id'?: number;\n        \n        /**\n         * Вид подрядчика\n         */\n        'type_name'?: string;\n        \n        /**\n         * Вид подрядчика (ID берем из запроса - contractor_type)\n         */\n        'type_id'?: number;\n        \n        /**\n         * Тип контрагента\n         */\n        'counterparty_name'?: string;\n        \n        /**\n         * Тип контрагента (ID берем из запроса - system_counterparty)\n         */\n        'counterparty_id'?: number;\n        \n        /**\n         * Членство в ассоциациях\n         */\n        'association_name'?: Array<string>;\n        \n        /**\n         * Членство в ассоциациях (ID берем из запроса - system_association)\n         */\n        'association_id'?: Array<string>;\n        \n        /**\n         * Система налогообложения\n         */\n        'tax_name'?: string;\n        \n        /**\n         * Система налогообложения (ID берем из запроса - system_tax_system)\n         */\n        'tax_id'?: number;\n        \n        /**\n         * Формат отправки запроса\n         */\n        'request_format_name'?: string;\n        \n        /**\n         * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n         */\n        'request_format_id'?: string;\n        \n        /**\n         * Участник торгов\n         */\n        'allow_trade'?: boolean;\n        \n        /**\n         * Валюта (ID берем из запроса - system_currency)\n         */\n        'currency'?: number;\n        \n        /**\n         * Участник торгов\n         */\n        'allow_trade_text'?: string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps_text'?: string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps'?: number;\n        \n        /**\n         * Моя оценка подрядчика (NPS)\n         */\n        'user_rating_nps_text'?: string;\n        \n        /**\n         * Моя оценка подрядчика (NPS)\n         */\n        'user_rating_nps'?: number;\n        \n        /**\n         * Средняя скорость ответа\n         */\n        'avg_answer_time': string;\n        \n        /**\n         * Отзывы по работе с подрядчиком (всего)\n         */\n        'review_count'?: number;\n        \n        /**\n         * Отзывы по работе с подрядчиком (позитивные)\n         */\n        'review_positive_count'?: number;\n        \n        /**\n         * Отзывы по работе с подрядчиком (негативные)\n         */\n        'review_negative_count'?: number;\n        \n        /**\n         * Отзывы по работе с подрядчиком (нейтральные)\n         */\n        'review_neutral_count'?: number;\n        \n        /**\n         * Всего выполнено перевозок\n         */\n        'order_count'?: number;\n        \n        /**\n         * % успешных торгов\n         */\n        'trade_percent'?: number;\n        \n        /**\n         * Участие в торгах (общее количество)\n         */\n        'trade_count'?: number;\n        \n        /**\n         * Количество выигранных торгов\n         */\n        'trade_success_count'?: number;\n        \n        /**\n         * Количество проигранных торгов\n         */\n        'trade_fail_count'?: number;\n        \n        /**\n         * Участие в торгах (результаты)\n         */\n        'trade_count_text'?: number;\n        \n        /**\n         * Количество контактных лиц\n         */\n        'contact_count'?: number;\n        \n        /**\n         * Контактные лица\n         */\n        'contacts'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ФИО\n         */\n        'name'?: string;\n        \n        /**\n         * Фамилия\n         */\n        'name_f'?: string;\n        \n        /**\n         * Имя\n         */\n        'name_i'?: string;\n        \n        /**\n         * Отчество\n         */\n        'name_o'?: string;\n        \n        /**\n         * Должность\n         */\n        'position'?: string;\n        \n        /**\n         * Местонахождение офиса\n         */\n        'city_name'?: string;\n        \n        /**\n         * Местонахождение офиса (ID берем из запроса - direction_city)\n         */\n        'city_id'?: number;\n        \n        /**\n         * Офисный телефон\n         */\n        'phone'?: string;\n        \n        /**\n         * Мобильный телефон\n         */\n        'mobile_phone'?: string;\n        \n        /**\n         * E-mail\n         */\n        'email'?: string;\n        \n        /**\n         * Skype\n         */\n        'skype'?: string;\n        \n        /**\n         * Telegram\n         */\n        'telegram'?: string;\n        \n        /**\n         * Whatsapp\n         */\n        'whatsapp'?: string;\n        \n        /**\n         * WeChat\n         */\n        'wechat'?: string;\n        \n        /**\n         * Ответственный за направления\n         */\n        'direction'?: Array<{\n        \n        /**\n         * Страна отправления\n         */\n        'direction_departure': number;\n        \n        /**\n         * Страна прибытия\n         */\n        'direction_arrival': number;\n        \n        /**\n         * Транспорт\n         */\n        'direction_items': Array<string>;\n        }>;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n        \n        /**\n         * Контактные лица\n         */\n        'contact_name'?: string;\n        \n        /**\n         * Контактная информация\n         */\n        'contact_info'?: string;\n        \n        /**\n         * Контактная информация для таблицы\n         */\n        'contact_info_tbl'?: string;\n        \n        /**\n         * Специализация\n         */\n        'specialization'?: Array<string>;\n        \n        /**\n         * Специализация\n         */\n        'specialization_text'?: any;\n        \n        /**\n         * Загрузка грузов\n         */\n        'container'?: Array<string>;\n        \n        /**\n         * Загрузка грузов\n         */\n        'container_text'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        \n        /**\n         * Запрос на торги отправлен\n         */\n        'bidding_send'?: boolean;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Данные контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorInfo(\n    params: {\n\n    /**\n     * ID контрагента\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения\n */\n'country_name'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город\n */\n'city_name'?: string;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения\n */\n'language_name'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика\n */\n'type_name'?: string;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях\n */\n'association_name'?: Array<string>;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения\n */\n'tax_name'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса\n */\n'request_format_name'?: string;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Участник торгов\n */\n'allow_trade_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps_text'?: string;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps'?: number;\n\n/**\n * Средняя скорость ответа\n */\n'avg_answer_time': string;\n\n/**\n * Отзывы по работе с подрядчиком (всего)\n */\n'review_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (позитивные)\n */\n'review_positive_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (негативные)\n */\n'review_negative_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (нейтральные)\n */\n'review_neutral_count'?: number;\n\n/**\n * Всего выполнено перевозок\n */\n'order_count'?: number;\n\n/**\n * % успешных торгов\n */\n'trade_percent'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Количество контактных лиц\n */\n'contact_count'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Контактные лица\n */\n'contact_name'?: string;\n\n/**\n * Контактная информация\n */\n'contact_info'?: string;\n\n/**\n * Контактная информация для таблицы\n */\n'contact_info_tbl'?: string;\n\n/**\n * Специализация\n */\n'specialization'?: Array<string>;\n\n/**\n * Специализация\n */\n'specialization_text'?: any;\n\n/**\n * Загрузка грузов\n */\n'container'?: Array<string>;\n\n/**\n * Загрузка грузов\n */\n'container_text'?: string;\n\n/**\n * Время создания\n */\n'time'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Запрос на торги отправлен\n */\n'bidding_send'?: boolean;\n}> {\n    return this.contractorInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения\n */\n'country_name'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город\n */\n'city_name'?: string;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения\n */\n'language_name'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика\n */\n'type_name'?: string;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях\n */\n'association_name'?: Array<string>;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения\n */\n'tax_name'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса\n */\n'request_format_name'?: string;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Участник торгов\n */\n'allow_trade_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps_text'?: string;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps'?: number;\n\n/**\n * Средняя скорость ответа\n */\n'avg_answer_time': string;\n\n/**\n * Отзывы по работе с подрядчиком (всего)\n */\n'review_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (позитивные)\n */\n'review_positive_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (негативные)\n */\n'review_negative_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (нейтральные)\n */\n'review_neutral_count'?: number;\n\n/**\n * Всего выполнено перевозок\n */\n'order_count'?: number;\n\n/**\n * % успешных торгов\n */\n'trade_percent'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Количество контактных лиц\n */\n'contact_count'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Контактные лица\n */\n'contact_name'?: string;\n\n/**\n * Контактная информация\n */\n'contact_info'?: string;\n\n/**\n * Контактная информация для таблицы\n */\n'contact_info_tbl'?: string;\n\n/**\n * Специализация\n */\n'specialization'?: Array<string>;\n\n/**\n * Специализация\n */\n'specialization_text'?: any;\n\n/**\n * Загрузка грузов\n */\n'container'?: Array<string>;\n\n/**\n * Загрузка грузов\n */\n'container_text'?: string;\n\n/**\n * Время создания\n */\n'time'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Запрос на торги отправлен\n */\n'bidding_send'?: boolean;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения\n */\n'country_name'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город\n */\n'city_name'?: string;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения\n */\n'language_name'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика\n */\n'type_name'?: string;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях\n */\n'association_name'?: Array<string>;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения\n */\n'tax_name'?: string;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса\n */\n'request_format_name'?: string;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Участник торгов\n */\n'allow_trade_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps_text'?: string;\n\n/**\n * Моя оценка подрядчика (NPS)\n */\n'user_rating_nps'?: number;\n\n/**\n * Средняя скорость ответа\n */\n'avg_answer_time': string;\n\n/**\n * Отзывы по работе с подрядчиком (всего)\n */\n'review_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (позитивные)\n */\n'review_positive_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (негативные)\n */\n'review_negative_count'?: number;\n\n/**\n * Отзывы по работе с подрядчиком (нейтральные)\n */\n'review_neutral_count'?: number;\n\n/**\n * Всего выполнено перевозок\n */\n'order_count'?: number;\n\n/**\n * % успешных торгов\n */\n'trade_percent'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Количество контактных лиц\n */\n'contact_count'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Контактные лица\n */\n'contact_name'?: string;\n\n/**\n * Контактная информация\n */\n'contact_info'?: string;\n\n/**\n * Контактная информация для таблицы\n */\n'contact_info_tbl'?: string;\n\n/**\n * Специализация\n */\n'specialization'?: Array<string>;\n\n/**\n * Специализация\n */\n'specialization_text'?: any;\n\n/**\n * Загрузка грузов\n */\n'container'?: Array<string>;\n\n/**\n * Загрузка грузов\n */\n'container_text'?: string;\n\n/**\n * Время создания\n */\n'time'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Запрос на торги отправлен\n */\n'bidding_send'?: boolean;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorCreate()` */\n  static readonly ContractorCreatePath = '/contractor_create';\n\n  /**\n   * Добавление контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование подрядчика\n */\n'name': string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id': number;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id': number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id': string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id': number;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id': number;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id': string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency': number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Добавление контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorCreate(\n    params?: {\n      body?: {\n\n/**\n * Наименование подрядчика\n */\n'name': string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id': number;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id': number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id': string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id': number;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id': number;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id': string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency': number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.contractorCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorUpdate()` */\n  static readonly ContractorUpdatePath = '/contractor_update';\n\n  /**\n   * Обновление контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Обновление контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование подрядчика\n */\n'name'?: string;\n\n/**\n * Идентификатор (ИНН, Rec № и пр.)\n */\n'ind'?: string;\n\n/**\n * Страна нахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: number;\n\n/**\n * Город (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Общий телефон\n */\n'phone'?: string;\n\n/**\n * Сайт компании\n */\n'web'?: string;\n\n/**\n * Язык общения (ID берем из запроса - settings_get из поля language)\n */\n'language_id'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Вид подрядчика (ID берем из запроса - contractor_type)\n */\n'type_id'?: number;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Членство в ассоциациях (ID берем из запроса - system_association)\n */\n'association_id'?: Array<string>;\n\n/**\n * Система налогообложения (ID берем из запроса - system_tax_system)\n */\n'tax_id'?: number;\n\n/**\n * Формат отправки запроса (ID берем из запроса - contractor_request_format)\n */\n'request_format_id'?: string;\n\n/**\n * Участник торгов\n */\n'allow_trade'?: boolean;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Контактные лица\n */\n'contacts'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.contractorUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorDelete()` */\n  static readonly ContractorDeletePath = '/contractor_delete';\n\n  /**\n   * Удаление контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого контрагента\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого контрагента\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.contractorDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorContactList()` */\n  static readonly ContractorContactListPath = '/contractor_contact_list';\n\n  /**\n   * Список контактов контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorContactList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorContactList$Response(\n    params: {\n\n    /**\n     * ID контрагента\n     */\n      id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorContactListPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ФИО\n         */\n        'name'?: string;\n        \n        /**\n         * Фамилия\n         */\n        'name_f'?: string;\n        \n        /**\n         * Имя\n         */\n        'name_i'?: string;\n        \n        /**\n         * Отчество\n         */\n        'name_o'?: string;\n        \n        /**\n         * Должность\n         */\n        'position'?: string;\n        \n        /**\n         * Местонахождение офиса\n         */\n        'city_name'?: string;\n        \n        /**\n         * Местонахождение офиса (ID берем из запроса - direction_city)\n         */\n        'city_id'?: number;\n        \n        /**\n         * Офисный телефон\n         */\n        'phone'?: string;\n        \n        /**\n         * Мобильный телефон\n         */\n        'mobile_phone'?: string;\n        \n        /**\n         * E-mail\n         */\n        'email'?: string;\n        \n        /**\n         * Skype\n         */\n        'skype'?: string;\n        \n        /**\n         * Telegram\n         */\n        'telegram'?: string;\n        \n        /**\n         * Whatsapp\n         */\n        'whatsapp'?: string;\n        \n        /**\n         * WeChat\n         */\n        'wechat'?: string;\n        \n        /**\n         * Ответственный за направления\n         */\n        'direction'?: Array<{\n        \n        /**\n         * Страна отправления\n         */\n        'direction_departure': number;\n        \n        /**\n         * Страна прибытия\n         */\n        'direction_arrival': number;\n        \n        /**\n         * Транспорт\n         */\n        'direction_items': Array<string>;\n        }>;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Список контактов контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorContactList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorContactList(\n    params: {\n\n    /**\n     * ID контрагента\n     */\n      id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.contractorContactList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorContactInfo()` */\n  static readonly ContractorContactInfoPath = '/contractor_contact_info';\n\n  /**\n   * Данные контакта контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorContactInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorContactInfo$Response(\n    params: {\n\n    /**\n     * ID контакта\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorContactInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ФИО\n         */\n        'name'?: string;\n        \n        /**\n         * Фамилия\n         */\n        'name_f'?: string;\n        \n        /**\n         * Имя\n         */\n        'name_i'?: string;\n        \n        /**\n         * Отчество\n         */\n        'name_o'?: string;\n        \n        /**\n         * Должность\n         */\n        'position'?: string;\n        \n        /**\n         * Местонахождение офиса\n         */\n        'city_name'?: string;\n        \n        /**\n         * Местонахождение офиса (ID берем из запроса - direction_city)\n         */\n        'city_id'?: number;\n        \n        /**\n         * Офисный телефон\n         */\n        'phone'?: string;\n        \n        /**\n         * Мобильный телефон\n         */\n        'mobile_phone'?: string;\n        \n        /**\n         * E-mail\n         */\n        'email'?: string;\n        \n        /**\n         * Skype\n         */\n        'skype'?: string;\n        \n        /**\n         * Telegram\n         */\n        'telegram'?: string;\n        \n        /**\n         * Whatsapp\n         */\n        'whatsapp'?: string;\n        \n        /**\n         * WeChat\n         */\n        'wechat'?: string;\n        \n        /**\n         * Ответственный за направления\n         */\n        'direction'?: Array<{\n        \n        /**\n         * Страна отправления\n         */\n        'direction_departure': number;\n        \n        /**\n         * Страна прибытия\n         */\n        'direction_arrival': number;\n        \n        /**\n         * Транспорт\n         */\n        'direction_items': Array<string>;\n        }>;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Данные контакта контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorContactInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorContactInfo(\n    params: {\n\n    /**\n     * ID контакта\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> {\n    return this.contractorContactInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса\n */\n'city_name'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorContactCreate()` */\n  static readonly ContractorContactCreatePath = '/contractor_contact_create';\n\n  /**\n   * Добавление контакта контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorContactCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorContactCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID подрядчика\n */\n'contractor_id': number;\n\n/**\n * ФИО\n */\n'name': string;\n\n/**\n * Фамилия\n */\n'name_f': string;\n\n/**\n * Имя\n */\n'name_i': string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone': string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email': string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorContactCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Добавление контакта контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorContactCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorContactCreate(\n    params?: {\n      body?: {\n\n/**\n * ID подрядчика\n */\n'contractor_id': number;\n\n/**\n * ФИО\n */\n'name': string;\n\n/**\n * Фамилия\n */\n'name_f': string;\n\n/**\n * Имя\n */\n'name_i': string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone': string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email': string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.contractorContactCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorContactUpdate()` */\n  static readonly ContractorContactUpdatePath = '/contractor_contact_update';\n\n  /**\n   * Обновление контакта контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorContactUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorContactUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID подрядчика\n */\n'contractor_id'?: number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorContactUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Обновление контакта контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorContactUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorContactUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID подрядчика\n */\n'contractor_id'?: number;\n\n/**\n * ФИО\n */\n'name'?: string;\n\n/**\n * Фамилия\n */\n'name_f'?: string;\n\n/**\n * Имя\n */\n'name_i'?: string;\n\n/**\n * Отчество\n */\n'name_o'?: string;\n\n/**\n * Должность\n */\n'position'?: string;\n\n/**\n * Местонахождение офиса (ID берем из запроса - direction_city)\n */\n'city_id'?: number;\n\n/**\n * Офисный телефон\n */\n'phone'?: string;\n\n/**\n * Мобильный телефон\n */\n'mobile_phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Skype\n */\n'skype'?: string;\n\n/**\n * Telegram\n */\n'telegram'?: string;\n\n/**\n * Whatsapp\n */\n'whatsapp'?: string;\n\n/**\n * WeChat\n */\n'wechat'?: string;\n\n/**\n * Ответственный за направления\n */\n'direction'?: Array<{\n\n/**\n * Страна отправления\n */\n'direction_departure': number;\n\n/**\n * Страна прибытия\n */\n'direction_arrival': number;\n\n/**\n * Транспорт\n */\n'direction_items': Array<string>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.contractorContactUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorContactDelete()` */\n  static readonly ContractorContactDeletePath = '/contractor_contact_delete';\n\n  /**\n   * Удаление контакта контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorContactDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorContactDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого контакта\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorContactDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление контакта контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorContactDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorContactDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого контакта\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.contractorContactDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorRequestFormat()` */\n  static readonly ContractorRequestFormatPath = '/contractor_request_format';\n\n  /**\n   * Форматы отправки запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorRequestFormat()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorRequestFormat$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorRequestFormatPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Форматы отправки запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorRequestFormat$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorRequestFormat(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.contractorRequestFormat$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorType()` */\n  static readonly ContractorTypePath = '/contractor_type';\n\n  /**\n   * Вид подрядчика.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorType()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorType$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Контакты обязательны\n */\n'contact_required'?: boolean;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorTypePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Контакты обязательны\n         */\n        'contact_required'?: boolean;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Вид подрядчика.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorType$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorType(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Контакты обязательны\n */\n'contact_required'?: boolean;\n}>> {\n    return this.contractorType$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Контакты обязательны\n */\n'contact_required'?: boolean;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Контакты обязательны\n */\n'contact_required'?: boolean;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorExport()` */\n  static readonly ContractorExportPath = '/contractor_export';\n\n  /**\n   * Экспорт контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorExport()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorExport$Response(\n    params?: {\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'name' | 'rating_nps_text' | 'trade_rating' | 'allow_trade' | 'avg_answer_time';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorExportPath, 'get');\n    if (params) {\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Экспорт контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorExport$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorExport(\n    params?: {\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'name' | 'rating_nps_text' | 'trade_rating' | 'allow_trade' | 'avg_answer_time';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.contractorExport$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorImportTemplate()` */\n  static readonly ContractorImportTemplatePath = '/contractor_import_template';\n\n  /**\n   * Шаблон экспорта контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorImportTemplate()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorImportTemplate$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorImportTemplatePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Шаблон экспорта контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorImportTemplate$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorImportTemplate(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.contractorImportTemplate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorImport()` */\n  static readonly ContractorImportPath = '/contractor_import';\n\n  /**\n   * Импорт контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorImport()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorImport$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Base64 строка файла\n */\n'data': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorImportPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Код обновления\n         */\n        'import_key'?: string;\n        \n        /**\n         * Результат обновления\n         */\n        'result'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Импорт контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorImport$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  contractorImport(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Base64 строка файла\n */\n'data': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}> {\n    return this.contractorImport$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}>): {\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorImportConfirm()` */\n  static readonly ContractorImportConfirmPath = '/contractor_import_confirm';\n\n  /**\n   * Подтверждение импорта контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorImportConfirm()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorImportConfirm$Response(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorImportConfirmPath, 'get');\n    if (params) {\n      rb.query('import_key', params.import_key, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подтверждение импорта контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorImportConfirm$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorImportConfirm(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.contractorImportConfirm$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `contractorImportResult()` */\n  static readonly ContractorImportResultPath = '/contractor_import_result';\n\n  /**\n   * Получение файла с результатами обработки импорта в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `contractorImportResult()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorImportResult$Response(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, ContractorService.ContractorImportResultPath, 'get');\n    if (params) {\n      rb.query('import_key', params.import_key, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Получение файла с результатами обработки импорта в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `contractorImportResult$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  contractorImportResult(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.contractorImportResult$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Работа с клиентами\n */\n@Injectable({ providedIn: 'root' })\nexport class CustomerService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `customerList()` */\n  static readonly CustomerListPath = '/customer_list';\n\n  /**\n   * Список клиентов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'name' | 'order_count' | 'order_day_last' | 'order_delay_payment';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения\n */\n'country_name'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения\n */\n'city_name'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя\n */\n'head_position_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_name'?: string;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник\n */\n'source_name'?: string;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус\n */\n'status_name'?: string;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие\n */\n'interaction_name'?: string;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг\n */\n'service_names'?: Array<string>;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности\n */\n'business_name'?: string;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту\n */\n'manager_name'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж\n */\n'manager_sale_name'?: string;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n\n/**\n * Менеджер создания\n */\n'user_name'?: string;\n\n/**\n * Менеджер создания (ID берем из запроса - company_employee_list)\n */\n'user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Количество заказов\n */\n'order_count'?: string;\n\n/**\n * Дней с последнего заказа\n */\n'order_day_last'?: string;\n\n/**\n * Просрочка платежей\n */\n'order_delay_payment'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование краткое\n         */\n        'name'?: string;\n        \n        /**\n         * Наименование полное\n         */\n        'name_full'?: string;\n        \n        /**\n         * Страна местонахождения\n         */\n        'country_name'?: string;\n        \n        /**\n         * Страна местонахождения (ID берем из запроса - direction_country)\n         */\n        'country_id'?: string;\n        \n        /**\n         * Город местонахождения\n         */\n        'city_name'?: string;\n        \n        /**\n         * Город местонахождения (ID берем из запроса - direction_city)\n         */\n        'city_id'?: string;\n        \n        /**\n         * Юридический адрес\n         */\n        'address_legal'?: string;\n        \n        /**\n         * Почтовый адрес\n         */\n        'address_post'?: string;\n        \n        /**\n         * ИНН\n         */\n        'inn'?: string;\n        \n        /**\n         * КПП\n         */\n        'kpp'?: string;\n        \n        /**\n         * ОГРН\n         */\n        'ogrn'?: string;\n        \n        /**\n         * ОКПО\n         */\n        'okpo'?: string;\n        \n        /**\n         * Контактное лицо\n         */\n        'contact_fio'?: string;\n        \n        /**\n         * Номер телефона\n         */\n        'phone'?: string;\n        \n        /**\n         * E-mail\n         */\n        'email'?: string;\n        \n        /**\n         * Сайт\n         */\n        'web'?: string;\n        \n        /**\n         * Руководитель ФИО\n         */\n        'head_name'?: string;\n        \n        /**\n         * Должность руководителя\n         */\n        'head_position_name'?: string;\n        \n        /**\n         * Должность руководителя (ID берем из запроса - system_head_position)\n         */\n        'head_position_id'?: string;\n        \n        /**\n         * Документы (ссылка)\n         */\n        'documents_path'?: string;\n        \n        /**\n         * Адрес для корреспонденции\n         */\n        'document_address'?: string;\n        \n        /**\n         * Контактное лицо для корреспонденции\n         */\n        'document_contact_fio'?: string;\n        \n        /**\n         * Телефон для корреспонденции\n         */\n        'document_contact_phone'?: string;\n        \n        /**\n         * Адрес для доставки груза\n         */\n        'delivery_address'?: string;\n        \n        /**\n         * Контактное лицо для доставки груза\n         */\n        'delivery_contact_fio'?: string;\n        \n        /**\n         * Телефон\n         */\n        'delivery_contact_phone'?: string;\n        \n        /**\n         * График работы склада\n         */\n        'warehouse_schedule'?: string;\n        \n        /**\n         * Подпись ФИО\n         */\n        'signature_fio'?: string;\n        \n        /**\n         * Подпись должность\n         */\n        'signature_position'?: string;\n        \n        /**\n         * Подпись основание\n         */\n        'signature_basis'?: string;\n        \n        /**\n         * Главный бухгалтер\n         */\n        'accountant_fio'?: string;\n        \n        /**\n         * Телефон главного бухгалтера\n         */\n        'accountant_phone'?: string;\n        \n        /**\n         * Наименование банка\n         */\n        'bank_name'?: string;\n        \n        /**\n         * Расчетный счет\n         */\n        'bank_payment_account'?: string;\n        \n        /**\n         * Корреспондентный счет\n         */\n        'bank_correspondent_account'?: string;\n        \n        /**\n         * БИК\n         */\n        'bank_bik'?: string;\n        \n        /**\n         * КПП\n         */\n        'bank_kpp'?: string;\n        \n        /**\n         * Валюта счета (ID берем из запроса - system_currency)\n         */\n        'bank_currency_id'?: number;\n        \n        /**\n         * Группа\n         */\n        'group_name'?: string;\n        \n        /**\n         * Группа\n         */\n        'group_id'?: number;\n        \n        /**\n         * Источник\n         */\n        'source_name'?: string;\n        \n        /**\n         * Источник (ID берем из запроса - system_contact_source)\n         */\n        'source_id'?: number;\n        \n        /**\n         * Тип контрагента\n         */\n        'counterparty_name'?: string;\n        \n        /**\n         * Тип контрагента (ID берем из запроса - system_counterparty)\n         */\n        'counterparty_id'?: number;\n        \n        /**\n         * Статус\n         */\n        'status_name'?: string;\n        \n        /**\n         * Статус (ID берем из запроса - system_customer_status)\n         */\n        'status_id'?: number;\n        \n        /**\n         * Взаимодействие\n         */\n        'interaction_name'?: string;\n        \n        /**\n         * Взаимодействие (ID берем из запроса - system_interaction)\n         */\n        'interaction_id'?: number;\n        \n        /**\n         * Виды услуг\n         */\n        'service_names'?: Array<string>;\n        \n        /**\n         * Виды услуг (ID берем из запроса - system_services)\n         */\n        'service_ids'?: Array<number>;\n        \n        /**\n         * Отрасль деятельности\n         */\n        'business_name'?: string;\n        \n        /**\n         * Отрасль деятельности (ID берем из запроса - system_business)\n         */\n        'business_id'?: number;\n        \n        /**\n         * Примечание\n         */\n        'note'?: string;\n        \n        /**\n         * Менеджер по клиенту\n         */\n        'manager_name'?: string;\n        \n        /**\n         * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n         */\n        'manager_id'?: number;\n        \n        /**\n         * Менеджер продаж\n         */\n        'manager_sale_name'?: string;\n        \n        /**\n         * Менеджер продаж (ID берем из запроса - company_employee_list)\n         */\n        'manager_sale_id'?: number;\n        \n        /**\n         * Менеджер создания\n         */\n        'user_name'?: string;\n        \n        /**\n         * Менеджер создания (ID берем из запроса - company_employee_list)\n         */\n        'user_id'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        \n        /**\n         * Количество заказов\n         */\n        'order_count'?: string;\n        \n        /**\n         * Дней с последнего заказа\n         */\n        'order_day_last'?: string;\n        \n        /**\n         * Просрочка платежей\n         */\n        'order_delay_payment'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Список клиентов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'name' | 'order_count' | 'order_day_last' | 'order_delay_payment';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения\n */\n'country_name'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения\n */\n'city_name'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя\n */\n'head_position_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_name'?: string;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник\n */\n'source_name'?: string;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус\n */\n'status_name'?: string;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие\n */\n'interaction_name'?: string;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг\n */\n'service_names'?: Array<string>;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности\n */\n'business_name'?: string;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту\n */\n'manager_name'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж\n */\n'manager_sale_name'?: string;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n\n/**\n * Менеджер создания\n */\n'user_name'?: string;\n\n/**\n * Менеджер создания (ID берем из запроса - company_employee_list)\n */\n'user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Количество заказов\n */\n'order_count'?: string;\n\n/**\n * Дней с последнего заказа\n */\n'order_day_last'?: string;\n\n/**\n * Просрочка платежей\n */\n'order_delay_payment'?: string;\n}>;\n}> {\n    return this.customerList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения\n */\n'country_name'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения\n */\n'city_name'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя\n */\n'head_position_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_name'?: string;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник\n */\n'source_name'?: string;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус\n */\n'status_name'?: string;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие\n */\n'interaction_name'?: string;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг\n */\n'service_names'?: Array<string>;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности\n */\n'business_name'?: string;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту\n */\n'manager_name'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж\n */\n'manager_sale_name'?: string;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n\n/**\n * Менеджер создания\n */\n'user_name'?: string;\n\n/**\n * Менеджер создания (ID берем из запроса - company_employee_list)\n */\n'user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Количество заказов\n */\n'order_count'?: string;\n\n/**\n * Дней с последнего заказа\n */\n'order_day_last'?: string;\n\n/**\n * Просрочка платежей\n */\n'order_delay_payment'?: string;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения\n */\n'country_name'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения\n */\n'city_name'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя\n */\n'head_position_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_name'?: string;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник\n */\n'source_name'?: string;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус\n */\n'status_name'?: string;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие\n */\n'interaction_name'?: string;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг\n */\n'service_names'?: Array<string>;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности\n */\n'business_name'?: string;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту\n */\n'manager_name'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж\n */\n'manager_sale_name'?: string;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n\n/**\n * Менеджер создания\n */\n'user_name'?: string;\n\n/**\n * Менеджер создания (ID берем из запроса - company_employee_list)\n */\n'user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Количество заказов\n */\n'order_count'?: string;\n\n/**\n * Дней с последнего заказа\n */\n'order_day_last'?: string;\n\n/**\n * Просрочка платежей\n */\n'order_delay_payment'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerListParam()` */\n  static readonly CustomerListParamPath = '/customer_list_param';\n\n  /**\n   * Параметры вывода клиентов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerListParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerListParam$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerListParamPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Параметры поиска\n         */\n        'search'?: Array<{\n        \n        /**\n         * Поиск в заголовке\n         */\n        'header'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск основной\n         */\n        'main'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск расширенный\n         */\n        'additional'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        }>;\n        \n        /**\n         * Параметры таблицы\n         */\n        'table'?: Array<{\n        \n        /**\n         * Блок колонок\n         */\n        'column'?: string;\n        \n        /**\n         * Данные колонок\n         */\n        'items'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Заголовок поля\n         */\n        'title'?: string;\n        \n        /**\n         * Ширина поля\n         */\n        'width'?: number;\n        }>;\n        }>;\n        \n        /**\n         * Параметры сортировки\n         */\n        'order'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Сортировка по умолчанию\n         */\n        'dir'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры вывода клиентов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerListParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerListParam(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}> {\n    return this.customerListParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>): {\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerInfo()` */\n  static readonly CustomerInfoPath = '/customer_info';\n\n  /**\n   * Данные клиента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerInfo$Response(\n    params: {\n\n    /**\n     * ID клиента\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения\n */\n'country_name'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения\n */\n'city_name'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя\n */\n'head_position_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_name'?: string;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник\n */\n'source_name'?: string;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус\n */\n'status_name'?: string;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие\n */\n'interaction_name'?: string;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг\n */\n'service_names'?: Array<string>;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности\n */\n'business_name'?: string;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту\n */\n'manager_name'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж\n */\n'manager_sale_name'?: string;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n\n/**\n * Менеджер создания\n */\n'user_name'?: string;\n\n/**\n * Менеджер создания (ID берем из запроса - company_employee_list)\n */\n'user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Количество заказов\n */\n'order_count'?: string;\n\n/**\n * Дней с последнего заказа\n */\n'order_day_last'?: string;\n\n/**\n * Просрочка платежей\n */\n'order_delay_payment'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование краткое\n         */\n        'name'?: string;\n        \n        /**\n         * Наименование полное\n         */\n        'name_full'?: string;\n        \n        /**\n         * Страна местонахождения\n         */\n        'country_name'?: string;\n        \n        /**\n         * Страна местонахождения (ID берем из запроса - direction_country)\n         */\n        'country_id'?: string;\n        \n        /**\n         * Город местонахождения\n         */\n        'city_name'?: string;\n        \n        /**\n         * Город местонахождения (ID берем из запроса - direction_city)\n         */\n        'city_id'?: string;\n        \n        /**\n         * Юридический адрес\n         */\n        'address_legal'?: string;\n        \n        /**\n         * Почтовый адрес\n         */\n        'address_post'?: string;\n        \n        /**\n         * ИНН\n         */\n        'inn'?: string;\n        \n        /**\n         * КПП\n         */\n        'kpp'?: string;\n        \n        /**\n         * ОГРН\n         */\n        'ogrn'?: string;\n        \n        /**\n         * ОКПО\n         */\n        'okpo'?: string;\n        \n        /**\n         * Контактное лицо\n         */\n        'contact_fio'?: string;\n        \n        /**\n         * Номер телефона\n         */\n        'phone'?: string;\n        \n        /**\n         * E-mail\n         */\n        'email'?: string;\n        \n        /**\n         * Сайт\n         */\n        'web'?: string;\n        \n        /**\n         * Руководитель ФИО\n         */\n        'head_name'?: string;\n        \n        /**\n         * Должность руководителя\n         */\n        'head_position_name'?: string;\n        \n        /**\n         * Должность руководителя (ID берем из запроса - system_head_position)\n         */\n        'head_position_id'?: string;\n        \n        /**\n         * Документы (ссылка)\n         */\n        'documents_path'?: string;\n        \n        /**\n         * Адрес для корреспонденции\n         */\n        'document_address'?: string;\n        \n        /**\n         * Контактное лицо для корреспонденции\n         */\n        'document_contact_fio'?: string;\n        \n        /**\n         * Телефон для корреспонденции\n         */\n        'document_contact_phone'?: string;\n        \n        /**\n         * Адрес для доставки груза\n         */\n        'delivery_address'?: string;\n        \n        /**\n         * Контактное лицо для доставки груза\n         */\n        'delivery_contact_fio'?: string;\n        \n        /**\n         * Телефон\n         */\n        'delivery_contact_phone'?: string;\n        \n        /**\n         * График работы склада\n         */\n        'warehouse_schedule'?: string;\n        \n        /**\n         * Подпись ФИО\n         */\n        'signature_fio'?: string;\n        \n        /**\n         * Подпись должность\n         */\n        'signature_position'?: string;\n        \n        /**\n         * Подпись основание\n         */\n        'signature_basis'?: string;\n        \n        /**\n         * Главный бухгалтер\n         */\n        'accountant_fio'?: string;\n        \n        /**\n         * Телефон главного бухгалтера\n         */\n        'accountant_phone'?: string;\n        \n        /**\n         * Наименование банка\n         */\n        'bank_name'?: string;\n        \n        /**\n         * Расчетный счет\n         */\n        'bank_payment_account'?: string;\n        \n        /**\n         * Корреспондентный счет\n         */\n        'bank_correspondent_account'?: string;\n        \n        /**\n         * БИК\n         */\n        'bank_bik'?: string;\n        \n        /**\n         * КПП\n         */\n        'bank_kpp'?: string;\n        \n        /**\n         * Валюта счета (ID берем из запроса - system_currency)\n         */\n        'bank_currency_id'?: number;\n        \n        /**\n         * Группа\n         */\n        'group_name'?: string;\n        \n        /**\n         * Группа\n         */\n        'group_id'?: number;\n        \n        /**\n         * Источник\n         */\n        'source_name'?: string;\n        \n        /**\n         * Источник (ID берем из запроса - system_contact_source)\n         */\n        'source_id'?: number;\n        \n        /**\n         * Тип контрагента\n         */\n        'counterparty_name'?: string;\n        \n        /**\n         * Тип контрагента (ID берем из запроса - system_counterparty)\n         */\n        'counterparty_id'?: number;\n        \n        /**\n         * Статус\n         */\n        'status_name'?: string;\n        \n        /**\n         * Статус (ID берем из запроса - system_customer_status)\n         */\n        'status_id'?: number;\n        \n        /**\n         * Взаимодействие\n         */\n        'interaction_name'?: string;\n        \n        /**\n         * Взаимодействие (ID берем из запроса - system_interaction)\n         */\n        'interaction_id'?: number;\n        \n        /**\n         * Виды услуг\n         */\n        'service_names'?: Array<string>;\n        \n        /**\n         * Виды услуг (ID берем из запроса - system_services)\n         */\n        'service_ids'?: Array<number>;\n        \n        /**\n         * Отрасль деятельности\n         */\n        'business_name'?: string;\n        \n        /**\n         * Отрасль деятельности (ID берем из запроса - system_business)\n         */\n        'business_id'?: number;\n        \n        /**\n         * Примечание\n         */\n        'note'?: string;\n        \n        /**\n         * Менеджер по клиенту\n         */\n        'manager_name'?: string;\n        \n        /**\n         * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n         */\n        'manager_id'?: number;\n        \n        /**\n         * Менеджер продаж\n         */\n        'manager_sale_name'?: string;\n        \n        /**\n         * Менеджер продаж (ID берем из запроса - company_employee_list)\n         */\n        'manager_sale_id'?: number;\n        \n        /**\n         * Менеджер создания\n         */\n        'user_name'?: string;\n        \n        /**\n         * Менеджер создания (ID берем из запроса - company_employee_list)\n         */\n        'user_id'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        \n        /**\n         * Количество заказов\n         */\n        'order_count'?: string;\n        \n        /**\n         * Дней с последнего заказа\n         */\n        'order_day_last'?: string;\n        \n        /**\n         * Просрочка платежей\n         */\n        'order_delay_payment'?: string;\n        \n        /**\n         * Документы (файлы)\n         */\n        'documents_file'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Данные клиента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerInfo(\n    params: {\n\n    /**\n     * ID клиента\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения\n */\n'country_name'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения\n */\n'city_name'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя\n */\n'head_position_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_name'?: string;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник\n */\n'source_name'?: string;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус\n */\n'status_name'?: string;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие\n */\n'interaction_name'?: string;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг\n */\n'service_names'?: Array<string>;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности\n */\n'business_name'?: string;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту\n */\n'manager_name'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж\n */\n'manager_sale_name'?: string;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n\n/**\n * Менеджер создания\n */\n'user_name'?: string;\n\n/**\n * Менеджер создания (ID берем из запроса - company_employee_list)\n */\n'user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Количество заказов\n */\n'order_count'?: string;\n\n/**\n * Дней с последнего заказа\n */\n'order_day_last'?: string;\n\n/**\n * Просрочка платежей\n */\n'order_delay_payment'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n}> {\n    return this.customerInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения\n */\n'country_name'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения\n */\n'city_name'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя\n */\n'head_position_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_name'?: string;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник\n */\n'source_name'?: string;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус\n */\n'status_name'?: string;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие\n */\n'interaction_name'?: string;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг\n */\n'service_names'?: Array<string>;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности\n */\n'business_name'?: string;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту\n */\n'manager_name'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж\n */\n'manager_sale_name'?: string;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n\n/**\n * Менеджер создания\n */\n'user_name'?: string;\n\n/**\n * Менеджер создания (ID берем из запроса - company_employee_list)\n */\n'user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Количество заказов\n */\n'order_count'?: string;\n\n/**\n * Дней с последнего заказа\n */\n'order_day_last'?: string;\n\n/**\n * Просрочка платежей\n */\n'order_delay_payment'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения\n */\n'country_name'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения\n */\n'city_name'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя\n */\n'head_position_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_name'?: string;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник\n */\n'source_name'?: string;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента\n */\n'counterparty_name'?: string;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус\n */\n'status_name'?: string;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие\n */\n'interaction_name'?: string;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг\n */\n'service_names'?: Array<string>;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности\n */\n'business_name'?: string;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту\n */\n'manager_name'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж\n */\n'manager_sale_name'?: string;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n\n/**\n * Менеджер создания\n */\n'user_name'?: string;\n\n/**\n * Менеджер создания (ID берем из запроса - company_employee_list)\n */\n'user_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n\n/**\n * Количество заказов\n */\n'order_count'?: string;\n\n/**\n * Дней с последнего заказа\n */\n'order_day_last'?: string;\n\n/**\n * Просрочка платежей\n */\n'order_delay_payment'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerCreate()` */\n  static readonly CustomerCreatePath = '/customer_create';\n\n  /**\n   * Добавление клиента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование краткое\n */\n'name': string;\n\n/**\n * Наименование полное\n */\n'name_full': string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id': string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id': string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio': string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Добавление клиента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerCreate(\n    params?: {\n      body?: {\n\n/**\n * Наименование краткое\n */\n'name': string;\n\n/**\n * Наименование полное\n */\n'name_full': string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id': string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id': string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio': string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerUpdate()` */\n  static readonly CustomerUpdatePath = '/customer_update';\n\n  /**\n   * Обновление клиента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Обновление клиента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование краткое\n */\n'name'?: string;\n\n/**\n * Наименование полное\n */\n'name_full'?: string;\n\n/**\n * Страна местонахождения (ID берем из запроса - direction_country)\n */\n'country_id'?: string;\n\n/**\n * Город местонахождения (ID берем из запроса - direction_city)\n */\n'city_id'?: string;\n\n/**\n * Юридический адрес\n */\n'address_legal'?: string;\n\n/**\n * Почтовый адрес\n */\n'address_post'?: string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * КПП\n */\n'kpp'?: string;\n\n/**\n * ОГРН\n */\n'ogrn'?: string;\n\n/**\n * ОКПО\n */\n'okpo'?: string;\n\n/**\n * Контактное лицо\n */\n'contact_fio'?: string;\n\n/**\n * Номер телефона\n */\n'phone'?: string;\n\n/**\n * E-mail\n */\n'email'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Руководитель ФИО\n */\n'head_name'?: string;\n\n/**\n * Должность руководителя (ID берем из запроса - system_head_position)\n */\n'head_position_id'?: string;\n\n/**\n * Документы (ссылка)\n */\n'documents_path'?: string;\n\n/**\n * Адрес для корреспонденции\n */\n'document_address'?: string;\n\n/**\n * Контактное лицо для корреспонденции\n */\n'document_contact_fio'?: string;\n\n/**\n * Телефон для корреспонденции\n */\n'document_contact_phone'?: string;\n\n/**\n * Адрес для доставки груза\n */\n'delivery_address'?: string;\n\n/**\n * Контактное лицо для доставки груза\n */\n'delivery_contact_fio'?: string;\n\n/**\n * Телефон\n */\n'delivery_contact_phone'?: string;\n\n/**\n * График работы склада\n */\n'warehouse_schedule'?: string;\n\n/**\n * Подпись ФИО\n */\n'signature_fio'?: string;\n\n/**\n * Подпись должность\n */\n'signature_position'?: string;\n\n/**\n * Подпись основание\n */\n'signature_basis'?: string;\n\n/**\n * Главный бухгалтер\n */\n'accountant_fio'?: string;\n\n/**\n * Телефон главного бухгалтера\n */\n'accountant_phone'?: string;\n\n/**\n * Наименование банка\n */\n'bank_name'?: string;\n\n/**\n * Расчетный счет\n */\n'bank_payment_account'?: string;\n\n/**\n * Корреспондентный счет\n */\n'bank_correspondent_account'?: string;\n\n/**\n * БИК\n */\n'bank_bik'?: string;\n\n/**\n * КПП\n */\n'bank_kpp'?: string;\n\n/**\n * Валюта счета (ID берем из запроса - system_currency)\n */\n'bank_currency_id'?: number;\n\n/**\n * Группа\n */\n'group_id'?: number;\n\n/**\n * Источник (ID берем из запроса - system_contact_source)\n */\n'source_id'?: number;\n\n/**\n * Тип контрагента (ID берем из запроса - system_counterparty)\n */\n'counterparty_id'?: number;\n\n/**\n * Статус (ID берем из запроса - system_customer_status)\n */\n'status_id'?: number;\n\n/**\n * Взаимодействие (ID берем из запроса - system_interaction)\n */\n'interaction_id'?: number;\n\n/**\n * Виды услуг (ID берем из запроса - system_services)\n */\n'service_ids'?: Array<number>;\n\n/**\n * Отрасль деятельности (ID берем из запроса - system_business)\n */\n'business_id'?: number;\n\n/**\n * Примечание\n */\n'note'?: string;\n\n/**\n * Менеджер по клиенту (ID берем из запроса - company_employee_list)\n */\n'manager_id'?: number;\n\n/**\n * Менеджер продаж (ID берем из запроса - company_employee_list)\n */\n'manager_sale_id'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerDelete()` */\n  static readonly CustomerDeletePath = '/customer_delete';\n\n  /**\n   * Удаление клиента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого клиента\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление клиента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого клиента\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerFiles()` */\n  static readonly CustomerFilesPath = '/customer_files';\n\n  /**\n   * Список файлов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerFiles()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerFiles$Response(\n    params: {\n\n    /**\n     * ID элемента\n     */\n      item_id: number;\n\n    /**\n     * Переменная формы\n     */\n      var?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerFilesPath, 'get');\n    if (params) {\n      rb.query('item_id', params.item_id, {});\n      rb.query('var', params.var, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ID элемента\n         */\n        'item_id': number;\n        \n        /**\n         * Переменная формы\n         */\n        'var': string;\n        \n        /**\n         * Ссылка на файл\n         */\n        'path'?: string;\n        \n        /**\n         * Информация по файлу\n         */\n        'file_info'?: Array<string>;\n        \n        /**\n         * Время загрузки файла\n         */\n        'file_time'?: string;\n        \n        /**\n         * Наименование файла\n         */\n        'file_name'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Список файлов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerFiles$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerFiles(\n    params: {\n\n    /**\n     * ID элемента\n     */\n      item_id: number;\n\n    /**\n     * Переменная формы\n     */\n      var?: string;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.customerFiles$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `customerFileCreate()` */\n  static readonly CustomerFileCreatePath = '/customer_file_create';\n\n  /**\n   * Файлы: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerFileCreate()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  customerFileCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Файл\n */\n'file': file;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerFileCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'multipart/form-data');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файлы: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerFileCreate$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  customerFileCreate(\n    params?: {\n      body?: {\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Файл\n */\n'file': file;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerFileCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerFileDelete()` */\n  static readonly CustomerFileDeletePath = '/customer_file_delete';\n\n  /**\n   * Файлы: удаление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerFileDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerFileDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой записи\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerFileDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файлы: удаление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerFileDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerFileDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой записи\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerFileDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerGroupList()` */\n  static readonly CustomerGroupListPath = '/customer_group_list';\n\n  /**\n   * Группы: список.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerGroupList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerGroupList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество клиентов\n */\n'count_customer'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerGroupListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Количество клиентов\n         */\n        'count_customer'?: number;\n        \n        /**\n         * Порядок (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Группы: список.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerGroupList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerGroupList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле\n */\n'field': string;\n\n/**\n * Направление сортировки\n */\n'dir': 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество клиентов\n */\n'count_customer'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}> {\n    return this.customerGroupList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество клиентов\n */\n'count_customer'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>): {\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество клиентов\n */\n'count_customer'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerGroupInfo()` */\n  static readonly CustomerGroupInfoPath = '/customer_group_info';\n\n  /**\n   * Группы: данные.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerGroupInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerGroupInfo$Response(\n    params?: {\n\n    /**\n     * ID группы\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество клиентов\n */\n'count_customer'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerGroupInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Количество клиентов\n         */\n        'count_customer'?: number;\n        \n        /**\n         * Порядок (меньше - выше)\n         */\n        'num'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Группы: данные.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerGroupInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerGroupInfo(\n    params?: {\n\n    /**\n     * ID группы\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество клиентов\n */\n'count_customer'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> {\n    return this.customerGroupInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество клиентов\n */\n'count_customer'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>): {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Количество клиентов\n */\n'count_customer'?: number;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerGroupCreate()` */\n  static readonly CustomerGroupCreatePath = '/customer_group_create';\n\n  /**\n   * Группы: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerGroupCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerGroupCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerGroupCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Группы: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerGroupCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerGroupCreate(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerGroupCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerGroupUpdate()` */\n  static readonly CustomerGroupUpdatePath = '/customer_group_update';\n\n  /**\n   * Группы: обновление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerGroupUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerGroupUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID изменяемого подразделения\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerGroupUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Группы: обновление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerGroupUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerGroupUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID изменяемого подразделения\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Порядок для сортировки (меньше - выше)\n */\n'num'?: number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerGroupUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerGroupDelete()` */\n  static readonly CustomerGroupDeletePath = '/customer_group_delete';\n\n  /**\n   * Группы: удаление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerGroupDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerGroupDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой группы\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerGroupDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Группы: удаление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerGroupDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerGroupDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой группы\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerGroupDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerExport()` */\n  static readonly CustomerExportPath = '/customer_export';\n\n  /**\n   * Экспорт клиентов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerExport()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerExport$Response(\n    params?: {\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'name' | 'order_count' | 'order_day_last' | 'order_delay_payment';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerExportPath, 'get');\n    if (params) {\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Экспорт клиентов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerExport$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerExport(\n    params?: {\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'name' | 'order_count' | 'order_day_last' | 'order_delay_payment';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.customerExport$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerImportTemplate()` */\n  static readonly CustomerImportTemplatePath = '/customer_import_template';\n\n  /**\n   * Шаблон экспорта клиентов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerImportTemplate()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerImportTemplate$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerImportTemplatePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Шаблон экспорта клиентов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerImportTemplate$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerImportTemplate(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.customerImportTemplate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerImport()` */\n  static readonly CustomerImportPath = '/customer_import';\n\n  /**\n   * Импорт контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerImport()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerImport$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Base64 строка файла\n */\n'data': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerImportPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Код обновления\n         */\n        'import_key'?: string;\n        \n        /**\n         * Результат обновления\n         */\n        'result'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Импорт контрагентов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerImport$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  customerImport(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Base64 строка файла\n */\n'data': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}> {\n    return this.customerImport$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}>): {\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerImportConfirm()` */\n  static readonly CustomerImportConfirmPath = '/customer_import_confirm';\n\n  /**\n   * Подтверждение импорта клиентов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerImportConfirm()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerImportConfirm$Response(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerImportConfirmPath, 'get');\n    if (params) {\n      rb.query('import_key', params.import_key, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подтверждение импорта клиентов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerImportConfirm$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerImportConfirm(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.customerImportConfirm$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `customerImportResult()` */\n  static readonly CustomerImportResultPath = '/customer_import_result';\n\n  /**\n   * Получение файла с результатами обработки импорта в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `customerImportResult()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerImportResult$Response(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.CustomerImportResultPath, 'get');\n    if (params) {\n      rb.query('import_key', params.import_key, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Получение файла с результатами обработки импорта в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `customerImportResult$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  customerImportResult(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.customerImportResult$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Справочная информация\n */\n@Injectable({ providedIn: 'root' })\nexport class DataService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `dataInfo()` */\n  static readonly DataInfoPath = '/data_info';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `dataInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dataInfo$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, DataService.DataInfoPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Код ошибки\n         */\n        'error_code'?: number;\n        \n        /**\n         * Тект ошибки\n         */\n        'error_message'?: string;\n        \n        /**\n         * Подробное описание ошибки\n         */\n        'error_message_description'?: string;\n        \n        /**\n         * Подробное описание ошибки по полям\n         */\n        'error_fields_description'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `dataInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dataInfo(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}> {\n    return this.dataInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}>): {\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `dataMake()` */\n  static readonly DataMakePath = '/data_make';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `dataMake()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dataMake$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, DataService.DataMakePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Код ошибки\n         */\n        'error_code'?: number;\n        \n        /**\n         * Тект ошибки\n         */\n        'error_message'?: string;\n        \n        /**\n         * Подробное описание ошибки\n         */\n        'error_message_description'?: string;\n        \n        /**\n         * Подробное описание ошибки по полям\n         */\n        'error_fields_description'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `dataMake$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dataMake(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}> {\n    return this.dataMake$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}>): {\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `dataUpdate()` */\n  static readonly DataUpdatePath = '/data_update';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `dataUpdate()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dataUpdate$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, DataService.DataUpdatePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Код ошибки\n         */\n        'error_code'?: number;\n        \n        /**\n         * Тект ошибки\n         */\n        'error_message'?: string;\n        \n        /**\n         * Подробное описание ошибки\n         */\n        'error_message_description'?: string;\n        \n        /**\n         * Подробное описание ошибки по полям\n         */\n        'error_fields_description'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `dataUpdate$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dataUpdate(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}> {\n    return this.dataUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}>): {\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `dataDelete()` */\n  static readonly DataDeletePath = '/data_delete';\n\n  /**\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `dataDelete()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dataDelete$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, DataService.DataDeletePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Код ошибки\n         */\n        'error_code'?: number;\n        \n        /**\n         * Тект ошибки\n         */\n        'error_message'?: string;\n        \n        /**\n         * Подробное описание ошибки\n         */\n        'error_message_description'?: string;\n        \n        /**\n         * Подробное описание ошибки по полям\n         */\n        'error_fields_description'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `dataDelete$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  dataDelete(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}> {\n    return this.dataDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n}>): {\n\n/**\n * Код ошибки\n */\n'error_code'?: number;\n\n/**\n * Тект ошибки\n */\n'error_message'?: string;\n\n/**\n * Подробное описание ошибки\n */\n'error_message_description'?: string;\n\n/**\n * Подробное описание ошибки по полям\n */\n'error_fields_description'?: {\n};\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Работа с направлениями\n */\n@Injectable({ providedIn: 'root' })\nexport class DirectionService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `directionType()` */\n  static readonly DirectionTypePath = '/direction_type';\n\n  /**\n   * Направления перевозок.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionType()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionType$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionTypePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Ключ\n         */\n        'key'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Направления перевозок.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionType$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionType(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.directionType$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `directionCountry()` */\n  static readonly DirectionCountryPath = '/direction_country';\n\n  /**\n   * Список стран.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionCountry()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionCountry$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Наименование, откуда\n */\n'name_from'?: string;\n\n/**\n * Наименование, куда\n */\n'name_to'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionCountryPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Наименование, откуда\n         */\n        'name_from'?: string;\n        \n        /**\n         * Наименование, куда\n         */\n        'name_to'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Список стран.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionCountry$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionCountry(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Наименование, откуда\n */\n'name_from'?: string;\n\n/**\n * Наименование, куда\n */\n'name_to'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.directionCountry$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Наименование, откуда\n */\n'name_from'?: string;\n\n/**\n * Наименование, куда\n */\n'name_to'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Наименование, откуда\n */\n'name_from'?: string;\n\n/**\n * Наименование, куда\n */\n'name_to'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `directionCountryInfo()` */\n  static readonly DirectionCountryInfoPath = '/direction_country_info';\n\n  /**\n   * Данные запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionCountryInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionCountryInfo$Response(\n    params?: {\n\n    /**\n     * ID страны\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Наименование, откуда\n */\n'name_from'?: string;\n\n/**\n * Наименование, куда\n */\n'name_to'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionCountryInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Наименование, откуда\n         */\n        'name_from'?: string;\n        \n        /**\n         * Наименование, куда\n         */\n        'name_to'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Данные запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionCountryInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionCountryInfo(\n    params?: {\n\n    /**\n     * ID страны\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Наименование, откуда\n */\n'name_from'?: string;\n\n/**\n * Наименование, куда\n */\n'name_to'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.directionCountryInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Наименование, откуда\n */\n'name_from'?: string;\n\n/**\n * Наименование, куда\n */\n'name_to'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Наименование, откуда\n */\n'name_from'?: string;\n\n/**\n * Наименование, куда\n */\n'name_to'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `directionCity()` */\n  static readonly DirectionCityPath = '/direction_city';\n\n  /**\n   * Список городов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionCity()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionCity$Response(\n    params?: {\n\n    /**\n     * ID страны (ID берем из запроса - direction_country)\n     */\n      country_id?: number;\n\n    /**\n     * Поисковая строка\n     */\n      search?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * Наименование страны\n */\n'country_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionCityPath, 'get');\n    if (params) {\n      rb.query('country_id', params.country_id, {});\n      rb.query('search', params.search, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * ID страны\n         */\n        'country_id'?: number;\n        \n        /**\n         * Наименование страны\n         */\n        'country_name'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Список городов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionCity$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionCity(\n    params?: {\n\n    /**\n     * ID страны (ID берем из запроса - direction_country)\n     */\n      country_id?: number;\n\n    /**\n     * Поисковая строка\n     */\n      search?: string;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * Наименование страны\n */\n'country_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.directionCity$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * Наименование страны\n */\n'country_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * Наименование страны\n */\n'country_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `directionCityInfo()` */\n  static readonly DirectionCityInfoPath = '/direction_city_info';\n\n  /**\n   * Данные запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionCityInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionCityInfo$Response(\n    params?: {\n\n    /**\n     * ID города\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * Наименование страны\n */\n'country_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionCityInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * ID страны\n         */\n        'country_id'?: number;\n        \n        /**\n         * Наименование страны\n         */\n        'country_name'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Данные запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionCityInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionCityInfo(\n    params?: {\n\n    /**\n     * ID города\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * Наименование страны\n */\n'country_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.directionCityInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * Наименование страны\n */\n'country_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * Наименование страны\n */\n'country_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `directionPoint()` */\n  static readonly DirectionPointPath = '/direction_point';\n\n  /**\n   * Список точек (аэропорт/порт/станция).\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionPoint()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionPoint$Response(\n    params: {\n\n    /**\n     * ID страны (ID берем из запроса - direction_country)\n     */\n      country_id?: number;\n\n    /**\n     * ID города (ID берем из запроса - direction_city)\n     */\n      city_id?: number;\n\n    /**\n     * ID способа доставки (ID берем из запроса - transport_kind)\n     */\n      transport_kind_id: number;\n\n    /**\n     * Поисковая строка\n     */\n      search?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID города\n */\n'city_id'?: number;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * ID типа точки\n */\n'type_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionPointPath, 'get');\n    if (params) {\n      rb.query('country_id', params.country_id, {});\n      rb.query('city_id', params.city_id, {});\n      rb.query('transport_kind_id', params.transport_kind_id, {});\n      rb.query('search', params.search, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * ID города\n         */\n        'city_id'?: number;\n        \n        /**\n         * ID страны\n         */\n        'country_id'?: number;\n        \n        /**\n         * ID типа точки\n         */\n        'type_id'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Список точек (аэропорт/порт/станция).\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionPoint$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionPoint(\n    params: {\n\n    /**\n     * ID страны (ID берем из запроса - direction_country)\n     */\n      country_id?: number;\n\n    /**\n     * ID города (ID берем из запроса - direction_city)\n     */\n      city_id?: number;\n\n    /**\n     * ID способа доставки (ID берем из запроса - transport_kind)\n     */\n      transport_kind_id: number;\n\n    /**\n     * Поисковая строка\n     */\n      search?: string;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID города\n */\n'city_id'?: number;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * ID типа точки\n */\n'type_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.directionPoint$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID города\n */\n'city_id'?: number;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * ID типа точки\n */\n'type_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * ID города\n */\n'city_id'?: number;\n\n/**\n * ID страны\n */\n'country_id'?: number;\n\n/**\n * ID типа точки\n */\n'type_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `directionBorder()` */\n  static readonly DirectionBorderPath = '/direction_border';\n\n  /**\n   * Список границ.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionBorder()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionBorder$Response(\n    params: {\n\n    /**\n     * ID страны (ID берем из запроса - direction_country)\n     */\n      country_id: number;\n\n    /**\n     * Поисковая строка\n     */\n      search?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionBorderPath, 'get');\n    if (params) {\n      rb.query('country_id', params.country_id, {});\n      rb.query('search', params.search, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Список границ.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionBorder$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionBorder(\n    params: {\n\n    /**\n     * ID страны (ID берем из запроса - direction_country)\n     */\n      country_id: number;\n\n    /**\n     * Поисковая строка\n     */\n      search?: string;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.directionBorder$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `directionFlight()` */\n  static readonly DirectionFlightPath = '/direction_flight';\n\n  /**\n   * Типы рейсов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionFlight()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionFlight$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionFlightPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Ключ\n         */\n        'key'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Типы рейсов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionFlight$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionFlight(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.directionFlight$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `directionRoute()` */\n  static readonly DirectionRoutePath = '/direction_route';\n\n  /**\n   * Список маршрутов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `directionRoute()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionRoute$Response(\n    params: {\n\n    /**\n     * Тип транспорта (ID берем из запроса - transport_kind)\n     */\n      kind_id: number;\n\n    /**\n     * ID страны отправления (ID берем из запроса - direction_country)\n     */\n      departure_country_id?: number;\n\n    /**\n     * ID страны отправления (ID берем из запроса - direction_city)\n     */\n      departure_city_id?: number;\n\n    /**\n     * ID пункта отправления (ID берем из запроса - direction_point)\n     */\n      departure_point_id?: number;\n\n    /**\n     * ID страны прибытия (ID берем из запроса - direction_country)\n     */\n      arrival_country_id?: number;\n\n    /**\n     * ID страны прибытия (ID берем из запроса - direction_city)\n     */\n      arrival_city_id?: number;\n\n    /**\n     * ID пункта прибытия (ID берем из запроса - direction_point)\n     */\n      arrival_point_id?: number;\n\n    /**\n     * Тип маршрута\n     */\n      route_type?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * Страна отправления\n */\n'country_id_departure'?: number;\n\n/**\n * Город отправления\n */\n'city_id_departure'?: number;\n\n/**\n * Пункт отправления\n */\n'point_id_departure'?: number;\n\n/**\n * Страна прибытия\n */\n'country_id_arrival'?: number;\n\n/**\n * Город прибытия\n */\n'city_id_arrival'?: number;\n\n/**\n * Пункт прибытия\n */\n'point_id_arrival'?: number;\n\n/**\n * Маршрут\n */\n'name'?: string;\n\n/**\n * Дней От\n */\n'days_min'?: string;\n\n/**\n * Дней До\n */\n'days_max'?: string;\n\n/**\n * Тип маршрута\n */\n'route_type'?: {\n\n/**\n * d (ID берем из запроса - d из поля d) (Формат как в запросе - d)\n */\n'd': 'd';\n\n/**\n * t (ID берем из запроса - t из поля t) (Формат как в запросе - t)\n */\n't': 't';\n};\n\n/**\n * Страна отправления Текст\n */\n'country_text_departure': string;\n\n/**\n * Город отправления Текст\n */\n'city_text_departure': string;\n\n/**\n * Пункт отправления Текст\n */\n'point_text_departure': string;\n\n/**\n * Страна прибытия Текст\n */\n'country_text_arrival': string;\n\n/**\n * Город прибытия Текст\n */\n'city_text_arrival': string;\n\n/**\n * Пункт прибытия Текст\n */\n'point_text_arrival': string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, DirectionService.DirectionRoutePath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n      rb.query('departure_country_id', params.departure_country_id, {});\n      rb.query('departure_city_id', params.departure_city_id, {});\n      rb.query('departure_point_id', params.departure_point_id, {});\n      rb.query('arrival_country_id', params.arrival_country_id, {});\n      rb.query('arrival_city_id', params.arrival_city_id, {});\n      rb.query('arrival_point_id', params.arrival_point_id, {});\n      rb.query('route_type', params.route_type, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * Страна отправления\n         */\n        'country_id_departure'?: number;\n        \n        /**\n         * Город отправления\n         */\n        'city_id_departure'?: number;\n        \n        /**\n         * Пункт отправления\n         */\n        'point_id_departure'?: number;\n        \n        /**\n         * Страна прибытия\n         */\n        'country_id_arrival'?: number;\n        \n        /**\n         * Город прибытия\n         */\n        'city_id_arrival'?: number;\n        \n        /**\n         * Пункт прибытия\n         */\n        'point_id_arrival'?: number;\n        \n        /**\n         * Маршрут\n         */\n        'name'?: string;\n        \n        /**\n         * Дней От\n         */\n        'days_min'?: string;\n        \n        /**\n         * Дней До\n         */\n        'days_max'?: string;\n        \n        /**\n         * Тип маршрута\n         */\n        'route_type'?: {\n        \n        /**\n         * d (ID берем из запроса - d из поля d) (Формат как в запросе - d)\n         */\n        'd': 'd';\n        \n        /**\n         * t (ID берем из запроса - t из поля t) (Формат как в запросе - t)\n         */\n        't': 't';\n        };\n        \n        /**\n         * Страна отправления Текст\n         */\n        'country_text_departure': string;\n        \n        /**\n         * Город отправления Текст\n         */\n        'city_text_departure': string;\n        \n        /**\n         * Пункт отправления Текст\n         */\n        'point_text_departure': string;\n        \n        /**\n         * Страна прибытия Текст\n         */\n        'country_text_arrival': string;\n        \n        /**\n         * Город прибытия Текст\n         */\n        'city_text_arrival': string;\n        \n        /**\n         * Пункт прибытия Текст\n         */\n        'point_text_arrival': string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Список маршрутов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `directionRoute$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  directionRoute(\n    params: {\n\n    /**\n     * Тип транспорта (ID берем из запроса - transport_kind)\n     */\n      kind_id: number;\n\n    /**\n     * ID страны отправления (ID берем из запроса - direction_country)\n     */\n      departure_country_id?: number;\n\n    /**\n     * ID страны отправления (ID берем из запроса - direction_city)\n     */\n      departure_city_id?: number;\n\n    /**\n     * ID пункта отправления (ID берем из запроса - direction_point)\n     */\n      departure_point_id?: number;\n\n    /**\n     * ID страны прибытия (ID берем из запроса - direction_country)\n     */\n      arrival_country_id?: number;\n\n    /**\n     * ID страны прибытия (ID берем из запроса - direction_city)\n     */\n      arrival_city_id?: number;\n\n    /**\n     * ID пункта прибытия (ID берем из запроса - direction_point)\n     */\n      arrival_point_id?: number;\n\n    /**\n     * Тип маршрута\n     */\n      route_type?: string;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * Страна отправления\n */\n'country_id_departure'?: number;\n\n/**\n * Город отправления\n */\n'city_id_departure'?: number;\n\n/**\n * Пункт отправления\n */\n'point_id_departure'?: number;\n\n/**\n * Страна прибытия\n */\n'country_id_arrival'?: number;\n\n/**\n * Город прибытия\n */\n'city_id_arrival'?: number;\n\n/**\n * Пункт прибытия\n */\n'point_id_arrival'?: number;\n\n/**\n * Маршрут\n */\n'name'?: string;\n\n/**\n * Дней От\n */\n'days_min'?: string;\n\n/**\n * Дней До\n */\n'days_max'?: string;\n\n/**\n * Тип маршрута\n */\n'route_type'?: {\n\n/**\n * d (ID берем из запроса - d из поля d) (Формат как в запросе - d)\n */\n'd': 'd';\n\n/**\n * t (ID берем из запроса - t из поля t) (Формат как в запросе - t)\n */\n't': 't';\n};\n\n/**\n * Страна отправления Текст\n */\n'country_text_departure': string;\n\n/**\n * Город отправления Текст\n */\n'city_text_departure': string;\n\n/**\n * Пункт отправления Текст\n */\n'point_text_departure': string;\n\n/**\n * Страна прибытия Текст\n */\n'country_text_arrival': string;\n\n/**\n * Город прибытия Текст\n */\n'city_text_arrival': string;\n\n/**\n * Пункт прибытия Текст\n */\n'point_text_arrival': string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.directionRoute$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * Страна отправления\n */\n'country_id_departure'?: number;\n\n/**\n * Город отправления\n */\n'city_id_departure'?: number;\n\n/**\n * Пункт отправления\n */\n'point_id_departure'?: number;\n\n/**\n * Страна прибытия\n */\n'country_id_arrival'?: number;\n\n/**\n * Город прибытия\n */\n'city_id_arrival'?: number;\n\n/**\n * Пункт прибытия\n */\n'point_id_arrival'?: number;\n\n/**\n * Маршрут\n */\n'name'?: string;\n\n/**\n * Дней От\n */\n'days_min'?: string;\n\n/**\n * Дней До\n */\n'days_max'?: string;\n\n/**\n * Тип маршрута\n */\n'route_type'?: {\n\n/**\n * d (ID берем из запроса - d из поля d) (Формат как в запросе - d)\n */\n'd': 'd';\n\n/**\n * t (ID берем из запроса - t из поля t) (Формат как в запросе - t)\n */\n't': 't';\n};\n\n/**\n * Страна отправления Текст\n */\n'country_text_departure': string;\n\n/**\n * Город отправления Текст\n */\n'city_text_departure': string;\n\n/**\n * Пункт отправления Текст\n */\n'point_text_departure': string;\n\n/**\n * Страна прибытия Текст\n */\n'country_text_arrival': string;\n\n/**\n * Город прибытия Текст\n */\n'city_text_arrival': string;\n\n/**\n * Пункт прибытия Текст\n */\n'point_text_arrival': string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * Страна отправления\n */\n'country_id_departure'?: number;\n\n/**\n * Город отправления\n */\n'city_id_departure'?: number;\n\n/**\n * Пункт отправления\n */\n'point_id_departure'?: number;\n\n/**\n * Страна прибытия\n */\n'country_id_arrival'?: number;\n\n/**\n * Город прибытия\n */\n'city_id_arrival'?: number;\n\n/**\n * Пункт прибытия\n */\n'point_id_arrival'?: number;\n\n/**\n * Маршрут\n */\n'name'?: string;\n\n/**\n * Дней От\n */\n'days_min'?: string;\n\n/**\n * Дней До\n */\n'days_max'?: string;\n\n/**\n * Тип маршрута\n */\n'route_type'?: {\n\n/**\n * d (ID берем из запроса - d из поля d) (Формат как в запросе - d)\n */\n'd': 'd';\n\n/**\n * t (ID берем из запроса - t из поля t) (Формат как в запросе - t)\n */\n't': 't';\n};\n\n/**\n * Страна отправления Текст\n */\n'country_text_departure': string;\n\n/**\n * Город отправления Текст\n */\n'city_text_departure': string;\n\n/**\n * Пункт отправления Текст\n */\n'point_text_departure': string;\n\n/**\n * Страна прибытия Текст\n */\n'country_text_arrival': string;\n\n/**\n * Город прибытия Текст\n */\n'city_text_arrival': string;\n\n/**\n * Пункт прибытия Текст\n */\n'point_text_arrival': string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Работа с файлами\n */\n@Injectable({ providedIn: 'root' })\nexport class FileService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `fileList()` */\n  static readonly FileListPath = '/file_list';\n\n  /**\n   * Список файлов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `fileList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  fileList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * ID элемента\n     */\n      item_id?: number;\n\n    /**\n     * Компонент элемента\n     */\n      component?: string;\n\n    /**\n     * Переменная формы\n     */\n      var?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, FileService.FileListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('item_id', params.item_id, {});\n      rb.query('component', params.component, {});\n      rb.query('var', params.var, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ID элемента\n         */\n        'item_id': number;\n        \n        /**\n         * Компонент элемента\n         */\n        'component': string;\n        \n        /**\n         * Переменная формы\n         */\n        'var': string;\n        \n        /**\n         * Ссылка на файл\n         */\n        'path'?: string;\n        \n        /**\n         * Информация по файлу\n         */\n        'file_info'?: Array<string>;\n        \n        /**\n         * Время загрузки файла\n         */\n        'file_time'?: string;\n        \n        /**\n         * Наименование файла\n         */\n        'file_name'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Список файлов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `fileList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  fileList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * ID элемента\n     */\n      item_id?: number;\n\n    /**\n     * Компонент элемента\n     */\n      component?: string;\n\n    /**\n     * Переменная формы\n     */\n      var?: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}> {\n    return this.fileList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n}>): {\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>;\n\n/**\n * Всего позиций\n */\n'total'?: number;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `fileInfo()` */\n  static readonly FileInfoPath = '/file_info';\n\n  /**\n   * Файл: данные.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `fileInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  fileInfo$Response(\n    params?: {\n\n    /**\n     * ID файла\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, FileService.FileInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ID элемента\n         */\n        'item_id': number;\n        \n        /**\n         * Компонент элемента\n         */\n        'component': string;\n        \n        /**\n         * Переменная формы\n         */\n        'var': string;\n        \n        /**\n         * Ссылка на файл\n         */\n        'path'?: string;\n        \n        /**\n         * Информация по файлу\n         */\n        'file_info'?: Array<string>;\n        \n        /**\n         * Время загрузки файла\n         */\n        'file_time'?: string;\n        \n        /**\n         * Наименование файла\n         */\n        'file_name'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файл: данные.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `fileInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  fileInfo(\n    params?: {\n\n    /**\n     * ID файла\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> {\n    return this.fileInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `fileCreate()` */\n  static readonly FileCreatePath = '/file_create';\n\n  /**\n   * Файлы: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `fileCreate()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  fileCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Файл\n */\n'file': file;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, FileService.FileCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'multipart/form-data');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файлы: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `fileCreate$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  fileCreate(\n    params?: {\n      body?: {\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Файл\n */\n'file': file;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.fileCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `fileUpdate()` */\n  static readonly FileUpdatePath = '/file_update';\n\n  /**\n   * Файлы: обновление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `fileUpdate()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  fileUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Файл\n */\n'file': file;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, FileService.FileUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'multipart/form-data');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файлы: обновление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `fileUpdate$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  fileUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Файл\n */\n'file': file;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.fileUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `fileDelete()` */\n  static readonly FileDeletePath = '/file_delete';\n\n  /**\n   * Файлы: удаление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `fileDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  fileDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой записи\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, FileService.FileDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файлы: удаление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `fileDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  fileDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой записи\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Компонент элемента\n */\n'component': string;\n\n/**\n * Переменная формы\n */\n'var': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.fileDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `fileDownload()` */\n  static readonly FileDownloadPath = '/file_download';\n\n  /**\n   * Файл: получить.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `fileDownload()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  fileDownload$Response(\n    params?: {\n\n    /**\n     * ID файла\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, FileService.FileDownloadPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файл: получить.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `fileDownload$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  fileDownload(\n    params?: {\n\n    /**\n     * ID файла\n     */\n      id?: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.fileDownload$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Сообщения\n */\n@Injectable({ providedIn: 'root' })\nexport class MessageService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `messageList()` */\n  static readonly MessageListPath = '/message_list';\n\n  /**\n   * Сообщения.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `messageList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  messageList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Дата создания\n */\n'date': string;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст сообщения\n */\n'text': string;\n\n/**\n * Доп. данные\n */\n'data'?: {\n};\n\n/**\n * Кому пользователь\n */\n'to_user_id'?: number;\n\n/**\n * Кому фирма\n */\n'to_company_id'?: number;\n\n/**\n * Кому контрагент\n */\n'to_contractor_id'?: number;\n\n/**\n * Статус\n */\n'status': string;\n\n/**\n * Статус\n */\n'status_text': string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, MessageService.MessageListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * Дата создания\n         */\n        'date': string;\n        \n        /**\n         * Тема\n         */\n        'subject': string;\n        \n        /**\n         * Текст сообщения\n         */\n        'text': string;\n        \n        /**\n         * Доп. данные\n         */\n        'data'?: {\n        };\n        \n        /**\n         * Кому пользователь\n         */\n        'to_user_id'?: number;\n        \n        /**\n         * Кому фирма\n         */\n        'to_company_id'?: number;\n        \n        /**\n         * Кому контрагент\n         */\n        'to_contractor_id'?: number;\n        \n        /**\n         * Статус\n         */\n        'status': string;\n        \n        /**\n         * Статус\n         */\n        'status_text': string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сообщения.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `messageList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  messageList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Дата создания\n */\n'date': string;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст сообщения\n */\n'text': string;\n\n/**\n * Доп. данные\n */\n'data'?: {\n};\n\n/**\n * Кому пользователь\n */\n'to_user_id'?: number;\n\n/**\n * Кому фирма\n */\n'to_company_id'?: number;\n\n/**\n * Кому контрагент\n */\n'to_contractor_id'?: number;\n\n/**\n * Статус\n */\n'status': string;\n\n/**\n * Статус\n */\n'status_text': string;\n}>;\n}> {\n    return this.messageList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Дата создания\n */\n'date': string;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст сообщения\n */\n'text': string;\n\n/**\n * Доп. данные\n */\n'data'?: {\n};\n\n/**\n * Кому пользователь\n */\n'to_user_id'?: number;\n\n/**\n * Кому фирма\n */\n'to_company_id'?: number;\n\n/**\n * Кому контрагент\n */\n'to_contractor_id'?: number;\n\n/**\n * Статус\n */\n'status': string;\n\n/**\n * Статус\n */\n'status_text': string;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Дата создания\n */\n'date': string;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст сообщения\n */\n'text': string;\n\n/**\n * Доп. данные\n */\n'data'?: {\n};\n\n/**\n * Кому пользователь\n */\n'to_user_id'?: number;\n\n/**\n * Кому фирма\n */\n'to_company_id'?: number;\n\n/**\n * Кому контрагент\n */\n'to_contractor_id'?: number;\n\n/**\n * Статус\n */\n'status': string;\n\n/**\n * Статус\n */\n'status_text': string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `messageListParam()` */\n  static readonly MessageListParamPath = '/message_list_param';\n\n  /**\n   * Параметры вывода клиентов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `messageListParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  messageListParam$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, MessageService.MessageListParamPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Параметры поиска\n         */\n        'search'?: Array<{\n        \n        /**\n         * Поиск в заголовке\n         */\n        'header'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск основной\n         */\n        'main'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск расширенный\n         */\n        'additional'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        }>;\n        \n        /**\n         * Параметры таблицы\n         */\n        'table'?: Array<{\n        \n        /**\n         * Блок колонок\n         */\n        'column'?: string;\n        \n        /**\n         * Данные колонок\n         */\n        'items'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Заголовок поля\n         */\n        'title'?: string;\n        \n        /**\n         * Ширина поля\n         */\n        'width'?: number;\n        }>;\n        }>;\n        \n        /**\n         * Параметры сортировки\n         */\n        'order'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Сортировка по умолчанию\n         */\n        'dir'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры вывода клиентов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `messageListParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  messageListParam(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}> {\n    return this.messageListParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>): {\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `messageFormParam()` */\n  static readonly MessageFormParamPath = '/message_form_param';\n\n  /**\n   * Параметры для форм.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `messageFormParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  messageFormParam$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статусы\n */\n'status': Array<{\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, MessageService.MessageFormParamPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статусы\n         */\n        'status': Array<{\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры для форм.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `messageFormParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  messageFormParam(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статусы\n */\n'status': Array<{\n}>;\n}> {\n    return this.messageFormParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статусы\n */\n'status': Array<{\n}>;\n}>): {\n\n/**\n * Статусы\n */\n'status': Array<{\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `messageSave()` */\n  static readonly MessageSavePath = '/message_save';\n\n  /**\n   * Сохранение сообщения.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `messageSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  messageSave$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст сообщения\n */\n'text': string;\n\n/**\n * Доп. данные\n */\n'data'?: {\n};\n\n/**\n * Кому пользователь\n */\n'to_user_id'?: number;\n\n/**\n * Кому фирма\n */\n'to_company_id'?: number;\n\n/**\n * Кому контрагент\n */\n'to_contractor_id'?: number;\n\n/**\n * Статус\n */\n'status': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, MessageService.MessageSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сохранение сообщения.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `messageSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  messageSave(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст сообщения\n */\n'text': string;\n\n/**\n * Доп. данные\n */\n'data'?: {\n};\n\n/**\n * Кому пользователь\n */\n'to_user_id'?: number;\n\n/**\n * Кому фирма\n */\n'to_company_id'?: number;\n\n/**\n * Кому контрагент\n */\n'to_contractor_id'?: number;\n\n/**\n * Статус\n */\n'status': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.messageSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `messageSetRead()` */\n  static readonly MessageSetReadPath = '/message_set_read';\n\n  /**\n   * Установка статуса прочтения.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `messageSetRead()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  messageSetRead$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'ids': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, MessageService.MessageSetReadPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Установка статуса прочтения.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `messageSetRead$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  messageSetRead(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'ids': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.messageSetRead$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `messageGetNew()` */\n  static readonly MessageGetNewPath = '/message_get_new';\n\n  /**\n   * Получить новые сообщения.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `messageGetNew()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  messageGetNew$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * От кого\n */\n'from': string;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст\n */\n'text': string;\n\n/**\n * Время создания\n */\n'time_add': string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, MessageService.MessageGetNewPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * От кого\n         */\n        'from': string;\n        \n        /**\n         * Тема\n         */\n        'subject': string;\n        \n        /**\n         * Текст\n         */\n        'text': string;\n        \n        /**\n         * Время создания\n         */\n        'time_add': string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Получить новые сообщения.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `messageGetNew$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  messageGetNew(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * От кого\n */\n'from': string;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст\n */\n'text': string;\n\n/**\n * Время создания\n */\n'time_add': string;\n}>> {\n    return this.messageGetNew$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * От кого\n */\n'from': string;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст\n */\n'text': string;\n\n/**\n * Время создания\n */\n'time_add': string;\n}>>): Array<{\n\n/**\n * От кого\n */\n'from': string;\n\n/**\n * Тема\n */\n'subject': string;\n\n/**\n * Текст\n */\n'text': string;\n\n/**\n * Время создания\n */\n'time_add': string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `messageDelete()` */\n  static readonly MessageDeletePath = '/message_delete';\n\n  /**\n   * Удаление сообщения.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `messageDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  messageDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, MessageService.MessageDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление сообщения.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `messageDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  messageDelete(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.messageDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Работа с заказами\n */\n@Injectable({ providedIn: 'root' })\nexport class OrderService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `orderListParam()` */\n  static readonly OrderListParamPath = '/order_list_param';\n\n  /**\n   * Параметры вывода запросов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `orderListParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  orderListParam$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, OrderService.OrderListParamPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Параметры поиска\n         */\n        'search'?: Array<{\n        \n        /**\n         * Поиск в заголовке\n         */\n        'header'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск основной\n         */\n        'main'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск расширенный\n         */\n        'additional'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        }>;\n        \n        /**\n         * Параметры таблицы\n         */\n        'table'?: Array<{\n        \n        /**\n         * Блок колонок\n         */\n        'column'?: string;\n        \n        /**\n         * Данные колонок\n         */\n        'items'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Заголовок поля\n         */\n        'title'?: string;\n        \n        /**\n         * Ширина поля\n         */\n        'width'?: number;\n        }>;\n        }>;\n        \n        /**\n         * Параметры сортировки\n         */\n        'order'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Сортировка по умолчанию\n         */\n        'dir'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры вывода запросов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `orderListParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  orderListParam(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}> {\n    return this.orderListParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>): {\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `orderFormParam()` */\n  static readonly OrderFormParamPath = '/order_form_param';\n\n  /**\n   * Параметры для форм.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `orderFormParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  orderFormParam$Response(\n    params: {\n\n    /**\n     * Тип перевозки\n     */\n      kind_id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Виды перевозки\n */\n'kinds': Array<{\n}>;\n\n/**\n * Статусы\n */\n'statuses': Array<{\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, OrderService.OrderFormParamPath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Виды перевозки\n         */\n        'kinds': Array<{\n        }>;\n        \n        /**\n         * Статусы\n         */\n        'statuses': Array<{\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры для форм.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `orderFormParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  orderFormParam(\n    params: {\n\n    /**\n     * Тип перевозки\n     */\n      kind_id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Виды перевозки\n */\n'kinds': Array<{\n}>;\n\n/**\n * Статусы\n */\n'statuses': Array<{\n}>;\n}> {\n    return this.orderFormParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Виды перевозки\n */\n'kinds': Array<{\n}>;\n\n/**\n * Статусы\n */\n'statuses': Array<{\n}>;\n}>): {\n\n/**\n * Виды перевозки\n */\n'kinds': Array<{\n}>;\n\n/**\n * Статусы\n */\n'statuses': Array<{\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `orderList()` */\n  static readonly OrderListPath = '/order_list';\n\n  /**\n   * Список заказов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `orderList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  orderList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'status';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events': Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n\n/**\n * Дата события кратко\n */\n'date_short'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses': Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Дата для таблицы\n */\n'date': string;\n\n/**\n * Класс для ячейки\n */\n'class': string;\n}>;\n\n/**\n * ID статуса движения груза\n */\n'cargo_status_id': number;\n\n/**\n * Статус движения груза\n */\n'cargo_status': string;\n\n/**\n * Следующее планируемое события\n */\n'next_events': {\n};\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Статус заказа\n */\n'status': number;\n\n/**\n * Наименование заказчика\n */\n'customer_name': string;\n\n/**\n * Наименование контрагента\n */\n'contractor_name': string;\n\n/**\n * Наименование страны отправления\n */\n'departure_country_name': string;\n\n/**\n * Наименование города отправления\n */\n'departure_city_name': string;\n\n/**\n * Наименование пункта отправления\n */\n'departure_point_name': string;\n\n/**\n * Откуда\n */\n'departure_text': string;\n\n/**\n * Наименование страны прибытия\n */\n'arrival_country_name': string;\n\n/**\n * Наименование города прибытия\n */\n'arrival_city_name': string;\n\n/**\n * Наименование пункта прибытия\n */\n'arrival_point_name': string;\n\n/**\n * Откуда\n */\n'arrival_text': string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, OrderService.OrderListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ID статуса заказа\n         */\n        'status_id': number;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * ID заказчика\n         */\n        'customer_id': number;\n        \n        /**\n         * ID контрагента\n         */\n        'contractor_id': number;\n        \n        /**\n         * ID КП\n         */\n        'offer_id': number;\n        \n        /**\n         * ID границы\n         */\n        'border_id': number;\n        \n        /**\n         * ID страны отправления\n         */\n        'departure_country_id': number;\n        \n        /**\n         * ID города отправления\n         */\n        'departure_city_id': number;\n        \n        /**\n         * ID пункта отправления\n         */\n        'departure_point_id': number;\n        \n        /**\n         * ID страны прибытия\n         */\n        'arrival_country_id': number;\n        \n        /**\n         * ID города прибытия\n         */\n        'arrival_city_id': number;\n        \n        /**\n         * ID пункта прибытия\n         */\n        'arrival_point_id': number;\n        \n        /**\n         * ID вида транспорта\n         */\n        'transport_kind_id': number;\n        \n        /**\n         * Номер документа ТС\n         */\n        'doc_tc_number'?: string;\n        \n        /**\n         * Track ТС\n         */\n        'track_tc'?: string;\n        \n        /**\n         * Track СВХ\n         */\n        'track_svh'?: string;\n        \n        /**\n         * TT\n         */\n        'tt'?: string;\n        \n        /**\n         * Комментарий\n         */\n        'comment'?: string;\n        \n        /**\n         * События\n         */\n        'events': Array<{\n        \n        /**\n         * Текст события\n         */\n        'text'?: string;\n        \n        /**\n         * Дата события\n         */\n        'date'?: string;\n        \n        /**\n         * Дата события кратко\n         */\n        'date_short'?: string;\n        }>;\n        \n        /**\n         * Настройка статусов\n         */\n        'statuses': Array<{\n        \n        /**\n         * ID статуса\n         */\n        'status_id'?: number;\n        \n        /**\n         * Планируемая дата статуса\n         */\n        'scheduled_date'?: string;\n        \n        /**\n         * Фактическая дата статуса\n         */\n        'done_date'?: string;\n        \n        /**\n         * Дата для таблицы\n         */\n        'date': string;\n        \n        /**\n         * Класс для ячейки\n         */\n        'class': string;\n        }>;\n        \n        /**\n         * ID статуса движения груза\n         */\n        'cargo_status_id': number;\n        \n        /**\n         * Статус движения груза\n         */\n        'cargo_status': string;\n        \n        /**\n         * Следующее планируемое события\n         */\n        'next_events': {\n        };\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * Статус заказа\n         */\n        'status': number;\n        \n        /**\n         * Наименование заказчика\n         */\n        'customer_name': string;\n        \n        /**\n         * Наименование контрагента\n         */\n        'contractor_name': string;\n        \n        /**\n         * Наименование страны отправления\n         */\n        'departure_country_name': string;\n        \n        /**\n         * Наименование города отправления\n         */\n        'departure_city_name': string;\n        \n        /**\n         * Наименование пункта отправления\n         */\n        'departure_point_name': string;\n        \n        /**\n         * Откуда\n         */\n        'departure_text': string;\n        \n        /**\n         * Наименование страны прибытия\n         */\n        'arrival_country_name': string;\n        \n        /**\n         * Наименование города прибытия\n         */\n        'arrival_city_name': string;\n        \n        /**\n         * Наименование пункта прибытия\n         */\n        'arrival_point_name': string;\n        \n        /**\n         * Откуда\n         */\n        'arrival_text': string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Список заказов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `orderList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  orderList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'status';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events': Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n\n/**\n * Дата события кратко\n */\n'date_short'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses': Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Дата для таблицы\n */\n'date': string;\n\n/**\n * Класс для ячейки\n */\n'class': string;\n}>;\n\n/**\n * ID статуса движения груза\n */\n'cargo_status_id': number;\n\n/**\n * Статус движения груза\n */\n'cargo_status': string;\n\n/**\n * Следующее планируемое события\n */\n'next_events': {\n};\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Статус заказа\n */\n'status': number;\n\n/**\n * Наименование заказчика\n */\n'customer_name': string;\n\n/**\n * Наименование контрагента\n */\n'contractor_name': string;\n\n/**\n * Наименование страны отправления\n */\n'departure_country_name': string;\n\n/**\n * Наименование города отправления\n */\n'departure_city_name': string;\n\n/**\n * Наименование пункта отправления\n */\n'departure_point_name': string;\n\n/**\n * Откуда\n */\n'departure_text': string;\n\n/**\n * Наименование страны прибытия\n */\n'arrival_country_name': string;\n\n/**\n * Наименование города прибытия\n */\n'arrival_city_name': string;\n\n/**\n * Наименование пункта прибытия\n */\n'arrival_point_name': string;\n\n/**\n * Откуда\n */\n'arrival_text': string;\n}>;\n}> {\n    return this.orderList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events': Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n\n/**\n * Дата события кратко\n */\n'date_short'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses': Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Дата для таблицы\n */\n'date': string;\n\n/**\n * Класс для ячейки\n */\n'class': string;\n}>;\n\n/**\n * ID статуса движения груза\n */\n'cargo_status_id': number;\n\n/**\n * Статус движения груза\n */\n'cargo_status': string;\n\n/**\n * Следующее планируемое события\n */\n'next_events': {\n};\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Статус заказа\n */\n'status': number;\n\n/**\n * Наименование заказчика\n */\n'customer_name': string;\n\n/**\n * Наименование контрагента\n */\n'contractor_name': string;\n\n/**\n * Наименование страны отправления\n */\n'departure_country_name': string;\n\n/**\n * Наименование города отправления\n */\n'departure_city_name': string;\n\n/**\n * Наименование пункта отправления\n */\n'departure_point_name': string;\n\n/**\n * Откуда\n */\n'departure_text': string;\n\n/**\n * Наименование страны прибытия\n */\n'arrival_country_name': string;\n\n/**\n * Наименование города прибытия\n */\n'arrival_city_name': string;\n\n/**\n * Наименование пункта прибытия\n */\n'arrival_point_name': string;\n\n/**\n * Откуда\n */\n'arrival_text': string;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events': Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n\n/**\n * Дата события кратко\n */\n'date_short'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses': Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Дата для таблицы\n */\n'date': string;\n\n/**\n * Класс для ячейки\n */\n'class': string;\n}>;\n\n/**\n * ID статуса движения груза\n */\n'cargo_status_id': number;\n\n/**\n * Статус движения груза\n */\n'cargo_status': string;\n\n/**\n * Следующее планируемое события\n */\n'next_events': {\n};\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Статус заказа\n */\n'status': number;\n\n/**\n * Наименование заказчика\n */\n'customer_name': string;\n\n/**\n * Наименование контрагента\n */\n'contractor_name': string;\n\n/**\n * Наименование страны отправления\n */\n'departure_country_name': string;\n\n/**\n * Наименование города отправления\n */\n'departure_city_name': string;\n\n/**\n * Наименование пункта отправления\n */\n'departure_point_name': string;\n\n/**\n * Откуда\n */\n'departure_text': string;\n\n/**\n * Наименование страны прибытия\n */\n'arrival_country_name': string;\n\n/**\n * Наименование города прибытия\n */\n'arrival_city_name': string;\n\n/**\n * Наименование пункта прибытия\n */\n'arrival_point_name': string;\n\n/**\n * Откуда\n */\n'arrival_text': string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `orderInfo()` */\n  static readonly OrderInfoPath = '/order_info';\n\n  /**\n   * Данны по заказу.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `orderInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  orderInfo$Response(\n    params: {\n\n    /**\n     * ID Заказа\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events': Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n\n/**\n * Дата события кратко\n */\n'date_short'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses': Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Дата для таблицы\n */\n'date': string;\n\n/**\n * Класс для ячейки\n */\n'class': string;\n}>;\n\n/**\n * ID статуса движения груза\n */\n'cargo_status_id': number;\n\n/**\n * Статус движения груза\n */\n'cargo_status': string;\n\n/**\n * Следующее планируемое события\n */\n'next_events': {\n};\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Статус заказа\n */\n'status': number;\n\n/**\n * Наименование заказчика\n */\n'customer_name': string;\n\n/**\n * Наименование контрагента\n */\n'contractor_name': string;\n\n/**\n * Наименование страны отправления\n */\n'departure_country_name': string;\n\n/**\n * Наименование города отправления\n */\n'departure_city_name': string;\n\n/**\n * Наименование пункта отправления\n */\n'departure_point_name': string;\n\n/**\n * Откуда\n */\n'departure_text': string;\n\n/**\n * Наименование страны прибытия\n */\n'arrival_country_name': string;\n\n/**\n * Наименование города прибытия\n */\n'arrival_city_name': string;\n\n/**\n * Наименование пункта прибытия\n */\n'arrival_point_name': string;\n\n/**\n * Откуда\n */\n'arrival_text': string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, OrderService.OrderInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ID статуса заказа\n         */\n        'status_id': number;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * ID заказчика\n         */\n        'customer_id': number;\n        \n        /**\n         * ID контрагента\n         */\n        'contractor_id': number;\n        \n        /**\n         * ID КП\n         */\n        'offer_id': number;\n        \n        /**\n         * ID границы\n         */\n        'border_id': number;\n        \n        /**\n         * ID страны отправления\n         */\n        'departure_country_id': number;\n        \n        /**\n         * ID города отправления\n         */\n        'departure_city_id': number;\n        \n        /**\n         * ID пункта отправления\n         */\n        'departure_point_id': number;\n        \n        /**\n         * ID страны прибытия\n         */\n        'arrival_country_id': number;\n        \n        /**\n         * ID города прибытия\n         */\n        'arrival_city_id': number;\n        \n        /**\n         * ID пункта прибытия\n         */\n        'arrival_point_id': number;\n        \n        /**\n         * ID вида транспорта\n         */\n        'transport_kind_id': number;\n        \n        /**\n         * Номер документа ТС\n         */\n        'doc_tc_number'?: string;\n        \n        /**\n         * Track ТС\n         */\n        'track_tc'?: string;\n        \n        /**\n         * Track СВХ\n         */\n        'track_svh'?: string;\n        \n        /**\n         * TT\n         */\n        'tt'?: string;\n        \n        /**\n         * Комментарий\n         */\n        'comment'?: string;\n        \n        /**\n         * События\n         */\n        'events': Array<{\n        \n        /**\n         * Текст события\n         */\n        'text'?: string;\n        \n        /**\n         * Дата события\n         */\n        'date'?: string;\n        \n        /**\n         * Дата события кратко\n         */\n        'date_short'?: string;\n        }>;\n        \n        /**\n         * Настройка статусов\n         */\n        'statuses': Array<{\n        \n        /**\n         * ID статуса\n         */\n        'status_id'?: number;\n        \n        /**\n         * Планируемая дата статуса\n         */\n        'scheduled_date'?: string;\n        \n        /**\n         * Фактическая дата статуса\n         */\n        'done_date'?: string;\n        \n        /**\n         * Дата для таблицы\n         */\n        'date': string;\n        \n        /**\n         * Класс для ячейки\n         */\n        'class': string;\n        }>;\n        \n        /**\n         * ID статуса движения груза\n         */\n        'cargo_status_id': number;\n        \n        /**\n         * Статус движения груза\n         */\n        'cargo_status': string;\n        \n        /**\n         * Следующее планируемое события\n         */\n        'next_events': {\n        };\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * Статус заказа\n         */\n        'status': number;\n        \n        /**\n         * Наименование заказчика\n         */\n        'customer_name': string;\n        \n        /**\n         * Наименование контрагента\n         */\n        'contractor_name': string;\n        \n        /**\n         * Наименование страны отправления\n         */\n        'departure_country_name': string;\n        \n        /**\n         * Наименование города отправления\n         */\n        'departure_city_name': string;\n        \n        /**\n         * Наименование пункта отправления\n         */\n        'departure_point_name': string;\n        \n        /**\n         * Откуда\n         */\n        'departure_text': string;\n        \n        /**\n         * Наименование страны прибытия\n         */\n        'arrival_country_name': string;\n        \n        /**\n         * Наименование города прибытия\n         */\n        'arrival_city_name': string;\n        \n        /**\n         * Наименование пункта прибытия\n         */\n        'arrival_point_name': string;\n        \n        /**\n         * Откуда\n         */\n        'arrival_text': string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Данны по заказу.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `orderInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  orderInfo(\n    params: {\n\n    /**\n     * ID Заказа\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events': Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n\n/**\n * Дата события кратко\n */\n'date_short'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses': Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Дата для таблицы\n */\n'date': string;\n\n/**\n * Класс для ячейки\n */\n'class': string;\n}>;\n\n/**\n * ID статуса движения груза\n */\n'cargo_status_id': number;\n\n/**\n * Статус движения груза\n */\n'cargo_status': string;\n\n/**\n * Следующее планируемое события\n */\n'next_events': {\n};\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Статус заказа\n */\n'status': number;\n\n/**\n * Наименование заказчика\n */\n'customer_name': string;\n\n/**\n * Наименование контрагента\n */\n'contractor_name': string;\n\n/**\n * Наименование страны отправления\n */\n'departure_country_name': string;\n\n/**\n * Наименование города отправления\n */\n'departure_city_name': string;\n\n/**\n * Наименование пункта отправления\n */\n'departure_point_name': string;\n\n/**\n * Откуда\n */\n'departure_text': string;\n\n/**\n * Наименование страны прибытия\n */\n'arrival_country_name': string;\n\n/**\n * Наименование города прибытия\n */\n'arrival_city_name': string;\n\n/**\n * Наименование пункта прибытия\n */\n'arrival_point_name': string;\n\n/**\n * Откуда\n */\n'arrival_text': string;\n}> {\n    return this.orderInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events': Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n\n/**\n * Дата события кратко\n */\n'date_short'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses': Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Дата для таблицы\n */\n'date': string;\n\n/**\n * Класс для ячейки\n */\n'class': string;\n}>;\n\n/**\n * ID статуса движения груза\n */\n'cargo_status_id': number;\n\n/**\n * Статус движения груза\n */\n'cargo_status': string;\n\n/**\n * Следующее планируемое события\n */\n'next_events': {\n};\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Статус заказа\n */\n'status': number;\n\n/**\n * Наименование заказчика\n */\n'customer_name': string;\n\n/**\n * Наименование контрагента\n */\n'contractor_name': string;\n\n/**\n * Наименование страны отправления\n */\n'departure_country_name': string;\n\n/**\n * Наименование города отправления\n */\n'departure_city_name': string;\n\n/**\n * Наименование пункта отправления\n */\n'departure_point_name': string;\n\n/**\n * Откуда\n */\n'departure_text': string;\n\n/**\n * Наименование страны прибытия\n */\n'arrival_country_name': string;\n\n/**\n * Наименование города прибытия\n */\n'arrival_city_name': string;\n\n/**\n * Наименование пункта прибытия\n */\n'arrival_point_name': string;\n\n/**\n * Откуда\n */\n'arrival_text': string;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events': Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n\n/**\n * Дата события кратко\n */\n'date_short'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses': Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Дата для таблицы\n */\n'date': string;\n\n/**\n * Класс для ячейки\n */\n'class': string;\n}>;\n\n/**\n * ID статуса движения груза\n */\n'cargo_status_id': number;\n\n/**\n * Статус движения груза\n */\n'cargo_status': string;\n\n/**\n * Следующее планируемое события\n */\n'next_events': {\n};\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Статус заказа\n */\n'status': number;\n\n/**\n * Наименование заказчика\n */\n'customer_name': string;\n\n/**\n * Наименование контрагента\n */\n'contractor_name': string;\n\n/**\n * Наименование страны отправления\n */\n'departure_country_name': string;\n\n/**\n * Наименование города отправления\n */\n'departure_city_name': string;\n\n/**\n * Наименование пункта отправления\n */\n'departure_point_name': string;\n\n/**\n * Откуда\n */\n'departure_text': string;\n\n/**\n * Наименование страны прибытия\n */\n'arrival_country_name': string;\n\n/**\n * Наименование города прибытия\n */\n'arrival_city_name': string;\n\n/**\n * Наименование пункта прибытия\n */\n'arrival_point_name': string;\n\n/**\n * Откуда\n */\n'arrival_text': string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `orderMakeFromOffer()` */\n  static readonly OrderMakeFromOfferPath = '/order_make_from_offer';\n\n  /**\n   * Создание заказа на основе КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `orderMakeFromOffer()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  orderMakeFromOffer$Response(\n    params?: {\n      body?: {\n\n/**\n * ID КП\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, OrderService.OrderMakeFromOfferPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Создание заказа на основе КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `orderMakeFromOffer$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  orderMakeFromOffer(\n    params?: {\n      body?: {\n\n/**\n * ID КП\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.orderMakeFromOffer$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `orderMake()` */\n  static readonly OrderMakePath = '/order_make';\n\n  /**\n   * Создание заказа.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `orderMake()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  orderMake$Response(\n    params?: {\n      body?: {\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events'?: Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses'?: Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Фактическая дата для таблицы\n */\n'date'?: string;\n\n/**\n * Класс для ячейки таблицы\n */\n'class'?: string;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, OrderService.OrderMakePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Создание заказа.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `orderMake$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  orderMake(\n    params?: {\n      body?: {\n\n/**\n * ID статуса заказа\n */\n'status_id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID заказчика\n */\n'customer_id': number;\n\n/**\n * ID контрагента\n */\n'contractor_id': number;\n\n/**\n * ID КП\n */\n'offer_id': number;\n\n/**\n * ID границы\n */\n'border_id': number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id': number;\n\n/**\n * ID города отправления\n */\n'departure_city_id': number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id': number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id': number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id': number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id': number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id': number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events'?: Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses'?: Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Фактическая дата для таблицы\n */\n'date'?: string;\n\n/**\n * Класс для ячейки таблицы\n */\n'class'?: string;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.orderMake$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `orderUpdate()` */\n  static readonly OrderUpdatePath = '/order_update';\n\n  /**\n   * Редактирование заказа.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `orderUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  orderUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id'?: number;\n\n/**\n * ID Запроса\n */\n'request_id'?: number;\n\n/**\n * ID заказчика\n */\n'customer_id'?: number;\n\n/**\n * ID контрагента\n */\n'contractor_id'?: number;\n\n/**\n * ID КП\n */\n'offer_id'?: number;\n\n/**\n * ID границы\n */\n'border_id'?: number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id'?: number;\n\n/**\n * ID города отправления\n */\n'departure_city_id'?: number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id'?: number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id'?: number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id'?: number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id'?: number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id'?: number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events'?: Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses'?: Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Фактическая дата для таблицы\n */\n'date'?: string;\n\n/**\n * Класс для ячейки таблицы\n */\n'class'?: string;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, OrderService.OrderUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Редактирование заказа.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `orderUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  orderUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID статуса заказа\n */\n'status_id'?: number;\n\n/**\n * ID Запроса\n */\n'request_id'?: number;\n\n/**\n * ID заказчика\n */\n'customer_id'?: number;\n\n/**\n * ID контрагента\n */\n'contractor_id'?: number;\n\n/**\n * ID КП\n */\n'offer_id'?: number;\n\n/**\n * ID границы\n */\n'border_id'?: number;\n\n/**\n * ID страны отправления\n */\n'departure_country_id'?: number;\n\n/**\n * ID города отправления\n */\n'departure_city_id'?: number;\n\n/**\n * ID пункта отправления\n */\n'departure_point_id'?: number;\n\n/**\n * ID страны прибытия\n */\n'arrival_country_id'?: number;\n\n/**\n * ID города прибытия\n */\n'arrival_city_id'?: number;\n\n/**\n * ID пункта прибытия\n */\n'arrival_point_id'?: number;\n\n/**\n * ID вида транспорта\n */\n'transport_kind_id'?: number;\n\n/**\n * Номер документа ТС\n */\n'doc_tc_number'?: string;\n\n/**\n * Track ТС\n */\n'track_tc'?: string;\n\n/**\n * Track СВХ\n */\n'track_svh'?: string;\n\n/**\n * TT\n */\n'tt'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * События\n */\n'events'?: Array<{\n\n/**\n * Текст события\n */\n'text'?: string;\n\n/**\n * Дата события\n */\n'date'?: string;\n}>;\n\n/**\n * Настройка статусов\n */\n'statuses'?: Array<{\n\n/**\n * ID статуса\n */\n'status_id'?: number;\n\n/**\n * Планируемая дата статуса\n */\n'scheduled_date'?: string;\n\n/**\n * Фактическая дата статуса\n */\n'done_date'?: string;\n\n/**\n * Фактическая дата для таблицы\n */\n'date'?: string;\n\n/**\n * Класс для ячейки таблицы\n */\n'class'?: string;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.orderUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `orderDelete()` */\n  static readonly OrderDeletePath = '/order_delete';\n\n  /**\n   * Удаление заказа.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `orderDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  orderDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого заказа\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, OrderService.OrderDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление заказа.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `orderDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  orderDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого заказа\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.orderDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Запросы\n */\n@Injectable({ providedIn: 'root' })\nexport class RequestService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `requestList()` */\n  static readonly RequestListPath = '/request_list';\n\n  /**\n   * Список запросов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestList$Response(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'time_add' | 'customer_name' | 'departure_text' | 'arrival_text' | 'status_crm_name' | 'rate_contractor_name';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Имя клиента\n */\n'customer_name'?: string;\n\n/**\n * Телефон клиента\n */\n'customer_phone'?: string;\n\n/**\n * Email клиента\n */\n'customer_email'?: string;\n\n/**\n * Наименование клиента\n */\n'customer_text'?: string;\n\n/**\n * Доп. инфо клиента\n */\n'customer_info'?: string;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Вид перевозки\n */\n'transport_kind_name'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Тип транспорта\n */\n'transport_type_name'?: string;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Тип груза\n */\n'cargo_type_text': string;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Груз\n */\n'cargo_text'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Документы по грузу\n */\n'cargo_file'?: {\n};\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Отправление\n */\n'departure_text'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Прибытие\n */\n'arrival_text'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Ставки дали\n */\n'rates'?: string;\n\n/**\n * Минимальная ставка Подрядчик ID\n */\n'rate_contractor_id'?: number;\n\n/**\n * Минимальная ставка Подрядчик\n */\n'rate_contractor_name'?: string;\n\n/**\n * Минимальная ставка Срок, дней\n */\n'rate_delivery_days'?: string;\n\n/**\n * Минимальная ставка Сумма\n */\n'rate_delivery_cost'?: string;\n\n/**\n * Профит сумма\n */\n'profit_amount'?: string;\n\n/**\n * Профит процент\n */\n'profit_percent'?: string;\n\n/**\n * Ставка клиенту\n */\n'bid_client'?: string;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Время начала торгов\n */\n'time_bidding_start'?: string;\n\n/**\n * Время рассылки информации по торгам\n */\n'time_bidding_send'?: string;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n\n/**\n * Ответственный инициатор (ID берем из запроса - company_employee_list)\n */\n'manager_initiator_id'?: number;\n\n/**\n * Ответственный инициатор\n */\n'manager_initiator_name'?: string;\n\n/**\n * Ответственный создатель (ID берем из запроса - company_employee_list)\n */\n'manager_creator_id'?: number;\n\n/**\n * Ответственный создатель\n */\n'manager_creator_name'?: string;\n\n/**\n * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n */\n'manager_executor_id'?: number;\n\n/**\n * Ответственный исполнитель\n */\n'manager_executor_name'?: string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Кол-во отправленных заявок на запрос\n */\n'count_rate_send'?: number;\n\n/**\n * Кол-во отвеченных заявок на запрос\n */\n'count_rate_answer'?: number;\n\n/**\n * Кол-во отправленных/отвеченных заявок на запрос\n */\n'count_rate_text'?: string;\n\n/**\n * Флаги\n */\n'kso': {\n};\n\n/**\n * Переводы\n */\n'translate': {\n};\n\n/**\n * Вкладки\n */\n'tabs': Array<string>;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestListPath, 'get');\n    if (params) {\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Клиент (ID берем из запроса - customer_list)\n         */\n        'customer_id'?: number;\n        \n        /**\n         * Имя клиента\n         */\n        'customer_name'?: string;\n        \n        /**\n         * Телефон клиента\n         */\n        'customer_phone'?: string;\n        \n        /**\n         * Email клиента\n         */\n        'customer_email'?: string;\n        \n        /**\n         * Наименование клиента\n         */\n        'customer_text'?: string;\n        \n        /**\n         * Доп. инфо клиента\n         */\n        'customer_info'?: string;\n        \n        /**\n         * Вид запроса (ID берем из запроса - request_type)\n         */\n        'request_type_id'?: number;\n        \n        /**\n         * Вид перевозки (ID берем из запроса - transport_kind)\n         */\n        'transport_kind_id'?: string;\n        \n        /**\n         * Вид перевозки\n         */\n        'transport_kind_name'?: string;\n        \n        /**\n         * Тип транспорта (ID берем из запроса - transport_type)\n         */\n        'transport_type_id'?: number;\n        \n        /**\n         * Тип транспорта\n         */\n        'transport_type_name'?: string;\n        \n        /**\n         * Наименование груза\n         */\n        'cargo_description'?: string;\n        \n        /**\n         * Тип груза (ID берем из запроса - cargo_type)\n         */\n        'cargo_type_id'?: number;\n        \n        /**\n         * Тип груза\n         */\n        'cargo_type_text': string;\n        \n        /**\n         * Вид упаковки (ID берем из запроса - cargo_package)\n         */\n        'cargo_package_id'?: number;\n        \n        /**\n         * Свой вид упаковки (для id 13)\n         */\n        'cargo_package_custom'?: string;\n        \n        /**\n         * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n         */\n        'cargo_package_name'?: string;\n        \n        /**\n         * Температурный режим\n         */\n        'cargo_temperature'?: {\n        \n        /**\n         * Температурный режим - признак\n         */\n        'cargo_temperature_control'?: boolean;\n        \n        /**\n         * Температурный режим - минимальная температура\n         */\n        'cargo_temperature_min'?: number;\n        \n        /**\n         * Температурный режим - максимальная температура\n         */\n        'cargo_temperature_max'?: number;\n        };\n        \n        /**\n         * Наличие батареек, элементов питания или жидкостей\n         */\n        'cargo_danger'?: boolean;\n        \n        /**\n         * Грузовые места\n         */\n        'cargo_places'?: Array<{\n        \n        /**\n         * Номер места\n         */\n        'num'?: number;\n        \n        /**\n         * Вид упаковки (ID берем из запроса - cargo_package)\n         */\n        'cargo_package_id'?: number;\n        \n        /**\n         * Свой вид упаковки (для id 13)\n         */\n        'cargo_package_custom'?: string;\n        \n        /**\n         * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n         */\n        'cargo_package_name'?: string;\n        \n        /**\n         * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n         */\n        'stacking'?: boolean;\n        \n        /**\n         * Длина, см\n         */\n        'length'?: number;\n        \n        /**\n         * Ширина, см\n         */\n        'width'?: number;\n        \n        /**\n         * Высота, см\n         */\n        'height'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'weight'?: number;\n        \n        /**\n         * Количество\n         */\n        'count'?: number;\n        }>;\n        \n        /**\n         * Раздельные места\n         */\n        'cargo_separately'?: boolean;\n        \n        /**\n         * Итого мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Итого вес\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Итого объем\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Оплачиваемый вес\n         */\n        'cargo_places_paid_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Стоимость груза\n         */\n        'cargo_cost'?: number;\n        \n        /**\n         * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n         */\n        'cargo_currency_id'?: string;\n        \n        /**\n         * Готовность\n         */\n        'cargo_readiness'?: string;\n        \n        /**\n         * Груз\n         */\n        'cargo_text'?: string;\n        \n        /**\n         * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n         */\n        'cargo_places_stacking'?: boolean;\n        \n        /**\n         * Документы по грузу\n         */\n        'cargo_file'?: {\n        };\n        \n        /**\n         * Город отправления (ID берем из запроса - direction_city)\n         */\n        'departure_city_id'?: number;\n        \n        /**\n         * Город отправления\n         */\n        'departure_city_name'?: string;\n        \n        /**\n         * Страна отправления (ID берем из запроса - direction_country)\n         */\n        'departure_country_id'?: string;\n        \n        /**\n         * Страна отправления\n         */\n        'departure_country_name'?: string;\n        \n        /**\n         * Аэропорт вылета (ID берем из запроса - direction_point)\n         */\n        'departure_point_id'?: number;\n        \n        /**\n         * Аэропорт вылета\n         */\n        'departure_point_name'?: string;\n        \n        /**\n         * Отправление\n         */\n        'departure_text'?: string;\n        \n        /**\n         * Адрес забора груза\n         */\n        'departure_address'?: string;\n        \n        /**\n         * Город назначения (ID берем из запроса - direction_city)\n         */\n        'arrival_city_id'?: number;\n        \n        /**\n         * Город назначения\n         */\n        'arrival_city_name'?: string;\n        \n        /**\n         * Страна назначения (ID берем из запроса - direction_country)\n         */\n        'arrival_country_id'?: string;\n        \n        /**\n         * Страна назначения\n         */\n        'arrival_country_name'?: string;\n        \n        /**\n         * Аэропорт прибытия (ID берем из запроса - direction_point)\n         */\n        'arrival_point_id'?: number;\n        \n        /**\n         * Аэропорт прибытия\n         */\n        'arrival_point_name'?: string;\n        \n        /**\n         * Прибытие\n         */\n        'arrival_text'?: string;\n        \n        /**\n         * Адрес доставки груза\n         */\n        'arrival_address'?: string;\n        \n        /**\n         * Рейсы (ID берем из запроса - direction_flight)\n         */\n        'departure_flight'?: string;\n        \n        /**\n         * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n         */\n        'incoterms_id'?: number;\n        \n        /**\n         * Условия поставки по Инкотермс\n         */\n        'incoterms_name'?: string;\n        \n        /**\n         * Город/Порт (ID берем из запроса - direction_city)\n         */\n        'incoterms_city_id'?: number;\n        \n        /**\n         * Город/Порт\n         */\n        'incoterms_city_name'?: string;\n        \n        /**\n         * Ставки дали\n         */\n        'rates'?: string;\n        \n        /**\n         * Минимальная ставка Подрядчик ID\n         */\n        'rate_contractor_id'?: number;\n        \n        /**\n         * Минимальная ставка Подрядчик\n         */\n        'rate_contractor_name'?: string;\n        \n        /**\n         * Минимальная ставка Срок, дней\n         */\n        'rate_delivery_days'?: string;\n        \n        /**\n         * Минимальная ставка Сумма\n         */\n        'rate_delivery_cost'?: string;\n        \n        /**\n         * Профит сумма\n         */\n        'profit_amount'?: string;\n        \n        /**\n         * Профит процент\n         */\n        'profit_percent'?: string;\n        \n        /**\n         * Ставка клиенту\n         */\n        'bid_client'?: string;\n        \n        /**\n         * Признак начала торгов\n         */\n        'flag_bidding_start'?: boolean;\n        \n        /**\n         * Время начала торгов\n         */\n        'time_bidding_start'?: string;\n        \n        /**\n         * Время рассылки информации по торгам\n         */\n        'time_bidding_send'?: string;\n        \n        /**\n         * Услуги включаемые в ставку (ID берем из запроса - request_services)\n         */\n        'services'?: Array<string>;\n        \n        /**\n         * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n         */\n        'services_optional'?: Array<string>;\n        \n        /**\n         * Примечание по Запросу\n         */\n        'comment'?: string;\n        \n        /**\n         * Настройка рассылки запроса\n         */\n        'send_to'?: 'contractor' | 'employee';\n        \n        /**\n         * Статус Запроса (ID берем из запроса - request_status)\n         */\n        'status_id'?: number;\n        \n        /**\n         * Статус CRM (ID берем из запроса - request_status_crm)\n         */\n        'status_crm_id'?: number;\n        \n        /**\n         * Статус CRM\n         */\n        'status_crm_name'?: string;\n        \n        /**\n         * Ответственный инициатор (ID берем из запроса - company_employee_list)\n         */\n        'manager_initiator_id'?: number;\n        \n        /**\n         * Ответственный инициатор\n         */\n        'manager_initiator_name'?: string;\n        \n        /**\n         * Ответственный создатель (ID берем из запроса - company_employee_list)\n         */\n        'manager_creator_id'?: number;\n        \n        /**\n         * Ответственный создатель\n         */\n        'manager_creator_name'?: string;\n        \n        /**\n         * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n         */\n        'manager_executor_id'?: number;\n        \n        /**\n         * Ответственный исполнитель\n         */\n        'manager_executor_name'?: string;\n        \n        /**\n         * Дата создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Кол-во отправленных заявок на запрос\n         */\n        'count_rate_send'?: number;\n        \n        /**\n         * Кол-во отвеченных заявок на запрос\n         */\n        'count_rate_answer'?: number;\n        \n        /**\n         * Кол-во отправленных/отвеченных заявок на запрос\n         */\n        'count_rate_text'?: string;\n        \n        /**\n         * Флаги\n         */\n        'kso': {\n        };\n        \n        /**\n         * Переводы\n         */\n        'translate': {\n        };\n        \n        /**\n         * Вкладки\n         */\n        'tabs': Array<string>;\n        \n        /**\n         * Класс строки\n         */\n        'row_class'?: string;\n        \n        /**\n         * Класс ячейки\n         */\n        'cell_class'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Список запросов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestList(\n    params?: {\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'time_add' | 'customer_name' | 'departure_text' | 'arrival_text' | 'status_crm_name' | 'rate_contractor_name';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Имя клиента\n */\n'customer_name'?: string;\n\n/**\n * Телефон клиента\n */\n'customer_phone'?: string;\n\n/**\n * Email клиента\n */\n'customer_email'?: string;\n\n/**\n * Наименование клиента\n */\n'customer_text'?: string;\n\n/**\n * Доп. инфо клиента\n */\n'customer_info'?: string;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Вид перевозки\n */\n'transport_kind_name'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Тип транспорта\n */\n'transport_type_name'?: string;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Тип груза\n */\n'cargo_type_text': string;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Груз\n */\n'cargo_text'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Документы по грузу\n */\n'cargo_file'?: {\n};\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Отправление\n */\n'departure_text'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Прибытие\n */\n'arrival_text'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Ставки дали\n */\n'rates'?: string;\n\n/**\n * Минимальная ставка Подрядчик ID\n */\n'rate_contractor_id'?: number;\n\n/**\n * Минимальная ставка Подрядчик\n */\n'rate_contractor_name'?: string;\n\n/**\n * Минимальная ставка Срок, дней\n */\n'rate_delivery_days'?: string;\n\n/**\n * Минимальная ставка Сумма\n */\n'rate_delivery_cost'?: string;\n\n/**\n * Профит сумма\n */\n'profit_amount'?: string;\n\n/**\n * Профит процент\n */\n'profit_percent'?: string;\n\n/**\n * Ставка клиенту\n */\n'bid_client'?: string;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Время начала торгов\n */\n'time_bidding_start'?: string;\n\n/**\n * Время рассылки информации по торгам\n */\n'time_bidding_send'?: string;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n\n/**\n * Ответственный инициатор (ID берем из запроса - company_employee_list)\n */\n'manager_initiator_id'?: number;\n\n/**\n * Ответственный инициатор\n */\n'manager_initiator_name'?: string;\n\n/**\n * Ответственный создатель (ID берем из запроса - company_employee_list)\n */\n'manager_creator_id'?: number;\n\n/**\n * Ответственный создатель\n */\n'manager_creator_name'?: string;\n\n/**\n * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n */\n'manager_executor_id'?: number;\n\n/**\n * Ответственный исполнитель\n */\n'manager_executor_name'?: string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Кол-во отправленных заявок на запрос\n */\n'count_rate_send'?: number;\n\n/**\n * Кол-во отвеченных заявок на запрос\n */\n'count_rate_answer'?: number;\n\n/**\n * Кол-во отправленных/отвеченных заявок на запрос\n */\n'count_rate_text'?: string;\n\n/**\n * Флаги\n */\n'kso': {\n};\n\n/**\n * Переводы\n */\n'translate': {\n};\n\n/**\n * Вкладки\n */\n'tabs': Array<string>;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n}>;\n}> {\n    return this.requestList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Имя клиента\n */\n'customer_name'?: string;\n\n/**\n * Телефон клиента\n */\n'customer_phone'?: string;\n\n/**\n * Email клиента\n */\n'customer_email'?: string;\n\n/**\n * Наименование клиента\n */\n'customer_text'?: string;\n\n/**\n * Доп. инфо клиента\n */\n'customer_info'?: string;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Вид перевозки\n */\n'transport_kind_name'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Тип транспорта\n */\n'transport_type_name'?: string;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Тип груза\n */\n'cargo_type_text': string;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Груз\n */\n'cargo_text'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Документы по грузу\n */\n'cargo_file'?: {\n};\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Отправление\n */\n'departure_text'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Прибытие\n */\n'arrival_text'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Ставки дали\n */\n'rates'?: string;\n\n/**\n * Минимальная ставка Подрядчик ID\n */\n'rate_contractor_id'?: number;\n\n/**\n * Минимальная ставка Подрядчик\n */\n'rate_contractor_name'?: string;\n\n/**\n * Минимальная ставка Срок, дней\n */\n'rate_delivery_days'?: string;\n\n/**\n * Минимальная ставка Сумма\n */\n'rate_delivery_cost'?: string;\n\n/**\n * Профит сумма\n */\n'profit_amount'?: string;\n\n/**\n * Профит процент\n */\n'profit_percent'?: string;\n\n/**\n * Ставка клиенту\n */\n'bid_client'?: string;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Время начала торгов\n */\n'time_bidding_start'?: string;\n\n/**\n * Время рассылки информации по торгам\n */\n'time_bidding_send'?: string;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n\n/**\n * Ответственный инициатор (ID берем из запроса - company_employee_list)\n */\n'manager_initiator_id'?: number;\n\n/**\n * Ответственный инициатор\n */\n'manager_initiator_name'?: string;\n\n/**\n * Ответственный создатель (ID берем из запроса - company_employee_list)\n */\n'manager_creator_id'?: number;\n\n/**\n * Ответственный создатель\n */\n'manager_creator_name'?: string;\n\n/**\n * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n */\n'manager_executor_id'?: number;\n\n/**\n * Ответственный исполнитель\n */\n'manager_executor_name'?: string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Кол-во отправленных заявок на запрос\n */\n'count_rate_send'?: number;\n\n/**\n * Кол-во отвеченных заявок на запрос\n */\n'count_rate_answer'?: number;\n\n/**\n * Кол-во отправленных/отвеченных заявок на запрос\n */\n'count_rate_text'?: string;\n\n/**\n * Флаги\n */\n'kso': {\n};\n\n/**\n * Переводы\n */\n'translate': {\n};\n\n/**\n * Вкладки\n */\n'tabs': Array<string>;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Имя клиента\n */\n'customer_name'?: string;\n\n/**\n * Телефон клиента\n */\n'customer_phone'?: string;\n\n/**\n * Email клиента\n */\n'customer_email'?: string;\n\n/**\n * Наименование клиента\n */\n'customer_text'?: string;\n\n/**\n * Доп. инфо клиента\n */\n'customer_info'?: string;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Вид перевозки\n */\n'transport_kind_name'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Тип транспорта\n */\n'transport_type_name'?: string;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Тип груза\n */\n'cargo_type_text': string;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Груз\n */\n'cargo_text'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Документы по грузу\n */\n'cargo_file'?: {\n};\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Отправление\n */\n'departure_text'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Прибытие\n */\n'arrival_text'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Ставки дали\n */\n'rates'?: string;\n\n/**\n * Минимальная ставка Подрядчик ID\n */\n'rate_contractor_id'?: number;\n\n/**\n * Минимальная ставка Подрядчик\n */\n'rate_contractor_name'?: string;\n\n/**\n * Минимальная ставка Срок, дней\n */\n'rate_delivery_days'?: string;\n\n/**\n * Минимальная ставка Сумма\n */\n'rate_delivery_cost'?: string;\n\n/**\n * Профит сумма\n */\n'profit_amount'?: string;\n\n/**\n * Профит процент\n */\n'profit_percent'?: string;\n\n/**\n * Ставка клиенту\n */\n'bid_client'?: string;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Время начала торгов\n */\n'time_bidding_start'?: string;\n\n/**\n * Время рассылки информации по торгам\n */\n'time_bidding_send'?: string;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n\n/**\n * Ответственный инициатор (ID берем из запроса - company_employee_list)\n */\n'manager_initiator_id'?: number;\n\n/**\n * Ответственный инициатор\n */\n'manager_initiator_name'?: string;\n\n/**\n * Ответственный создатель (ID берем из запроса - company_employee_list)\n */\n'manager_creator_id'?: number;\n\n/**\n * Ответственный создатель\n */\n'manager_creator_name'?: string;\n\n/**\n * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n */\n'manager_executor_id'?: number;\n\n/**\n * Ответственный исполнитель\n */\n'manager_executor_name'?: string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Кол-во отправленных заявок на запрос\n */\n'count_rate_send'?: number;\n\n/**\n * Кол-во отвеченных заявок на запрос\n */\n'count_rate_answer'?: number;\n\n/**\n * Кол-во отправленных/отвеченных заявок на запрос\n */\n'count_rate_text'?: string;\n\n/**\n * Флаги\n */\n'kso': {\n};\n\n/**\n * Переводы\n */\n'translate': {\n};\n\n/**\n * Вкладки\n */\n'tabs': Array<string>;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestListParam()` */\n  static readonly RequestListParamPath = '/request_list_param';\n\n  /**\n   * Параметры вывода запросов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestListParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestListParam$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestListParamPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Параметры поиска\n         */\n        'search'?: Array<{\n        \n        /**\n         * Поиск в заголовке\n         */\n        'header'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск основной\n         */\n        'main'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск расширенный\n         */\n        'additional'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        }>;\n        \n        /**\n         * Параметры таблицы\n         */\n        'table'?: Array<{\n        \n        /**\n         * Блок колонок\n         */\n        'column'?: string;\n        \n        /**\n         * Данные колонок\n         */\n        'items'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Заголовок поля\n         */\n        'title'?: string;\n        \n        /**\n         * Ширина поля\n         */\n        'width'?: number;\n        }>;\n        }>;\n        \n        /**\n         * Параметры сортировки\n         */\n        'order'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Сортировка по умолчанию\n         */\n        'dir'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры вывода запросов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestListParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestListParam(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}> {\n    return this.requestListParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>): {\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestInfo()` */\n  static readonly RequestInfoPath = '/request_info';\n\n  /**\n   * Данные запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestInfo$Response(\n    params: {\n\n    /**\n     * ID запроса\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Имя клиента\n */\n'customer_name'?: string;\n\n/**\n * Телефон клиента\n */\n'customer_phone'?: string;\n\n/**\n * Email клиента\n */\n'customer_email'?: string;\n\n/**\n * Наименование клиента\n */\n'customer_text'?: string;\n\n/**\n * Доп. инфо клиента\n */\n'customer_info'?: string;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Вид перевозки\n */\n'transport_kind_name'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Тип транспорта\n */\n'transport_type_name'?: string;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Тип груза\n */\n'cargo_type_text': string;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Груз\n */\n'cargo_text'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Паспорта безопасности (файлы)\n */\n'cargo_file'?: {\n};\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Отправление\n */\n'departure_text'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Прибытие\n */\n'arrival_text'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Ставки дали\n */\n'rates'?: string;\n\n/**\n * Минимальная ставка Подрядчик ID\n */\n'rate_contractor_id'?: number;\n\n/**\n * Минимальная ставка Подрядчик\n */\n'rate_contractor_name'?: string;\n\n/**\n * Минимальная ставка Срок, дней\n */\n'rate_delivery_days'?: string;\n\n/**\n * Минимальная ставка Сумма\n */\n'rate_delivery_cost'?: string;\n\n/**\n * Профит сумма\n */\n'profit_amount'?: string;\n\n/**\n * Профит процент\n */\n'profit_percent'?: string;\n\n/**\n * Ставка клиенту\n */\n'bid_client'?: string;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Время начала торгов\n */\n'time_bidding_start'?: string;\n\n/**\n * Время рассылки информации по торгам\n */\n'time_bidding_send'?: string;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n\n/**\n * Ответственный инициатор (ID берем из запроса - company_employee_list)\n */\n'manager_initiator_id'?: number;\n\n/**\n * Ответственный инициатор\n */\n'manager_initiator_name'?: string;\n\n/**\n * Ответственный создатель (ID берем из запроса - company_employee_list)\n */\n'manager_creator_id'?: number;\n\n/**\n * Ответственный создатель\n */\n'manager_creator_name'?: string;\n\n/**\n * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n */\n'manager_executor_id'?: number;\n\n/**\n * Ответственный исполнитель\n */\n'manager_executor_name'?: string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Кол-во отправленных заявок на запрос\n */\n'count_rate_send'?: number;\n\n/**\n * Кол-во отвеченных заявок на запрос\n */\n'count_rate_answer'?: number;\n\n/**\n * Кол-во отправленных/отвеченных заявок на запрос\n */\n'count_rate_text'?: string;\n\n/**\n * Флаги\n */\n'kso': {\n};\n\n/**\n * Переводы\n */\n'translate': {\n};\n\n/**\n * Вкладки\n */\n'tabs': Array<string>;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Клиент (ID берем из запроса - customer_list)\n         */\n        'customer_id'?: number;\n        \n        /**\n         * Имя клиента\n         */\n        'customer_name'?: string;\n        \n        /**\n         * Телефон клиента\n         */\n        'customer_phone'?: string;\n        \n        /**\n         * Email клиента\n         */\n        'customer_email'?: string;\n        \n        /**\n         * Наименование клиента\n         */\n        'customer_text'?: string;\n        \n        /**\n         * Доп. инфо клиента\n         */\n        'customer_info'?: string;\n        \n        /**\n         * Вид запроса (ID берем из запроса - request_type)\n         */\n        'request_type_id'?: number;\n        \n        /**\n         * Вид перевозки (ID берем из запроса - transport_kind)\n         */\n        'transport_kind_id'?: string;\n        \n        /**\n         * Вид перевозки\n         */\n        'transport_kind_name'?: string;\n        \n        /**\n         * Тип транспорта (ID берем из запроса - transport_type)\n         */\n        'transport_type_id'?: number;\n        \n        /**\n         * Тип транспорта\n         */\n        'transport_type_name'?: string;\n        \n        /**\n         * Наименование груза\n         */\n        'cargo_description'?: string;\n        \n        /**\n         * Тип груза (ID берем из запроса - cargo_type)\n         */\n        'cargo_type_id'?: number;\n        \n        /**\n         * Тип груза\n         */\n        'cargo_type_text': string;\n        \n        /**\n         * Вид упаковки (ID берем из запроса - cargo_package)\n         */\n        'cargo_package_id'?: number;\n        \n        /**\n         * Свой вид упаковки (для id 13)\n         */\n        'cargo_package_custom'?: string;\n        \n        /**\n         * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n         */\n        'cargo_package_name'?: string;\n        \n        /**\n         * Температурный режим\n         */\n        'cargo_temperature'?: {\n        \n        /**\n         * Температурный режим - признак\n         */\n        'cargo_temperature_control'?: boolean;\n        \n        /**\n         * Температурный режим - минимальная температура\n         */\n        'cargo_temperature_min'?: number;\n        \n        /**\n         * Температурный режим - максимальная температура\n         */\n        'cargo_temperature_max'?: number;\n        };\n        \n        /**\n         * Наличие батареек, элементов питания или жидкостей\n         */\n        'cargo_danger'?: boolean;\n        \n        /**\n         * Грузовые места\n         */\n        'cargo_places'?: Array<{\n        \n        /**\n         * Номер места\n         */\n        'num'?: number;\n        \n        /**\n         * Вид упаковки (ID берем из запроса - cargo_package)\n         */\n        'cargo_package_id'?: number;\n        \n        /**\n         * Свой вид упаковки (для id 13)\n         */\n        'cargo_package_custom'?: string;\n        \n        /**\n         * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n         */\n        'cargo_package_name'?: string;\n        \n        /**\n         * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n         */\n        'stacking'?: boolean;\n        \n        /**\n         * Длина, см\n         */\n        'length'?: number;\n        \n        /**\n         * Ширина, см\n         */\n        'width'?: number;\n        \n        /**\n         * Высота, см\n         */\n        'height'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'weight'?: number;\n        \n        /**\n         * Количество\n         */\n        'count'?: number;\n        }>;\n        \n        /**\n         * Раздельные места\n         */\n        'cargo_separately'?: boolean;\n        \n        /**\n         * Итого мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Итого вес\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Итого объем\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Оплачиваемый вес\n         */\n        'cargo_places_paid_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Стоимость груза\n         */\n        'cargo_cost'?: number;\n        \n        /**\n         * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n         */\n        'cargo_currency_id'?: string;\n        \n        /**\n         * Готовность\n         */\n        'cargo_readiness'?: string;\n        \n        /**\n         * Груз\n         */\n        'cargo_text'?: string;\n        \n        /**\n         * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n         */\n        'cargo_places_stacking'?: boolean;\n        \n        /**\n         * Паспорта безопасности (файлы)\n         */\n        'cargo_file'?: {\n        };\n        \n        /**\n         * Город отправления (ID берем из запроса - direction_city)\n         */\n        'departure_city_id'?: number;\n        \n        /**\n         * Город отправления\n         */\n        'departure_city_name'?: string;\n        \n        /**\n         * Страна отправления (ID берем из запроса - direction_country)\n         */\n        'departure_country_id'?: string;\n        \n        /**\n         * Страна отправления\n         */\n        'departure_country_name'?: string;\n        \n        /**\n         * Аэропорт вылета (ID берем из запроса - direction_point)\n         */\n        'departure_point_id'?: number;\n        \n        /**\n         * Аэропорт вылета\n         */\n        'departure_point_name'?: string;\n        \n        /**\n         * Отправление\n         */\n        'departure_text'?: string;\n        \n        /**\n         * Адрес забора груза\n         */\n        'departure_address'?: string;\n        \n        /**\n         * Город назначения (ID берем из запроса - direction_city)\n         */\n        'arrival_city_id'?: number;\n        \n        /**\n         * Город назначения\n         */\n        'arrival_city_name'?: string;\n        \n        /**\n         * Страна назначения (ID берем из запроса - direction_country)\n         */\n        'arrival_country_id'?: string;\n        \n        /**\n         * Страна назначения\n         */\n        'arrival_country_name'?: string;\n        \n        /**\n         * Аэропорт прибытия (ID берем из запроса - direction_point)\n         */\n        'arrival_point_id'?: number;\n        \n        /**\n         * Аэропорт прибытия\n         */\n        'arrival_point_name'?: string;\n        \n        /**\n         * Прибытие\n         */\n        'arrival_text'?: string;\n        \n        /**\n         * Адрес доставки груза\n         */\n        'arrival_address'?: string;\n        \n        /**\n         * Рейсы (ID берем из запроса - direction_flight)\n         */\n        'departure_flight'?: string;\n        \n        /**\n         * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n         */\n        'incoterms_id'?: number;\n        \n        /**\n         * Условия поставки по Инкотермс\n         */\n        'incoterms_name'?: string;\n        \n        /**\n         * Город/Порт (ID берем из запроса - direction_city)\n         */\n        'incoterms_city_id'?: number;\n        \n        /**\n         * Город/Порт\n         */\n        'incoterms_city_name'?: string;\n        \n        /**\n         * Ставки дали\n         */\n        'rates'?: string;\n        \n        /**\n         * Минимальная ставка Подрядчик ID\n         */\n        'rate_contractor_id'?: number;\n        \n        /**\n         * Минимальная ставка Подрядчик\n         */\n        'rate_contractor_name'?: string;\n        \n        /**\n         * Минимальная ставка Срок, дней\n         */\n        'rate_delivery_days'?: string;\n        \n        /**\n         * Минимальная ставка Сумма\n         */\n        'rate_delivery_cost'?: string;\n        \n        /**\n         * Профит сумма\n         */\n        'profit_amount'?: string;\n        \n        /**\n         * Профит процент\n         */\n        'profit_percent'?: string;\n        \n        /**\n         * Ставка клиенту\n         */\n        'bid_client'?: string;\n        \n        /**\n         * Признак начала торгов\n         */\n        'flag_bidding_start'?: boolean;\n        \n        /**\n         * Время начала торгов\n         */\n        'time_bidding_start'?: string;\n        \n        /**\n         * Время рассылки информации по торгам\n         */\n        'time_bidding_send'?: string;\n        \n        /**\n         * Услуги включаемые в ставку (ID берем из запроса - request_services)\n         */\n        'services'?: Array<string>;\n        \n        /**\n         * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n         */\n        'services_optional'?: Array<string>;\n        \n        /**\n         * Примечание по Запросу\n         */\n        'comment'?: string;\n        \n        /**\n         * Настройка рассылки запроса\n         */\n        'send_to'?: 'contractor' | 'employee';\n        \n        /**\n         * Статус Запроса (ID берем из запроса - request_status)\n         */\n        'status_id'?: number;\n        \n        /**\n         * Статус CRM (ID берем из запроса - request_status_crm)\n         */\n        'status_crm_id'?: number;\n        \n        /**\n         * Статус CRM\n         */\n        'status_crm_name'?: string;\n        \n        /**\n         * Ответственный инициатор (ID берем из запроса - company_employee_list)\n         */\n        'manager_initiator_id'?: number;\n        \n        /**\n         * Ответственный инициатор\n         */\n        'manager_initiator_name'?: string;\n        \n        /**\n         * Ответственный создатель (ID берем из запроса - company_employee_list)\n         */\n        'manager_creator_id'?: number;\n        \n        /**\n         * Ответственный создатель\n         */\n        'manager_creator_name'?: string;\n        \n        /**\n         * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n         */\n        'manager_executor_id'?: number;\n        \n        /**\n         * Ответственный исполнитель\n         */\n        'manager_executor_name'?: string;\n        \n        /**\n         * Дата создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Кол-во отправленных заявок на запрос\n         */\n        'count_rate_send'?: number;\n        \n        /**\n         * Кол-во отвеченных заявок на запрос\n         */\n        'count_rate_answer'?: number;\n        \n        /**\n         * Кол-во отправленных/отвеченных заявок на запрос\n         */\n        'count_rate_text'?: string;\n        \n        /**\n         * Флаги\n         */\n        'kso': {\n        };\n        \n        /**\n         * Переводы\n         */\n        'translate': {\n        };\n        \n        /**\n         * Вкладки\n         */\n        'tabs': Array<string>;\n        \n        /**\n         * Класс строки\n         */\n        'row_class'?: string;\n        \n        /**\n         * Класс ячейки\n         */\n        'cell_class'?: string;\n        \n        /**\n         * Документы (файлы)\n         */\n        'documents_file'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Данные запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestInfo(\n    params: {\n\n    /**\n     * ID запроса\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Имя клиента\n */\n'customer_name'?: string;\n\n/**\n * Телефон клиента\n */\n'customer_phone'?: string;\n\n/**\n * Email клиента\n */\n'customer_email'?: string;\n\n/**\n * Наименование клиента\n */\n'customer_text'?: string;\n\n/**\n * Доп. инфо клиента\n */\n'customer_info'?: string;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Вид перевозки\n */\n'transport_kind_name'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Тип транспорта\n */\n'transport_type_name'?: string;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Тип груза\n */\n'cargo_type_text': string;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Груз\n */\n'cargo_text'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Паспорта безопасности (файлы)\n */\n'cargo_file'?: {\n};\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Отправление\n */\n'departure_text'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Прибытие\n */\n'arrival_text'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Ставки дали\n */\n'rates'?: string;\n\n/**\n * Минимальная ставка Подрядчик ID\n */\n'rate_contractor_id'?: number;\n\n/**\n * Минимальная ставка Подрядчик\n */\n'rate_contractor_name'?: string;\n\n/**\n * Минимальная ставка Срок, дней\n */\n'rate_delivery_days'?: string;\n\n/**\n * Минимальная ставка Сумма\n */\n'rate_delivery_cost'?: string;\n\n/**\n * Профит сумма\n */\n'profit_amount'?: string;\n\n/**\n * Профит процент\n */\n'profit_percent'?: string;\n\n/**\n * Ставка клиенту\n */\n'bid_client'?: string;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Время начала торгов\n */\n'time_bidding_start'?: string;\n\n/**\n * Время рассылки информации по торгам\n */\n'time_bidding_send'?: string;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n\n/**\n * Ответственный инициатор (ID берем из запроса - company_employee_list)\n */\n'manager_initiator_id'?: number;\n\n/**\n * Ответственный инициатор\n */\n'manager_initiator_name'?: string;\n\n/**\n * Ответственный создатель (ID берем из запроса - company_employee_list)\n */\n'manager_creator_id'?: number;\n\n/**\n * Ответственный создатель\n */\n'manager_creator_name'?: string;\n\n/**\n * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n */\n'manager_executor_id'?: number;\n\n/**\n * Ответственный исполнитель\n */\n'manager_executor_name'?: string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Кол-во отправленных заявок на запрос\n */\n'count_rate_send'?: number;\n\n/**\n * Кол-во отвеченных заявок на запрос\n */\n'count_rate_answer'?: number;\n\n/**\n * Кол-во отправленных/отвеченных заявок на запрос\n */\n'count_rate_text'?: string;\n\n/**\n * Флаги\n */\n'kso': {\n};\n\n/**\n * Переводы\n */\n'translate': {\n};\n\n/**\n * Вкладки\n */\n'tabs': Array<string>;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n}> {\n    return this.requestInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Имя клиента\n */\n'customer_name'?: string;\n\n/**\n * Телефон клиента\n */\n'customer_phone'?: string;\n\n/**\n * Email клиента\n */\n'customer_email'?: string;\n\n/**\n * Наименование клиента\n */\n'customer_text'?: string;\n\n/**\n * Доп. инфо клиента\n */\n'customer_info'?: string;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Вид перевозки\n */\n'transport_kind_name'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Тип транспорта\n */\n'transport_type_name'?: string;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Тип груза\n */\n'cargo_type_text': string;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Груз\n */\n'cargo_text'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Паспорта безопасности (файлы)\n */\n'cargo_file'?: {\n};\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Отправление\n */\n'departure_text'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Прибытие\n */\n'arrival_text'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Ставки дали\n */\n'rates'?: string;\n\n/**\n * Минимальная ставка Подрядчик ID\n */\n'rate_contractor_id'?: number;\n\n/**\n * Минимальная ставка Подрядчик\n */\n'rate_contractor_name'?: string;\n\n/**\n * Минимальная ставка Срок, дней\n */\n'rate_delivery_days'?: string;\n\n/**\n * Минимальная ставка Сумма\n */\n'rate_delivery_cost'?: string;\n\n/**\n * Профит сумма\n */\n'profit_amount'?: string;\n\n/**\n * Профит процент\n */\n'profit_percent'?: string;\n\n/**\n * Ставка клиенту\n */\n'bid_client'?: string;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Время начала торгов\n */\n'time_bidding_start'?: string;\n\n/**\n * Время рассылки информации по торгам\n */\n'time_bidding_send'?: string;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n\n/**\n * Ответственный инициатор (ID берем из запроса - company_employee_list)\n */\n'manager_initiator_id'?: number;\n\n/**\n * Ответственный инициатор\n */\n'manager_initiator_name'?: string;\n\n/**\n * Ответственный создатель (ID берем из запроса - company_employee_list)\n */\n'manager_creator_id'?: number;\n\n/**\n * Ответственный создатель\n */\n'manager_creator_name'?: string;\n\n/**\n * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n */\n'manager_executor_id'?: number;\n\n/**\n * Ответственный исполнитель\n */\n'manager_executor_name'?: string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Кол-во отправленных заявок на запрос\n */\n'count_rate_send'?: number;\n\n/**\n * Кол-во отвеченных заявок на запрос\n */\n'count_rate_answer'?: number;\n\n/**\n * Кол-во отправленных/отвеченных заявок на запрос\n */\n'count_rate_text'?: string;\n\n/**\n * Флаги\n */\n'kso': {\n};\n\n/**\n * Переводы\n */\n'translate': {\n};\n\n/**\n * Вкладки\n */\n'tabs': Array<string>;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Имя клиента\n */\n'customer_name'?: string;\n\n/**\n * Телефон клиента\n */\n'customer_phone'?: string;\n\n/**\n * Email клиента\n */\n'customer_email'?: string;\n\n/**\n * Наименование клиента\n */\n'customer_text'?: string;\n\n/**\n * Доп. инфо клиента\n */\n'customer_info'?: string;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Вид перевозки\n */\n'transport_kind_name'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Тип транспорта\n */\n'transport_type_name'?: string;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Тип груза\n */\n'cargo_type_text': string;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Вид упаковки (Наименование) (ID берем из запроса - cargo_package)\n */\n'cargo_package_name'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Груз\n */\n'cargo_text'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Паспорта безопасности (файлы)\n */\n'cargo_file'?: {\n};\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Отправление\n */\n'departure_text'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Прибытие\n */\n'arrival_text'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Ставки дали\n */\n'rates'?: string;\n\n/**\n * Минимальная ставка Подрядчик ID\n */\n'rate_contractor_id'?: number;\n\n/**\n * Минимальная ставка Подрядчик\n */\n'rate_contractor_name'?: string;\n\n/**\n * Минимальная ставка Срок, дней\n */\n'rate_delivery_days'?: string;\n\n/**\n * Минимальная ставка Сумма\n */\n'rate_delivery_cost'?: string;\n\n/**\n * Профит сумма\n */\n'profit_amount'?: string;\n\n/**\n * Профит процент\n */\n'profit_percent'?: string;\n\n/**\n * Ставка клиенту\n */\n'bid_client'?: string;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Время начала торгов\n */\n'time_bidding_start'?: string;\n\n/**\n * Время рассылки информации по торгам\n */\n'time_bidding_send'?: string;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n\n/**\n * Ответственный инициатор (ID берем из запроса - company_employee_list)\n */\n'manager_initiator_id'?: number;\n\n/**\n * Ответственный инициатор\n */\n'manager_initiator_name'?: string;\n\n/**\n * Ответственный создатель (ID берем из запроса - company_employee_list)\n */\n'manager_creator_id'?: number;\n\n/**\n * Ответственный создатель\n */\n'manager_creator_name'?: string;\n\n/**\n * Ответственный исполнитель (ID берем из запроса - company_employee_list)\n */\n'manager_executor_id'?: number;\n\n/**\n * Ответственный исполнитель\n */\n'manager_executor_name'?: string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Кол-во отправленных заявок на запрос\n */\n'count_rate_send'?: number;\n\n/**\n * Кол-во отвеченных заявок на запрос\n */\n'count_rate_answer'?: number;\n\n/**\n * Кол-во отправленных/отвеченных заявок на запрос\n */\n'count_rate_text'?: string;\n\n/**\n * Флаги\n */\n'kso': {\n};\n\n/**\n * Переводы\n */\n'translate': {\n};\n\n/**\n * Вкладки\n */\n'tabs': Array<string>;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestCreate()` */\n  static readonly RequestCreatePath = '/request_create';\n\n  /**\n   * Запросы: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id': number;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id': number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id': string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id': number;\n\n/**\n * Наименование груза\n */\n'cargo_description': string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id': number;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id': string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id': number;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id': string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Запросы: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestCreate(\n    params?: {\n      body?: {\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id': number;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id': number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id': string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id': number;\n\n/**\n * Наименование груза\n */\n'cargo_description': string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id': number;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id': string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id': number;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id': string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestUpdate()` */\n  static readonly RequestUpdatePath = '/request_update';\n\n  /**\n   * Запросы: обновление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Запросы: обновление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Клиент (ID берем из запроса - customer_list)\n */\n'customer_id'?: number;\n\n/**\n * Вид запроса (ID берем из запроса - request_type)\n */\n'request_type_id'?: number;\n\n/**\n * Вид перевозки (ID берем из запроса - transport_kind)\n */\n'transport_kind_id'?: string;\n\n/**\n * Тип транспорта (ID берем из запроса - transport_type)\n */\n'transport_type_id'?: number;\n\n/**\n * Наименование груза\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза (ID берем из запроса - cargo_type)\n */\n'cargo_type_id'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Температурный режим\n */\n'cargo_temperature'?: {\n\n/**\n * Температурный режим - признак\n */\n'cargo_temperature_control'?: boolean;\n\n/**\n * Температурный режим - минимальная температура\n */\n'cargo_temperature_min'?: number;\n\n/**\n * Температурный режим - максимальная температура\n */\n'cargo_temperature_max'?: number;\n};\n\n/**\n * Наличие батареек, элементов питания или жидкостей\n */\n'cargo_danger'?: boolean;\n\n/**\n * Грузовые места\n */\n'cargo_places'?: Array<{\n\n/**\n * Номер места\n */\n'num'?: number;\n\n/**\n * Вид упаковки (ID берем из запроса - cargo_package)\n */\n'cargo_package_id'?: number;\n\n/**\n * Свой вид упаковки (для id 13)\n */\n'cargo_package_custom'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'stacking'?: boolean;\n\n/**\n * Длина, см\n */\n'length'?: number;\n\n/**\n * Ширина, см\n */\n'width'?: number;\n\n/**\n * Высота, см\n */\n'height'?: number;\n\n/**\n * Вес, кг\n */\n'weight'?: number;\n\n/**\n * Количество\n */\n'count'?: number;\n}>;\n\n/**\n * Раздельные места\n */\n'cargo_separately'?: boolean;\n\n/**\n * Итого мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Итого вес\n */\n'cargo_places_weight'?: number;\n\n/**\n * Итого объем\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Стоимость груза\n */\n'cargo_cost'?: number;\n\n/**\n * Валюта стоимости груза (ID берем из запроса - settings_get из поля currency)\n */\n'cargo_currency_id'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Признак возможности штабелировать груз (ID берем из запроса - cargo_package)\n */\n'cargo_places_stacking'?: boolean;\n\n/**\n * Город отправления (ID берем из запроса - direction_city)\n */\n'departure_city_id'?: number;\n\n/**\n * Страна отправления (ID берем из запроса - direction_country)\n */\n'departure_country_id'?: string;\n\n/**\n * Аэропорт вылета (ID берем из запроса - direction_point)\n */\n'departure_point_id'?: number;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Город назначения (ID берем из запроса - direction_city)\n */\n'arrival_city_id'?: number;\n\n/**\n * Страна назначения (ID берем из запроса - direction_country)\n */\n'arrival_country_id'?: string;\n\n/**\n * Аэропорт прибытия (ID берем из запроса - direction_point)\n */\n'arrival_point_id'?: number;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Рейсы (ID берем из запроса - direction_flight)\n */\n'departure_flight'?: string;\n\n/**\n * Условия поставки по Инкотермс (ID берем из запроса - request_incoterms)\n */\n'incoterms_id'?: number;\n\n/**\n * Город/Порт (ID берем из запроса - direction_city)\n */\n'incoterms_city_id'?: number;\n\n/**\n * Признак начала торгов\n */\n'flag_bidding_start'?: boolean;\n\n/**\n * Услуги включаемые в ставку (ID берем из запроса - request_services)\n */\n'services'?: Array<string>;\n\n/**\n * Дополнительные услуги включаемые в ставку (ID берем из запроса - request_services_additional)\n */\n'services_optional'?: Array<string>;\n\n/**\n * Примечание по Запросу\n */\n'comment'?: string;\n\n/**\n * Настройка рассылки запроса\n */\n'send_to'?: 'contractor' | 'employee';\n\n/**\n * Статус Запроса (ID берем из запроса - request_status)\n */\n'status_id'?: number;\n\n/**\n * Статус CRM (ID берем из запроса - request_status_crm)\n */\n'status_crm_id'?: number;\n\n/**\n * Статус CRM\n */\n'status_crm_name'?: string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestDelete()` */\n  static readonly RequestDeletePath = '/request_delete';\n\n  /**\n   * Удаление запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого запроса\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемого запроса\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestFiles()` */\n  static readonly RequestFilesPath = '/request_files';\n\n  /**\n   * Список файлов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestFiles()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestFiles$Response(\n    params: {\n\n    /**\n     * ID элемента\n     */\n      item_id: number;\n\n    /**\n     * Переменная формы\n     */\n      var?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestFilesPath, 'get');\n    if (params) {\n      rb.query('item_id', params.item_id, {});\n      rb.query('var', params.var, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ID элемента\n         */\n        'item_id': number;\n        \n        /**\n         * Переменная формы\n         */\n        'var': string;\n        \n        /**\n         * Ссылка на файл\n         */\n        'path'?: string;\n        \n        /**\n         * Информация по файлу\n         */\n        'file_info'?: Array<string>;\n        \n        /**\n         * Время загрузки файла\n         */\n        'file_time'?: string;\n        \n        /**\n         * Наименование файла\n         */\n        'file_name'?: string;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Время изменения\n         */\n        'time_edit'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Список файлов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestFiles$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestFiles(\n    params: {\n\n    /**\n     * ID элемента\n     */\n      item_id: number;\n\n    /**\n     * Переменная формы\n     */\n      var?: string;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>> {\n    return this.requestFiles$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Ссылка на файл\n */\n'path'?: string;\n\n/**\n * Информация по файлу\n */\n'file_info'?: Array<string>;\n\n/**\n * Время загрузки файла\n */\n'file_time'?: string;\n\n/**\n * Наименование файла\n */\n'file_name'?: string;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n\n/**\n * Время изменения\n */\n'time_edit'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `requestFileCreate()` */\n  static readonly RequestFileCreatePath = '/request_file_create';\n\n  /**\n   * Файлы: добавление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestFileCreate()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  requestFileCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Файл\n */\n'file': file;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestFileCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'multipart/form-data');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID созданной записи\n         */\n        'id': number;\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файлы: добавление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestFileCreate$Response()` instead.\n   *\n   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.\n   */\n  requestFileCreate(\n    params?: {\n      body?: {\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n\n/**\n * Файл\n */\n'file': file;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestFileCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * ID созданной записи\n */\n'id': number;\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestFileDelete()` */\n  static readonly RequestFileDeletePath = '/request_file_delete';\n\n  /**\n   * Файлы: удаление.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestFileDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestFileDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой записи\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestFileDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Файлы: удаление.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestFileDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestFileDelete(\n    params?: {\n      body?: {\n\n/**\n * ID удаляемой записи\n */\n'id': number;\n\n/**\n * ID элемента\n */\n'item_id': number;\n\n/**\n * Переменная формы\n */\n'var': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestFileDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestContractorSelectGet()` */\n  static readonly RequestContractorSelectGetPath = '/request_contractor_select_get';\n\n  /**\n   * Получение ID контрагентов выбранных для отправки запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestContractorSelectGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestContractorSelectGet$Response(\n    params: {\n\n    /**\n     * ID запроса\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID Контрагента\n */\n'contractor_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestContractorSelectGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID Контрагента\n         */\n        'contractor_id'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Получение ID контрагентов выбранных для отправки запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestContractorSelectGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestContractorSelectGet(\n    params: {\n\n    /**\n     * ID запроса\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID Контрагента\n */\n'contractor_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n}> {\n    return this.requestContractorSelectGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID Контрагента\n */\n'contractor_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n}>): {\n\n/**\n * ID Контрагента\n */\n'contractor_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestContractorSelectUpdate()` */\n  static readonly RequestContractorSelectUpdatePath = '/request_contractor_select_update';\n\n  /**\n   * Обновление выбора контрагента для отправки запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestContractorSelectUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestContractorSelectUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID запроса\n */\n'id': number;\n\n/**\n * ID Контрагента\n */\n'contractor_id'?: Array<number>;\n\n/**\n * Признак выделения\n */\n'checked'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestContractorSelectUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Обновление выбора контрагента для отправки запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestContractorSelectUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestContractorSelectUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID запроса\n */\n'id': number;\n\n/**\n * ID Контрагента\n */\n'contractor_id'?: Array<number>;\n\n/**\n * Признак выделения\n */\n'checked'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestContractorSelectUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestSaveBidding()` */\n  static readonly RequestSaveBiddingPath = '/request_save_bidding';\n\n  /**\n   * Проверка и сохранение выбора контрагентов для отправки запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestSaveBidding()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestSaveBidding$Response(\n    params?: {\n      body?: {\n\n/**\n * ID запроса\n */\n'id': number;\n\n/**\n * Подтверждение (игнорировать ошибки)\n */\n'confirm'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestSaveBiddingPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Проверка и сохранение выбора контрагентов для отправки запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestSaveBidding$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestSaveBidding(\n    params?: {\n      body?: {\n\n/**\n * ID запроса\n */\n'id': number;\n\n/**\n * Подтверждение (игнорировать ошибки)\n */\n'confirm'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestSaveBidding$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestEmployeeSelectGet()` */\n  static readonly RequestEmployeeSelectGetPath = '/request_employee_select_get';\n\n  /**\n   * Получение ID сотрудников выбранных для отправки запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestEmployeeSelectGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestEmployeeSelectGet$Response(\n    params: {\n\n    /**\n     * ID запроса\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID Сотрудника\n */\n'employee_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestEmployeeSelectGetPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID Сотрудника\n         */\n        'employee_id'?: number;\n        \n        /**\n         * Время создания\n         */\n        'time_add'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Получение ID сотрудников выбранных для отправки запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestEmployeeSelectGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestEmployeeSelectGet(\n    params: {\n\n    /**\n     * ID запроса\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID Сотрудника\n */\n'employee_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n}> {\n    return this.requestEmployeeSelectGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID Сотрудника\n */\n'employee_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n}>): {\n\n/**\n * ID Сотрудника\n */\n'employee_id'?: number;\n\n/**\n * Время создания\n */\n'time_add'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestEmployeeSelectUpdate()` */\n  static readonly RequestEmployeeSelectUpdatePath = '/request_employee_select_update';\n\n  /**\n   * Обновление выбора сотрудников для отправки запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestEmployeeSelectUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestEmployeeSelectUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * ID запроса\n */\n'id': number;\n\n/**\n * ID Сотрудников\n */\n'employee_id'?: Array<number>;\n\n/**\n * Признак выделения\n */\n'checked'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestEmployeeSelectUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Обновление выбора сотрудников для отправки запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestEmployeeSelectUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestEmployeeSelectUpdate(\n    params?: {\n      body?: {\n\n/**\n * ID запроса\n */\n'id': number;\n\n/**\n * ID Сотрудников\n */\n'employee_id'?: Array<number>;\n\n/**\n * Признак выделения\n */\n'checked'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestEmployeeSelectUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestSaveEmployeeBidding()` */\n  static readonly RequestSaveEmployeeBiddingPath = '/request_save_employee_bidding';\n\n  /**\n   * Проверка и сохранение выбора контрагентов для отправки запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestSaveEmployeeBidding()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestSaveEmployeeBidding$Response(\n    params?: {\n      body?: {\n\n/**\n * ID запроса\n */\n'id': number;\n\n/**\n * Подтверждение (игнорировать ошибки)\n */\n'confirm'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestSaveEmployeeBiddingPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Проверка и сохранение выбора контрагентов для отправки запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestSaveEmployeeBidding$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestSaveEmployeeBidding(\n    params?: {\n      body?: {\n\n/**\n * ID запроса\n */\n'id': number;\n\n/**\n * Подтверждение (игнорировать ошибки)\n */\n'confirm'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestSaveEmployeeBidding$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestStatus()` */\n  static readonly RequestStatusPath = '/request_status';\n\n  /**\n   * Статусы запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestStatus$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Тип\n */\n'type'?: string;\n\n/**\n * Цвет\n */\n'color_name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestStatusPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Тип\n         */\n        'type'?: string;\n        \n        /**\n         * Цвет\n         */\n        'color_name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Статусы запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestStatus(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Тип\n */\n'type'?: string;\n\n/**\n * Цвет\n */\n'color_name'?: string;\n}>> {\n    return this.requestStatus$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Тип\n */\n'type'?: string;\n\n/**\n * Цвет\n */\n'color_name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Тип\n */\n'type'?: string;\n\n/**\n * Цвет\n */\n'color_name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `requestStatusCrm()` */\n  static readonly RequestStatusCrmPath = '/request_status_crm';\n\n  /**\n   * Статусы CRM.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestStatusCrm()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestStatusCrm$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Тип\n */\n'type'?: string;\n\n/**\n * Цвет\n */\n'color_name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestStatusCrmPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Тип\n         */\n        'type'?: string;\n        \n        /**\n         * Цвет\n         */\n        'color_name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Статусы CRM.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestStatusCrm$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestStatusCrm(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Тип\n */\n'type'?: string;\n\n/**\n * Цвет\n */\n'color_name'?: string;\n}>> {\n    return this.requestStatusCrm$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Тип\n */\n'type'?: string;\n\n/**\n * Цвет\n */\n'color_name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Тип\n */\n'type'?: string;\n\n/**\n * Цвет\n */\n'color_name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `requestType()` */\n  static readonly RequestTypePath = '/request_type';\n\n  /**\n   * Вид запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestType()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestType$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestTypePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Ключ\n         */\n        'key'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Вид запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestType$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestType(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.requestType$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `requestServices()` */\n  static readonly RequestServicesPath = '/request_services';\n\n  /**\n   * Услуги включаемые в ставку.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestServices()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestServices$Response(\n    params: {\n\n    /**\n     * Вид перевозки (ID берем из запроса - transport_kind)\n     */\n      kind_id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestServicesPath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Услуги включаемые в ставку.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestServices$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestServices(\n    params: {\n\n    /**\n     * Вид перевозки (ID берем из запроса - transport_kind)\n     */\n      kind_id: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.requestServices$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `requestServicesAdditional()` */\n  static readonly RequestServicesAdditionalPath = '/request_services_additional';\n\n  /**\n   * Дополнительные услуги включаемые в ставку.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestServicesAdditional()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestServicesAdditional$Response(\n    params: {\n\n    /**\n     * Вид перевозки (ID берем из запроса - transport_kind)\n     */\n      kind_id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestServicesAdditionalPath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Дополнительные услуги включаемые в ставку.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestServicesAdditional$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestServicesAdditional(\n    params: {\n\n    /**\n     * Вид перевозки (ID берем из запроса - transport_kind)\n     */\n      kind_id: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.requestServicesAdditional$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `requestIncoterms()` */\n  static readonly RequestIncotermsPath = '/request_incoterms';\n\n  /**\n   * Условие поставки (Incoterms).\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestIncoterms()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestIncoterms$Response(\n    params: {\n\n    /**\n     * Вид перевозки (ID берем из запроса - transport_kind)\n     */\n      kind_id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Услуги\n */\n'services_id'?: Array<string>;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestIncotermsPath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Услуги\n         */\n        'services_id'?: Array<string>;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Условие поставки (Incoterms).\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestIncoterms$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestIncoterms(\n    params: {\n\n    /**\n     * Вид перевозки (ID берем из запроса - transport_kind)\n     */\n      kind_id: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Услуги\n */\n'services_id'?: Array<string>;\n}>> {\n    return this.requestIncoterms$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Услуги\n */\n'services_id'?: Array<string>;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Услуги\n */\n'services_id'?: Array<string>;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `requestExport()` */\n  static readonly RequestExportPath = '/request_export';\n\n  /**\n   * Экспорт запросов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestExport()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestExport$Response(\n    params?: {\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'time_add' | 'customer_name' | 'departure_text' | 'arrival_text' | 'status_crm_name' | 'rate_contractor_name';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestExportPath, 'get');\n    if (params) {\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Экспорт запросов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestExport$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestExport(\n    params?: {\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'id' | 'time_add' | 'customer_name' | 'departure_text' | 'arrival_text' | 'status_crm_name' | 'rate_contractor_name';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.requestExport$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestImportTemplate()` */\n  static readonly RequestImportTemplatePath = '/request_import_template';\n\n  /**\n   * Шаблон экспорта запросов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestImportTemplate()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestImportTemplate$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestImportTemplatePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Шаблон экспорта запросов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestImportTemplate$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestImportTemplate(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.requestImportTemplate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestImport()` */\n  static readonly RequestImportPath = '/request_import';\n\n  /**\n   * Импорт запросов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestImport()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestImport$Response(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Base64 строка файла\n */\n'data': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestImportPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Код обновления\n         */\n        'import_key'?: string;\n        \n        /**\n         * Результат обновления\n         */\n        'result'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Импорт запросов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestImport$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestImport(\n    params?: {\n      body?: {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Base64 строка файла\n */\n'data': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}> {\n    return this.requestImport$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n}>): {\n\n/**\n * Код обновления\n */\n'import_key'?: string;\n\n/**\n * Результат обновления\n */\n'result'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestImportConfirm()` */\n  static readonly RequestImportConfirmPath = '/request_import_confirm';\n\n  /**\n   * Подтверждение импорта запросов в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestImportConfirm()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestImportConfirm$Response(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestImportConfirmPath, 'get');\n    if (params) {\n      rb.query('import_key', params.import_key, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подтверждение импорта запросов в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestImportConfirm$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestImportConfirm(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestImportConfirm$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestImportResult()` */\n  static readonly RequestImportResultPath = '/request_import_result';\n\n  /**\n   * Получение файла с результатами обработки импорта в XLSX.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestImportResult()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestImportResult$Response(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestImportResultPath, 'get');\n    if (params) {\n      rb.query('import_key', params.import_key, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Получение файла с результатами обработки импорта в XLSX.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestImportResult$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestImportResult(\n    params?: {\n\n    /**\n     * Код обновления\n     */\n      import_key?: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.requestImportResult$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestTranslate()` */\n  static readonly RequestTranslatePath = '/request_translate';\n\n  /**\n   * Данные перевода запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestTranslate()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestTranslate$Response(\n    params: {\n\n    /**\n     * ID запроса\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Русский язык\n */\n'ru'?: {\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Рейсы\n */\n'departure_flight_name'?: string;\n\n/**\n * Товар\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза\n */\n'cargo_type_name'?: string;\n\n/**\n * Условия перевозки\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Кол-во\n */\n'cargo_places_count'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Габариты груза\n */\n'cargo_dimensions'?: string;\n\n/**\n * Примечание\n */\n'comment'?: string;\n};\n\n/**\n * Английский язык\n */\n'en'?: {\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n};\n\n/**\n * Поля автоматического перевода\n */\n'translate_auto'?: Array<string>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestTranslatePath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Русский язык\n         */\n        'ru'?: {\n        \n        /**\n         * Страна отправления\n         */\n        'departure_country_name'?: string;\n        \n        /**\n         * Город отправления\n         */\n        'departure_city_name'?: string;\n        \n        /**\n         * Адрес забора груза\n         */\n        'departure_address'?: string;\n        \n        /**\n         * Аэропорт вылета\n         */\n        'departure_point_name'?: string;\n        \n        /**\n         * Страна назначения\n         */\n        'arrival_country_name'?: string;\n        \n        /**\n         * Город назначения\n         */\n        'arrival_city_name'?: string;\n        \n        /**\n         * Адрес доставки груза\n         */\n        'arrival_address'?: string;\n        \n        /**\n         * Аэропорт прибытия\n         */\n        'arrival_point_name'?: string;\n        \n        /**\n         * Условия поставки по Инкотермс\n         */\n        'incoterms_name'?: string;\n        \n        /**\n         * Город/Порт\n         */\n        'incoterms_city_name'?: string;\n        \n        /**\n         * Рейсы\n         */\n        'departure_flight_name'?: string;\n        \n        /**\n         * Товар\n         */\n        'cargo_description'?: string;\n        \n        /**\n         * Тип груза\n         */\n        'cargo_type_name'?: string;\n        \n        /**\n         * Условия перевозки\n         */\n        'cargo_condition_carriage'?: string;\n        \n        /**\n         * Кол-во\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Объем, м3\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Оплачиваемый вес, кг\n         */\n        'cargo_places_paid_weight'?: number;\n        \n        /**\n         * Габариты груза\n         */\n        'cargo_dimensions'?: string;\n        \n        /**\n         * Примечание\n         */\n        'comment'?: string;\n        };\n        \n        /**\n         * Английский язык\n         */\n        'en'?: {\n        \n        /**\n         * Country of dispatch\n         */\n        'departure_country_name'?: string;\n        \n        /**\n         * City of dispatch\n         */\n        'departure_city_name'?: string;\n        \n        /**\n         * Address of pick-up\n         */\n        'departure_address'?: string;\n        \n        /**\n         * Airport of departure\n         */\n        'departure_point_name'?: string;\n        \n        /**\n         * Country of delivery\n         */\n        'arrival_country_name'?: string;\n        \n        /**\n         * City of delivery\n         */\n        'arrival_city_name'?: string;\n        \n        /**\n         * Address of departure\n         */\n        'arrival_address'?: string;\n        \n        /**\n         * Airport of destination\n         */\n        'arrival_point_name'?: string;\n        \n        /**\n         * Terms of delivery\n         */\n        'incoterms_name'?: string;\n        \n        /**\n         * City/Port\n         */\n        'incoterms_city_name'?: string;\n        \n        /**\n         * Type of flights\n         */\n        'departure_flight_name'?: string;\n        \n        /**\n         * Commodity\n         */\n        'cargo_description'?: string;\n        \n        /**\n         * Cargo type\n         */\n        'cargo_type_name'?: string;\n        \n        /**\n         * Condition of carriage\n         */\n        'cargo_condition_carriage'?: string;\n        \n        /**\n         * Total q-ty\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Total m3\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Total kg\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Density\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Chargeable weight, kg\n         */\n        'cargo_places_paid_weight'?: number;\n        \n        /**\n         * Dimensions\n         */\n        'cargo_dimensions'?: string;\n        \n        /**\n         * Notation\n         */\n        'comment'?: string;\n        };\n        \n        /**\n         * Поля автоматического перевода\n         */\n        'translate_auto'?: Array<string>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Данные перевода запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestTranslate$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestTranslate(\n    params: {\n\n    /**\n     * ID запроса\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Русский язык\n */\n'ru'?: {\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Рейсы\n */\n'departure_flight_name'?: string;\n\n/**\n * Товар\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза\n */\n'cargo_type_name'?: string;\n\n/**\n * Условия перевозки\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Кол-во\n */\n'cargo_places_count'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Габариты груза\n */\n'cargo_dimensions'?: string;\n\n/**\n * Примечание\n */\n'comment'?: string;\n};\n\n/**\n * Английский язык\n */\n'en'?: {\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n};\n\n/**\n * Поля автоматического перевода\n */\n'translate_auto'?: Array<string>;\n}> {\n    return this.requestTranslate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Русский язык\n */\n'ru'?: {\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Рейсы\n */\n'departure_flight_name'?: string;\n\n/**\n * Товар\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза\n */\n'cargo_type_name'?: string;\n\n/**\n * Условия перевозки\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Кол-во\n */\n'cargo_places_count'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Габариты груза\n */\n'cargo_dimensions'?: string;\n\n/**\n * Примечание\n */\n'comment'?: string;\n};\n\n/**\n * Английский язык\n */\n'en'?: {\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n};\n\n/**\n * Поля автоматического перевода\n */\n'translate_auto'?: Array<string>;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Русский язык\n */\n'ru'?: {\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Рейсы\n */\n'departure_flight_name'?: string;\n\n/**\n * Товар\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза\n */\n'cargo_type_name'?: string;\n\n/**\n * Условия перевозки\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Кол-во\n */\n'cargo_places_count'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Габариты груза\n */\n'cargo_dimensions'?: string;\n\n/**\n * Примечание\n */\n'comment'?: string;\n};\n\n/**\n * Английский язык\n */\n'en'?: {\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n};\n\n/**\n * Поля автоматического перевода\n */\n'translate_auto'?: Array<string>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestTranslateSave()` */\n  static readonly RequestTranslateSavePath = '/request_translate_save';\n\n  /**\n   * Сохранение перевода запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestTranslateSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestTranslateSave$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Русский язык\n */\n'ru'?: {\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Рейсы\n */\n'departure_flight_name'?: string;\n\n/**\n * Товар\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза\n */\n'cargo_type_name'?: string;\n\n/**\n * Условия перевозки\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Кол-во\n */\n'cargo_places_count'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Габариты груза\n */\n'cargo_dimensions'?: string;\n\n/**\n * Примечание\n */\n'comment'?: string;\n};\n\n/**\n * Английский язык\n */\n'en'?: {\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n};\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestTranslateSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сохранение перевода запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestTranslateSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestTranslateSave(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Русский язык\n */\n'ru'?: {\n\n/**\n * Страна отправления\n */\n'departure_country_name'?: string;\n\n/**\n * Город отправления\n */\n'departure_city_name'?: string;\n\n/**\n * Адрес забора груза\n */\n'departure_address'?: string;\n\n/**\n * Аэропорт вылета\n */\n'departure_point_name'?: string;\n\n/**\n * Страна назначения\n */\n'arrival_country_name'?: string;\n\n/**\n * Город назначения\n */\n'arrival_city_name'?: string;\n\n/**\n * Адрес доставки груза\n */\n'arrival_address'?: string;\n\n/**\n * Аэропорт прибытия\n */\n'arrival_point_name'?: string;\n\n/**\n * Условия поставки по Инкотермс\n */\n'incoterms_name'?: string;\n\n/**\n * Город/Порт\n */\n'incoterms_city_name'?: string;\n\n/**\n * Рейсы\n */\n'departure_flight_name'?: string;\n\n/**\n * Товар\n */\n'cargo_description'?: string;\n\n/**\n * Тип груза\n */\n'cargo_type_name'?: string;\n\n/**\n * Условия перевозки\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Кол-во\n */\n'cargo_places_count'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Габариты груза\n */\n'cargo_dimensions'?: string;\n\n/**\n * Примечание\n */\n'comment'?: string;\n};\n\n/**\n * Английский язык\n */\n'en'?: {\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n};\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestTranslateSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRates()` */\n  static readonly RequestRatesPath = '/request_rates';\n\n  /**\n   * Ставки по запросу от контрагента (форма добавления ставок).\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRates()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRates$Response(\n    params: {\n\n    /**\n     * UID запроса (из URL)\n     */\n      uid: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID Запроса\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Страна отправления, ID\n */\n'departure_country_id'?: string;\n\n/**\n * Город отправления, ID\n */\n'departure_city_id'?: string;\n\n/**\n * Аэропорт вылета, ID\n */\n'departure_point_id'?: string;\n\n/**\n * Страна назначения, ID\n */\n'arrival_country_id'?: string;\n\n/**\n * Город назначения, ID\n */\n'arrival_city_id'?: string;\n\n/**\n * Аэропорт прибытия, ID\n */\n'arrival_point_id'?: string;\n\n/**\n * Вид перевозки, ID\n */\n'transport_kind_id'?: string;\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n\n/**\n * Паспорта безопасности (файлы)\n */\n'cargo_file'?: {\n};\n\n/**\n * Ставки\n */\n'rates'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Порядковый номер\n */\n'num'?: string;\n\n/**\n * Транспортная компания (ИАТА) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * Транспортная компания (Описание) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc': string;\n\n/**\n * ID Маршрут (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Расписание отправления (Departure schedule)\n */\n'departure_schedule'?: Array<string>;\n\n/**\n * Ближайшие рейсы (Nearest flight etd)\n */\n'nearest_flight'?: Array<string>;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Время транзита\n */\n'transit_time'?: {\n\n/**\n * Время транзита От\n */\n'transit_time_from'?: number;\n\n/**\n * Время транзита До\n */\n'transit_time_to'?: number;\n};\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * Стоимость (Cost)\n */\n'total_cost'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: number;\n\n/**\n * Значения ставок\n */\n'values'?: Array<{\n\n/**\n * Наименование поля\n */\n'field'?: string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price'?: number;\n\n/**\n * Количество\n */\n'value'?: number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Общая стоимость\n */\n'cost'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: number;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n}>;\n\n/**\n * Расходы\n */\n'charges'?: Array<{\n\n/**\n * Наименование переменной\n */\n'field_name': string;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Заголовок\n */\n'title': string;\n\n/**\n * Примечание\n */\n'note': string;\n\n/**\n * Единица изменений\n */\n'unit': string;\n\n/**\n * Возможно минимальное значение\n */\n'field_min'?: boolean;\n\n/**\n * Возможно фиксированное значение\n */\n'field_fix'?: boolean;\n\n/**\n * Возможен комментарий\n */\n'field_comment'?: boolean;\n\n/**\n * Признак выбранного\n */\n'status'?: boolean;\n\n/**\n * Запрет изменения\n */\n'requare'?: boolean;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRatesPath, 'get');\n    if (params) {\n      rb.query('uid', params.uid, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID Запроса\n         */\n        'id': number;\n        \n        /**\n         * UID\n         */\n        'uid': string;\n        \n        /**\n         * Дата создания\n         */\n        'time_add'?: string;\n        \n        /**\n         * Готовность\n         */\n        'cargo_readiness'?: string;\n        \n        /**\n         * Валюта\n         */\n        'currency': number;\n        \n        /**\n         * Страна отправления, ID\n         */\n        'departure_country_id'?: string;\n        \n        /**\n         * Город отправления, ID\n         */\n        'departure_city_id'?: string;\n        \n        /**\n         * Аэропорт вылета, ID\n         */\n        'departure_point_id'?: string;\n        \n        /**\n         * Страна назначения, ID\n         */\n        'arrival_country_id'?: string;\n        \n        /**\n         * Город назначения, ID\n         */\n        'arrival_city_id'?: string;\n        \n        /**\n         * Аэропорт прибытия, ID\n         */\n        'arrival_point_id'?: string;\n        \n        /**\n         * Вид перевозки, ID\n         */\n        'transport_kind_id'?: string;\n        \n        /**\n         * Country of dispatch\n         */\n        'departure_country_name'?: string;\n        \n        /**\n         * City of dispatch\n         */\n        'departure_city_name'?: string;\n        \n        /**\n         * Address of pick-up\n         */\n        'departure_address'?: string;\n        \n        /**\n         * Airport of departure\n         */\n        'departure_point_name'?: string;\n        \n        /**\n         * Country of delivery\n         */\n        'arrival_country_name'?: string;\n        \n        /**\n         * City of delivery\n         */\n        'arrival_city_name'?: string;\n        \n        /**\n         * Address of departure\n         */\n        'arrival_address'?: string;\n        \n        /**\n         * Airport of destination\n         */\n        'arrival_point_name'?: string;\n        \n        /**\n         * Terms of delivery\n         */\n        'incoterms_name'?: string;\n        \n        /**\n         * City/Port\n         */\n        'incoterms_city_name'?: string;\n        \n        /**\n         * Type of flights\n         */\n        'departure_flight_name'?: string;\n        \n        /**\n         * Commodity\n         */\n        'cargo_description'?: string;\n        \n        /**\n         * Cargo type\n         */\n        'cargo_type_name'?: string;\n        \n        /**\n         * Condition of carriage\n         */\n        'cargo_condition_carriage'?: string;\n        \n        /**\n         * Total q-ty\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Total m3\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Total kg\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Density\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Chargeable weight, kg\n         */\n        'cargo_places_paid_weight'?: number;\n        \n        /**\n         * Dimensions\n         */\n        'cargo_dimensions'?: string;\n        \n        /**\n         * Notation\n         */\n        'comment'?: string;\n        \n        /**\n         * Документы (файлы)\n         */\n        'documents_file'?: {\n        };\n        \n        /**\n         * Паспорта безопасности (файлы)\n         */\n        'cargo_file'?: {\n        };\n        \n        /**\n         * Ставки\n         */\n        'rates'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Тип ставки\n         */\n        'rate_type': 'detail' | 'single';\n        \n        /**\n         * Порядковый номер\n         */\n        'num'?: string;\n        \n        /**\n         * Транспортная компания (ИАТА) (ID берем из запроса - transport_carrier)\n         */\n        'carrier_name': string;\n        \n        /**\n         * Транспортная компания (Описание) (ID берем из запроса - transport_carrier)\n         */\n        'carrier_desc': string;\n        \n        /**\n         * ID Маршрут (ID берем из запроса - direction_route)\n         */\n        'route_id'?: number;\n        \n        /**\n         * Наименование маршрута\n         */\n        'route_name': string;\n        \n        /**\n         * Расписание отправления (Departure schedule)\n         */\n        'departure_schedule'?: Array<string>;\n        \n        /**\n         * Ближайшие рейсы (Nearest flight etd)\n         */\n        'nearest_flight'?: Array<string>;\n        \n        /**\n         * Валюта\n         */\n        'currency': number;\n        \n        /**\n         * Время транзита\n         */\n        'transit_time'?: {\n        \n        /**\n         * Время транзита От\n         */\n        'transit_time_from'?: number;\n        \n        /**\n         * Время транзита До\n         */\n        'transit_time_to'?: number;\n        };\n        \n        /**\n         * Ставка действует до\n         */\n        'valid_time'?: string;\n        \n        /**\n         * Стоимость (Cost)\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включение прибыли (Profit is included)\n         */\n        'profit_include'?: boolean;\n        \n        /**\n         * Комментарий (Your Comment)\n         */\n        'comment'?: number;\n        \n        /**\n         * Значения ставок\n         */\n        'values'?: Array<{\n        \n        /**\n         * Наименование поля\n         */\n        'field'?: string;\n        \n        /**\n         * Минимальная цена\n         */\n        'min'?: number;\n        \n        /**\n         * Цена за единицу\n         */\n        'price'?: number;\n        \n        /**\n         * Количество\n         */\n        'value'?: number;\n        \n        /**\n         * Фиксированная надбавка\n         */\n        'fix'?: number;\n        \n        /**\n         * Общая стоимость\n         */\n        'cost'?: number;\n        \n        /**\n         * Комментарий\n         */\n        'comment'?: number;\n        \n        /**\n         * Признак выбора\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        \n        /**\n         * Расходы\n         */\n        'charges'?: Array<{\n        \n        /**\n         * Наименование переменной\n         */\n        'field_name': string;\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Заголовок\n         */\n        'title': string;\n        \n        /**\n         * Примечание\n         */\n        'note': string;\n        \n        /**\n         * Единица изменений\n         */\n        'unit': string;\n        \n        /**\n         * Возможно минимальное значение\n         */\n        'field_min'?: boolean;\n        \n        /**\n         * Возможно фиксированное значение\n         */\n        'field_fix'?: boolean;\n        \n        /**\n         * Возможен комментарий\n         */\n        'field_comment'?: boolean;\n        \n        /**\n         * Признак выбранного\n         */\n        'status'?: boolean;\n        \n        /**\n         * Запрет изменения\n         */\n        'requare'?: boolean;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки по запросу от контрагента (форма добавления ставок).\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRates$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRates(\n    params: {\n\n    /**\n     * UID запроса (из URL)\n     */\n      uid: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID Запроса\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Страна отправления, ID\n */\n'departure_country_id'?: string;\n\n/**\n * Город отправления, ID\n */\n'departure_city_id'?: string;\n\n/**\n * Аэропорт вылета, ID\n */\n'departure_point_id'?: string;\n\n/**\n * Страна назначения, ID\n */\n'arrival_country_id'?: string;\n\n/**\n * Город назначения, ID\n */\n'arrival_city_id'?: string;\n\n/**\n * Аэропорт прибытия, ID\n */\n'arrival_point_id'?: string;\n\n/**\n * Вид перевозки, ID\n */\n'transport_kind_id'?: string;\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n\n/**\n * Паспорта безопасности (файлы)\n */\n'cargo_file'?: {\n};\n\n/**\n * Ставки\n */\n'rates'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Порядковый номер\n */\n'num'?: string;\n\n/**\n * Транспортная компания (ИАТА) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * Транспортная компания (Описание) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc': string;\n\n/**\n * ID Маршрут (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Расписание отправления (Departure schedule)\n */\n'departure_schedule'?: Array<string>;\n\n/**\n * Ближайшие рейсы (Nearest flight etd)\n */\n'nearest_flight'?: Array<string>;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Время транзита\n */\n'transit_time'?: {\n\n/**\n * Время транзита От\n */\n'transit_time_from'?: number;\n\n/**\n * Время транзита До\n */\n'transit_time_to'?: number;\n};\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * Стоимость (Cost)\n */\n'total_cost'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: number;\n\n/**\n * Значения ставок\n */\n'values'?: Array<{\n\n/**\n * Наименование поля\n */\n'field'?: string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price'?: number;\n\n/**\n * Количество\n */\n'value'?: number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Общая стоимость\n */\n'cost'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: number;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n}>;\n\n/**\n * Расходы\n */\n'charges'?: Array<{\n\n/**\n * Наименование переменной\n */\n'field_name': string;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Заголовок\n */\n'title': string;\n\n/**\n * Примечание\n */\n'note': string;\n\n/**\n * Единица изменений\n */\n'unit': string;\n\n/**\n * Возможно минимальное значение\n */\n'field_min'?: boolean;\n\n/**\n * Возможно фиксированное значение\n */\n'field_fix'?: boolean;\n\n/**\n * Возможен комментарий\n */\n'field_comment'?: boolean;\n\n/**\n * Признак выбранного\n */\n'status'?: boolean;\n\n/**\n * Запрет изменения\n */\n'requare'?: boolean;\n}>;\n}> {\n    return this.requestRates$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID Запроса\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Страна отправления, ID\n */\n'departure_country_id'?: string;\n\n/**\n * Город отправления, ID\n */\n'departure_city_id'?: string;\n\n/**\n * Аэропорт вылета, ID\n */\n'departure_point_id'?: string;\n\n/**\n * Страна назначения, ID\n */\n'arrival_country_id'?: string;\n\n/**\n * Город назначения, ID\n */\n'arrival_city_id'?: string;\n\n/**\n * Аэропорт прибытия, ID\n */\n'arrival_point_id'?: string;\n\n/**\n * Вид перевозки, ID\n */\n'transport_kind_id'?: string;\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n\n/**\n * Паспорта безопасности (файлы)\n */\n'cargo_file'?: {\n};\n\n/**\n * Ставки\n */\n'rates'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Порядковый номер\n */\n'num'?: string;\n\n/**\n * Транспортная компания (ИАТА) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * Транспортная компания (Описание) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc': string;\n\n/**\n * ID Маршрут (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Расписание отправления (Departure schedule)\n */\n'departure_schedule'?: Array<string>;\n\n/**\n * Ближайшие рейсы (Nearest flight etd)\n */\n'nearest_flight'?: Array<string>;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Время транзита\n */\n'transit_time'?: {\n\n/**\n * Время транзита От\n */\n'transit_time_from'?: number;\n\n/**\n * Время транзита До\n */\n'transit_time_to'?: number;\n};\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * Стоимость (Cost)\n */\n'total_cost'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: number;\n\n/**\n * Значения ставок\n */\n'values'?: Array<{\n\n/**\n * Наименование поля\n */\n'field'?: string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price'?: number;\n\n/**\n * Количество\n */\n'value'?: number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Общая стоимость\n */\n'cost'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: number;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n}>;\n\n/**\n * Расходы\n */\n'charges'?: Array<{\n\n/**\n * Наименование переменной\n */\n'field_name': string;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Заголовок\n */\n'title': string;\n\n/**\n * Примечание\n */\n'note': string;\n\n/**\n * Единица изменений\n */\n'unit': string;\n\n/**\n * Возможно минимальное значение\n */\n'field_min'?: boolean;\n\n/**\n * Возможно фиксированное значение\n */\n'field_fix'?: boolean;\n\n/**\n * Возможен комментарий\n */\n'field_comment'?: boolean;\n\n/**\n * Признак выбранного\n */\n'status'?: boolean;\n\n/**\n * Запрет изменения\n */\n'requare'?: boolean;\n}>;\n}>): {\n\n/**\n * ID Запроса\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Страна отправления, ID\n */\n'departure_country_id'?: string;\n\n/**\n * Город отправления, ID\n */\n'departure_city_id'?: string;\n\n/**\n * Аэропорт вылета, ID\n */\n'departure_point_id'?: string;\n\n/**\n * Страна назначения, ID\n */\n'arrival_country_id'?: string;\n\n/**\n * Город назначения, ID\n */\n'arrival_city_id'?: string;\n\n/**\n * Аэропорт прибытия, ID\n */\n'arrival_point_id'?: string;\n\n/**\n * Вид перевозки, ID\n */\n'transport_kind_id'?: string;\n\n/**\n * Country of dispatch\n */\n'departure_country_name'?: string;\n\n/**\n * City of dispatch\n */\n'departure_city_name'?: string;\n\n/**\n * Address of pick-up\n */\n'departure_address'?: string;\n\n/**\n * Airport of departure\n */\n'departure_point_name'?: string;\n\n/**\n * Country of delivery\n */\n'arrival_country_name'?: string;\n\n/**\n * City of delivery\n */\n'arrival_city_name'?: string;\n\n/**\n * Address of departure\n */\n'arrival_address'?: string;\n\n/**\n * Airport of destination\n */\n'arrival_point_name'?: string;\n\n/**\n * Terms of delivery\n */\n'incoterms_name'?: string;\n\n/**\n * City/Port\n */\n'incoterms_city_name'?: string;\n\n/**\n * Type of flights\n */\n'departure_flight_name'?: string;\n\n/**\n * Commodity\n */\n'cargo_description'?: string;\n\n/**\n * Cargo type\n */\n'cargo_type_name'?: string;\n\n/**\n * Condition of carriage\n */\n'cargo_condition_carriage'?: string;\n\n/**\n * Total q-ty\n */\n'cargo_places_count'?: number;\n\n/**\n * Total m3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Total kg\n */\n'cargo_places_weight'?: number;\n\n/**\n * Density\n */\n'cargo_places_density'?: number;\n\n/**\n * Chargeable weight, kg\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Dimensions\n */\n'cargo_dimensions'?: string;\n\n/**\n * Notation\n */\n'comment'?: string;\n\n/**\n * Документы (файлы)\n */\n'documents_file'?: {\n};\n\n/**\n * Паспорта безопасности (файлы)\n */\n'cargo_file'?: {\n};\n\n/**\n * Ставки\n */\n'rates'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Порядковый номер\n */\n'num'?: string;\n\n/**\n * Транспортная компания (ИАТА) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * Транспортная компания (Описание) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc': string;\n\n/**\n * ID Маршрут (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Расписание отправления (Departure schedule)\n */\n'departure_schedule'?: Array<string>;\n\n/**\n * Ближайшие рейсы (Nearest flight etd)\n */\n'nearest_flight'?: Array<string>;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Время транзита\n */\n'transit_time'?: {\n\n/**\n * Время транзита От\n */\n'transit_time_from'?: number;\n\n/**\n * Время транзита До\n */\n'transit_time_to'?: number;\n};\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * Стоимость (Cost)\n */\n'total_cost'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: number;\n\n/**\n * Значения ставок\n */\n'values'?: Array<{\n\n/**\n * Наименование поля\n */\n'field'?: string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price'?: number;\n\n/**\n * Количество\n */\n'value'?: number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Общая стоимость\n */\n'cost'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: number;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n}>;\n\n/**\n * Расходы\n */\n'charges'?: Array<{\n\n/**\n * Наименование переменной\n */\n'field_name': string;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Заголовок\n */\n'title': string;\n\n/**\n * Примечание\n */\n'note': string;\n\n/**\n * Единица изменений\n */\n'unit': string;\n\n/**\n * Возможно минимальное значение\n */\n'field_min'?: boolean;\n\n/**\n * Возможно фиксированное значение\n */\n'field_fix'?: boolean;\n\n/**\n * Возможен комментарий\n */\n'field_comment'?: boolean;\n\n/**\n * Признак выбранного\n */\n'status'?: boolean;\n\n/**\n * Запрет изменения\n */\n'requare'?: boolean;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRatesSave()` */\n  static readonly RequestRatesSavePath = '/request_rates_save';\n\n  /**\n   * Ставки по запросу от контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRatesSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRatesSave$Response(\n    params?: {\n      body?: {\n\n/**\n * ID Запроса\n */\n'id'?: number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Ставки\n */\n'rates'?: Array<{\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Порядковый номер\n */\n'num'?: string;\n\n/**\n * Транспортная компания (ИАТА) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * Транспортная компания (Описание) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc': string;\n\n/**\n * ID Маршрут (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Расписание отправления (Departure schedule)\n */\n'departure_schedule'?: Array<string>;\n\n/**\n * Ближайшие рейсы (Nearest flight etd)\n */\n'nearest_flight'?: Array<string>;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Время транзита\n */\n'transit_time'?: {\n\n/**\n * Время транзита От\n */\n'transit_time_from'?: number;\n\n/**\n * Время транзита До\n */\n'transit_time_to'?: number;\n};\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * Стоимость (Cost)\n */\n'total_cost'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: number;\n\n/**\n * Значения ставок\n */\n'values'?: Array<{\n\n/**\n * Наименование поля\n */\n'field'?: string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price'?: number;\n\n/**\n * Количество\n */\n'value'?: number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Общая стоимость\n */\n'cost'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: number;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRatesSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки по запросу от контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRatesSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRatesSave(\n    params?: {\n      body?: {\n\n/**\n * ID Запроса\n */\n'id'?: number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add'?: string;\n\n/**\n * Готовность\n */\n'cargo_readiness'?: string;\n\n/**\n * Ставки\n */\n'rates'?: Array<{\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Порядковый номер\n */\n'num'?: string;\n\n/**\n * Транспортная компания (ИАТА) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * Транспортная компания (Описание) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc': string;\n\n/**\n * ID Маршрут (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Расписание отправления (Departure schedule)\n */\n'departure_schedule'?: Array<string>;\n\n/**\n * Ближайшие рейсы (Nearest flight etd)\n */\n'nearest_flight'?: Array<string>;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Время транзита\n */\n'transit_time'?: {\n\n/**\n * Время транзита От\n */\n'transit_time_from'?: number;\n\n/**\n * Время транзита До\n */\n'transit_time_to'?: number;\n};\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * Стоимость (Cost)\n */\n'total_cost'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: number;\n\n/**\n * Значения ставок\n */\n'values'?: Array<{\n\n/**\n * Наименование поля\n */\n'field'?: string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price'?: number;\n\n/**\n * Количество\n */\n'value'?: number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Общая стоимость\n */\n'cost'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: number;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestRatesSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateFormParam()` */\n  static readonly RequestRateFormParamPath = '/request_rate_form_param';\n\n  /**\n   * Параметры для форм.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateFormParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateFormParam$Response(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Метод (final, customs, point, transporter, other)\n     */\n      method: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Услуги\n */\n'charges'?: Array<{\n}>;\n\n/**\n * Валюты\n */\n'currency': Array<{\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateFormParamPath, 'get');\n    if (params) {\n      rb.query('request_id', params.request_id, {});\n      rb.query('method', params.method, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Услуги\n         */\n        'charges'?: Array<{\n        }>;\n        \n        /**\n         * Валюты\n         */\n        'currency': Array<{\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры для форм.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateFormParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateFormParam(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Метод (final, customs, point, transporter, other)\n     */\n      method: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Услуги\n */\n'charges'?: Array<{\n}>;\n\n/**\n * Валюты\n */\n'currency': Array<{\n}>;\n}> {\n    return this.requestRateFormParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Услуги\n */\n'charges'?: Array<{\n}>;\n\n/**\n * Валюты\n */\n'currency': Array<{\n}>;\n}>): {\n\n/**\n * Услуги\n */\n'charges'?: Array<{\n}>;\n\n/**\n * Валюты\n */\n'currency': Array<{\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateListParam()` */\n  static readonly RequestRateListParamPath = '/request_rate_list_param';\n\n  /**\n   * Параметры вывода запросов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateListParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateListParam$Response(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Метод (final, customs, point, transporter)\n     */\n      method: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateListParamPath, 'get');\n    if (params) {\n      rb.query('request_id', params.request_id, {});\n      rb.query('method', params.method, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Параметры поиска\n         */\n        'search'?: Array<{\n        \n        /**\n         * Поиск в заголовке\n         */\n        'header'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск основной\n         */\n        'main'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        \n        /**\n         * Поиск расширенный\n         */\n        'additional'?: Array<{\n        \n        /**\n         * Переменная\n         */\n        'field'?: string;\n        \n        /**\n         * Элемент формы\n         */\n        'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Источник\n         */\n        'source'?: string;\n        \n        /**\n         * Массив данных\n         */\n        'array'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        }>;\n        }>;\n        \n        /**\n         * Параметры таблицы\n         */\n        'table'?: Array<{\n        \n        /**\n         * Блок колонок\n         */\n        'column'?: string;\n        \n        /**\n         * Данные колонок\n         */\n        'items'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Заголовок поля\n         */\n        'title'?: string;\n        \n        /**\n         * Ширина поля\n         */\n        'width'?: number;\n        }>;\n        }>;\n        \n        /**\n         * Параметры сортировки\n         */\n        'order'?: Array<{\n        \n        /**\n         * Поле\n         */\n        'field'?: string;\n        \n        /**\n         * Сортировка по умолчанию\n         */\n        'dir'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры вывода запросов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateListParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateListParam(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Метод (final, customs, point, transporter)\n     */\n      method: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}> {\n    return this.requestRateListParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n}>): {\n\n/**\n * Параметры поиска\n */\n'search'?: Array<{\n\n/**\n * Поиск в заголовке\n */\n'header'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск основной\n */\n'main'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n\n/**\n * Поиск расширенный\n */\n'additional'?: Array<{\n\n/**\n * Переменная\n */\n'field'?: string;\n\n/**\n * Элемент формы\n */\n'form'?: 'autocomplete' | 'period' | 'select' | 'text' | 'checkbox' | 'checkbox_reset';\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Источник\n */\n'source'?: string;\n\n/**\n * Массив данных\n */\n'array'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n}>;\n}>;\n\n/**\n * Параметры таблицы\n */\n'table'?: Array<{\n\n/**\n * Блок колонок\n */\n'column'?: string;\n\n/**\n * Данные колонок\n */\n'items'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Заголовок поля\n */\n'title'?: string;\n\n/**\n * Ширина поля\n */\n'width'?: number;\n}>;\n}>;\n\n/**\n * Параметры сортировки\n */\n'order'?: Array<{\n\n/**\n * Поле\n */\n'field'?: string;\n\n/**\n * Сортировка по умолчанию\n */\n'dir'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateDelete()` */\n  static readonly RequestRateDeletePath = '/request_rate_delete';\n\n  /**\n   * Удаление ставки запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление ставки запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateDelete(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestRateDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateDouble()` */\n  static readonly RequestRateDoublePath = '/request_rate_double';\n\n  /**\n   * Дублирование ставок запроса.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateDouble()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateDouble$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateDoublePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Дублирование ставок запроса.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateDouble$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateDouble(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestRateDouble$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateCustomsList()` */\n  static readonly RequestRateCustomsListPath = '/request_rate_customs_list';\n\n  /**\n   * Ставки запроса До границы .\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateCustomsList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateCustomsList$Response(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'time_insert' | 'total_cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n\n/**\n * Дата ответа\n */\n'time_answer'?: string;\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * ID подрядчика (ID берем из запроса - contractor_list)\n */\n'id': number;\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID транспортной компания (код) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * ID транспортной компания (наименование) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc'?: string;\n\n/**\n * Транспортная компания\n */\n'carrier': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * IATA\n */\n'iata': number;\n};\n\n/**\n * ID маршрута (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Маршрут\n */\n'route': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Тип транспорта\n */\n'kind_key': string;\n\n/**\n * Тип маршрута\n */\n'route_type': string;\n\n/**\n * Тип маршрута (иконка)\n */\n'route_type_key': string;\n};\n\n/**\n * Пункт назначения\n */\n'point'?: {\n};\n\n/**\n * Пункт отправки\n */\n'departure_point'?: {\n};\n\n/**\n * Расписание\n */\n'departure_schedule': Array<string>;\n\n/**\n * Расписание дней вылета\n */\n'departure_schedule_text': Array<string>;\n\n/**\n * Расписание дней вылета\n */\n'departure_schedule_text2': string;\n\n/**\n * Свободные места\n */\n'nearest_flight': Array<string>;\n\n/**\n * Свободные места\n */\n'nearest_flight_text': string;\n\n/**\n * Время транзита\n */\n'transit_time': {\n\n/**\n * Время транзита От\n */\n'from': number;\n\n/**\n * Время транзита До\n */\n'to': number;\n};\n\n/**\n * Время транзита\n */\n'transit_time_text': string;\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Ставка\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text': string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items': string;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateCustomsListPath, 'get');\n    if (params) {\n      rb.query('request_id', params.request_id, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * Дата запроса\n         */\n        'time_request'?: string;\n        \n        /**\n         * Дата ответа\n         */\n        'time_answer'?: string;\n        \n        /**\n         * Ставка действует до\n         */\n        'valid_time'?: string;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * Запрос\n         */\n        'request': {\n        \n        /**\n         * Кол-во мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Оплачиваемый вес, кг\n         */\n        'cargo_places_paid_weight'?: number;\n        \n        /**\n         * Объем, м3\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Дата запроса\n         */\n        'time_request'?: string;\n        };\n        \n        /**\n         * ID контрагента (ID берем из запроса - contractor_list)\n         */\n        'contractor_id': number;\n        \n        /**\n         * Подрядчик\n         */\n        'contractor': {\n        \n        /**\n         * Агент транспортной компании\n         */\n        'carrier_name'?: string;\n        \n        /**\n         * Агент транспортной компании (ID берем из запроса - transport_carrier)\n         */\n        'carrier_id'?: number;\n        \n        /**\n         * ID подрядчика (ID берем из запроса - contractor_list)\n         */\n        'id': number;\n        \n        /**\n         * Подрядчик\n         */\n        'name': string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps_text'?: string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps'?: number;\n        \n        /**\n         * Участие в торгах (общее количество)\n         */\n        'trade_count'?: number;\n        \n        /**\n         * Количество выигранных торгов\n         */\n        'trade_success_count'?: number;\n        \n        /**\n         * % выигранных торгов\n         */\n        'trade_success_percent'?: number;\n        \n        /**\n         * Количество проигранных торгов\n         */\n        'trade_fail_count'?: number;\n        \n        /**\n         * % проигранных торгов\n         */\n        'trade_fail_percent'?: number;\n        \n        /**\n         * Участие в торгах (результаты)\n         */\n        'trade_count_text'?: number;\n        \n        /**\n         * Email\n         */\n        'email'?: string;\n        \n        /**\n         * Телефон\n         */\n        'phone'?: string;\n        };\n        \n        /**\n         * ID транспортной компания (код) (ID берем из запроса - transport_carrier)\n         */\n        'carrier_name': string;\n        \n        /**\n         * ID транспортной компания (наименование) (ID берем из запроса - transport_carrier)\n         */\n        'carrier_desc'?: string;\n        \n        /**\n         * Транспортная компания\n         */\n        'carrier': {\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * IATA\n         */\n        'iata': number;\n        };\n        \n        /**\n         * ID маршрута (ID берем из запроса - direction_route)\n         */\n        'route_id'?: number;\n        \n        /**\n         * Наименование маршрута\n         */\n        'route_name': string;\n        \n        /**\n         * Маршрут\n         */\n        'route': {\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Тип транспорта\n         */\n        'kind_key': string;\n        \n        /**\n         * Тип маршрута\n         */\n        'route_type': string;\n        \n        /**\n         * Тип маршрута (иконка)\n         */\n        'route_type_key': string;\n        };\n        \n        /**\n         * Пункт назначения\n         */\n        'point'?: {\n        };\n        \n        /**\n         * Пункт отправки\n         */\n        'departure_point'?: {\n        };\n        \n        /**\n         * Расписание\n         */\n        'departure_schedule': Array<string>;\n        \n        /**\n         * Расписание дней вылета\n         */\n        'departure_schedule_text': Array<string>;\n        \n        /**\n         * Расписание дней вылета\n         */\n        'departure_schedule_text2': string;\n        \n        /**\n         * Свободные места\n         */\n        'nearest_flight': Array<string>;\n        \n        /**\n         * Свободные места\n         */\n        'nearest_flight_text': string;\n        \n        /**\n         * Время транзита\n         */\n        'transit_time': {\n        \n        /**\n         * Время транзита От\n         */\n        'from': number;\n        \n        /**\n         * Время транзита До\n         */\n        'to': number;\n        };\n        \n        /**\n         * Время транзита\n         */\n        'transit_time_text': string;\n        \n        /**\n         * Тип ставки\n         */\n        'rate_type': 'detail' | 'single';\n        \n        /**\n         * Сумма\n         */\n        'total_cost': number;\n        \n        /**\n         * Ставка\n         */\n        'total_cost_text': string;\n        \n        /**\n         * Валюта\n         */\n        'currecy_text': string;\n        \n        /**\n         * Валюта (ID берем из запроса - system_currency)\n         */\n        'currency'?: number;\n        \n        /**\n         * Включение прибыли (Profit is included)\n         */\n        'profit_include'?: boolean;\n        \n        /**\n         * Значения ставок\n         */\n        'values': Array<{\n        \n        /**\n         * Наименование поля\n         */\n        'field': string;\n        \n        /**\n         * Минимальная цена\n         */\n        'min'?: number;\n        \n        /**\n         * Цена за единицу\n         */\n        'price': number;\n        \n        /**\n         * Количество\n         */\n        'value': number;\n        \n        /**\n         * Фиксированная надбавка\n         */\n        'fix'?: number;\n        \n        /**\n         * Комментарий\n         */\n        'comment'?: string;\n        \n        /**\n         * Признак выбора\n         */\n        'select'?: boolean;\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Стоимость\n         */\n        'cost': string;\n        \n        /**\n         * Стоимость\n         */\n        'cost_text': string;\n        }>;\n        \n        /**\n         * Наименование статей затрат\n         */\n        'service_items': string;\n        \n        /**\n         * Сводная информация\n         */\n        'summary_data': Array<{\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Значение\n         */\n        'value': string;\n        \n        /**\n         * Широкая колонка\n         */\n        'wide_row'?: boolean;\n        }>;\n        \n        /**\n         * Примечание\n         */\n        'comment'?: string;\n        \n        /**\n         * В итоговом\n         */\n        'selected'?: boolean;\n        \n        /**\n         * В коммерческом предложении\n         */\n        'offer'?: boolean;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки запроса До границы .\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateCustomsList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateCustomsList(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'time_insert' | 'total_cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n\n/**\n * Дата ответа\n */\n'time_answer'?: string;\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * ID подрядчика (ID берем из запроса - contractor_list)\n */\n'id': number;\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID транспортной компания (код) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * ID транспортной компания (наименование) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc'?: string;\n\n/**\n * Транспортная компания\n */\n'carrier': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * IATA\n */\n'iata': number;\n};\n\n/**\n * ID маршрута (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Маршрут\n */\n'route': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Тип транспорта\n */\n'kind_key': string;\n\n/**\n * Тип маршрута\n */\n'route_type': string;\n\n/**\n * Тип маршрута (иконка)\n */\n'route_type_key': string;\n};\n\n/**\n * Пункт назначения\n */\n'point'?: {\n};\n\n/**\n * Пункт отправки\n */\n'departure_point'?: {\n};\n\n/**\n * Расписание\n */\n'departure_schedule': Array<string>;\n\n/**\n * Расписание дней вылета\n */\n'departure_schedule_text': Array<string>;\n\n/**\n * Расписание дней вылета\n */\n'departure_schedule_text2': string;\n\n/**\n * Свободные места\n */\n'nearest_flight': Array<string>;\n\n/**\n * Свободные места\n */\n'nearest_flight_text': string;\n\n/**\n * Время транзита\n */\n'transit_time': {\n\n/**\n * Время транзита От\n */\n'from': number;\n\n/**\n * Время транзита До\n */\n'to': number;\n};\n\n/**\n * Время транзита\n */\n'transit_time_text': string;\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Ставка\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text': string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items': string;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}> {\n    return this.requestRateCustomsList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n\n/**\n * Дата ответа\n */\n'time_answer'?: string;\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * ID подрядчика (ID берем из запроса - contractor_list)\n */\n'id': number;\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID транспортной компания (код) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * ID транспортной компания (наименование) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc'?: string;\n\n/**\n * Транспортная компания\n */\n'carrier': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * IATA\n */\n'iata': number;\n};\n\n/**\n * ID маршрута (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Маршрут\n */\n'route': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Тип транспорта\n */\n'kind_key': string;\n\n/**\n * Тип маршрута\n */\n'route_type': string;\n\n/**\n * Тип маршрута (иконка)\n */\n'route_type_key': string;\n};\n\n/**\n * Пункт назначения\n */\n'point'?: {\n};\n\n/**\n * Пункт отправки\n */\n'departure_point'?: {\n};\n\n/**\n * Расписание\n */\n'departure_schedule': Array<string>;\n\n/**\n * Расписание дней вылета\n */\n'departure_schedule_text': Array<string>;\n\n/**\n * Расписание дней вылета\n */\n'departure_schedule_text2': string;\n\n/**\n * Свободные места\n */\n'nearest_flight': Array<string>;\n\n/**\n * Свободные места\n */\n'nearest_flight_text': string;\n\n/**\n * Время транзита\n */\n'transit_time': {\n\n/**\n * Время транзита От\n */\n'from': number;\n\n/**\n * Время транзита До\n */\n'to': number;\n};\n\n/**\n * Время транзита\n */\n'transit_time_text': string;\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Ставка\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text': string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items': string;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n\n/**\n * Дата ответа\n */\n'time_answer'?: string;\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * ID подрядчика (ID берем из запроса - contractor_list)\n */\n'id': number;\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID транспортной компания (код) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * ID транспортной компания (наименование) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc'?: string;\n\n/**\n * Транспортная компания\n */\n'carrier': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * IATA\n */\n'iata': number;\n};\n\n/**\n * ID маршрута (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Маршрут\n */\n'route': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Тип транспорта\n */\n'kind_key': string;\n\n/**\n * Тип маршрута\n */\n'route_type': string;\n\n/**\n * Тип маршрута (иконка)\n */\n'route_type_key': string;\n};\n\n/**\n * Пункт назначения\n */\n'point'?: {\n};\n\n/**\n * Пункт отправки\n */\n'departure_point'?: {\n};\n\n/**\n * Расписание\n */\n'departure_schedule': Array<string>;\n\n/**\n * Расписание дней вылета\n */\n'departure_schedule_text': Array<string>;\n\n/**\n * Расписание дней вылета\n */\n'departure_schedule_text2': string;\n\n/**\n * Свободные места\n */\n'nearest_flight': Array<string>;\n\n/**\n * Свободные места\n */\n'nearest_flight_text': string;\n\n/**\n * Время транзита\n */\n'transit_time': {\n\n/**\n * Время транзита От\n */\n'from': number;\n\n/**\n * Время транзита До\n */\n'to': number;\n};\n\n/**\n * Время транзита\n */\n'transit_time_text': string;\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Ставка\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text': string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items': string;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateCustomsSave()` */\n  static readonly RequestRateCustomsSavePath = '/request_rate_customs_save';\n\n  /**\n   * Ставка запроса До границы.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateCustomsSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateCustomsSave$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n\n/**\n * Дата ответа\n */\n'time_answer'?: string;\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * ID транспортной компания (код) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * ID транспортной компания (наименование) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc'?: string;\n\n/**\n * ID маршрута (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Расписание\n */\n'departure_schedule': Array<string>;\n\n/**\n * Свободные места\n */\n'nearest_flight': Array<string>;\n\n/**\n * Время транзита\n */\n'transit_time': {\n\n/**\n * Время транзита От\n */\n'from': number;\n\n/**\n * Время транзита До\n */\n'to': number;\n};\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Сумма\n */\n'total_cost'?: number;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateCustomsSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставка запроса До границы.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateCustomsSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateCustomsSave(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n\n/**\n * Дата ответа\n */\n'time_answer'?: string;\n\n/**\n * Ставка действует до\n */\n'valid_time'?: string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * ID транспортной компания (код) (ID берем из запроса - transport_carrier)\n */\n'carrier_name': string;\n\n/**\n * ID транспортной компания (наименование) (ID берем из запроса - transport_carrier)\n */\n'carrier_desc'?: string;\n\n/**\n * ID маршрута (ID берем из запроса - direction_route)\n */\n'route_id'?: number;\n\n/**\n * Наименование маршрута\n */\n'route_name': string;\n\n/**\n * Расписание\n */\n'departure_schedule': Array<string>;\n\n/**\n * Свободные места\n */\n'nearest_flight': Array<string>;\n\n/**\n * Время транзита\n */\n'transit_time': {\n\n/**\n * Время транзита От\n */\n'from': number;\n\n/**\n * Время транзита До\n */\n'to': number;\n};\n\n/**\n * Тип ставки\n */\n'rate_type': 'detail' | 'single';\n\n/**\n * Сумма\n */\n'total_cost'?: number;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Включение прибыли (Profit is included)\n */\n'profit_include'?: boolean;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestRateCustomsSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRatePointList()` */\n  static readonly RequestRatePointListPath = '/request_rate_point_list';\n\n  /**\n   * Ставки запроса Складские (СВХ).\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRatePointList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRatePointList$Response(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Аэропорт\n */\n'point': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Адрес СВХ\n */\n'svh_address'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Широта\n */\n'lat'?: string;\n\n/**\n * Долгота\n */\n'long'?: string;\n\n/**\n * График работы (будни)\n */\n'schedule_work'?: string;\n\n/**\n * График работы (вых.)\n */\n'schedule_weekend_work'?: string;\n};\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Вид рейса\n */\n'point_action': {\n\n/**\n * Наименование\n */\n'name': string;\n};\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text'?: string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRatePointListPath, 'get');\n    if (params) {\n      rb.query('request_id', params.request_id, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * Запрос\n         */\n        'request': {\n        \n        /**\n         * Кол-во мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Объем, м3\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Оплачиваемый вес, кг\n         */\n        'cargo_places_paid_weight'?: number;\n        };\n        \n        /**\n         * ID контрагента (ID берем из запроса - contractor_list)\n         */\n        'contractor_id': number;\n        \n        /**\n         * Подрядчик\n         */\n        'contractor': {\n        \n        /**\n         * Подрядчик\n         */\n        'name': string;\n        \n        /**\n         * Агент транспортной компании\n         */\n        'carrier_name'?: string;\n        \n        /**\n         * Агент транспортной компании (ID берем из запроса - transport_carrier)\n         */\n        'carrier_id'?: number;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps_text'?: string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps'?: number;\n        \n        /**\n         * Участие в торгах (общее количество)\n         */\n        'trade_count'?: number;\n        \n        /**\n         * Количество выигранных торгов\n         */\n        'trade_success_count'?: number;\n        \n        /**\n         * % выигранных торгов\n         */\n        'trade_success_percent'?: number;\n        \n        /**\n         * Количество проигранных торгов\n         */\n        'trade_fail_count'?: number;\n        \n        /**\n         * % проигранных торгов\n         */\n        'trade_fail_percent'?: number;\n        \n        /**\n         * Участие в торгах (результаты)\n         */\n        'trade_count_text'?: number;\n        \n        /**\n         * Email\n         */\n        'email'?: string;\n        \n        /**\n         * Телефон\n         */\n        'phone'?: string;\n        };\n        \n        /**\n         * ID аэропорта\n         */\n        'point_id': number;\n        \n        /**\n         * Аэропорт\n         */\n        'point': {\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Адрес\n         */\n        'address'?: string;\n        \n        /**\n         * Адрес СВХ\n         */\n        'svh_address'?: string;\n        \n        /**\n         * Сайт\n         */\n        'web'?: string;\n        \n        /**\n         * Широта\n         */\n        'lat'?: string;\n        \n        /**\n         * Долгота\n         */\n        'long'?: string;\n        \n        /**\n         * График работы (будни)\n         */\n        'schedule_work'?: string;\n        \n        /**\n         * График работы (вых.)\n         */\n        'schedule_weekend_work'?: string;\n        };\n        \n        /**\n         * Вид рейса\n         */\n        'point_action_id': number;\n        \n        /**\n         * Вид рейса\n         */\n        'point_action': {\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        };\n        \n        /**\n         * Значения ставок\n         */\n        'values': Array<{\n        \n        /**\n         * Наименование поля\n         */\n        'field': string;\n        \n        /**\n         * Минимальная цена\n         */\n        'min'?: number;\n        \n        /**\n         * Цена за единицу\n         */\n        'price': number;\n        \n        /**\n         * Количество\n         */\n        'value': number;\n        \n        /**\n         * Фиксированная надбавка\n         */\n        'fix'?: number;\n        \n        /**\n         * Комментарий\n         */\n        'comment'?: string;\n        \n        /**\n         * Признак выбора\n         */\n        'select'?: boolean;\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Стоимость\n         */\n        'cost': string;\n        \n        /**\n         * Стоимость\n         */\n        'cost_text': string;\n        }>;\n        \n        /**\n         * Наименование статей затрат\n         */\n        'service_items': string;\n        \n        /**\n         * Сумма\n         */\n        'total_cost': number;\n        \n        /**\n         * Сумма\n         */\n        'total_cost_text': string;\n        \n        /**\n         * Валюта\n         */\n        'currecy_text'?: string;\n        \n        /**\n         * Валюта (ID берем из запроса - system_currency)\n         */\n        'currency'?: number;\n        \n        /**\n         * Сводная информация\n         */\n        'summary_data': Array<{\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Значение\n         */\n        'value': string;\n        \n        /**\n         * Широкая колонка\n         */\n        'wide_row'?: boolean;\n        }>;\n        \n        /**\n         * Комментарий (Your Comment)\n         */\n        'comment'?: string;\n        \n        /**\n         * В итоговом\n         */\n        'selected'?: boolean;\n        \n        /**\n         * В коммерческом предложении\n         */\n        'offer'?: boolean;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки запроса Складские (СВХ).\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRatePointList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRatePointList(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Аэропорт\n */\n'point': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Адрес СВХ\n */\n'svh_address'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Широта\n */\n'lat'?: string;\n\n/**\n * Долгота\n */\n'long'?: string;\n\n/**\n * График работы (будни)\n */\n'schedule_work'?: string;\n\n/**\n * График работы (вых.)\n */\n'schedule_weekend_work'?: string;\n};\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Вид рейса\n */\n'point_action': {\n\n/**\n * Наименование\n */\n'name': string;\n};\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text'?: string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}> {\n    return this.requestRatePointList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Аэропорт\n */\n'point': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Адрес СВХ\n */\n'svh_address'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Широта\n */\n'lat'?: string;\n\n/**\n * Долгота\n */\n'long'?: string;\n\n/**\n * График работы (будни)\n */\n'schedule_work'?: string;\n\n/**\n * График работы (вых.)\n */\n'schedule_weekend_work'?: string;\n};\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Вид рейса\n */\n'point_action': {\n\n/**\n * Наименование\n */\n'name': string;\n};\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text'?: string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Аэропорт\n */\n'point': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Адрес\n */\n'address'?: string;\n\n/**\n * Адрес СВХ\n */\n'svh_address'?: string;\n\n/**\n * Сайт\n */\n'web'?: string;\n\n/**\n * Широта\n */\n'lat'?: string;\n\n/**\n * Долгота\n */\n'long'?: string;\n\n/**\n * График работы (будни)\n */\n'schedule_work'?: string;\n\n/**\n * График работы (вых.)\n */\n'schedule_weekend_work'?: string;\n};\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Вид рейса\n */\n'point_action': {\n\n/**\n * Наименование\n */\n'name': string;\n};\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text'?: string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRatePointSave()` */\n  static readonly RequestRatePointSavePath = '/request_rate_point_save';\n\n  /**\n   * Ставки запроса Складские (СВХ).\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRatePointSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRatePointSave$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRatePointSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки запроса Складские (СВХ).\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRatePointSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRatePointSave(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Минимальная цена\n */\n'min'?: number;\n\n/**\n * Цена за единицу\n */\n'price': number;\n\n/**\n * Количество\n */\n'value': number;\n\n/**\n * Фиксированная надбавка\n */\n'fix'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n}>;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Комментарий (Your Comment)\n */\n'comment'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestRatePointSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateTransporterList()` */\n  static readonly RequestRateTransporterListPath = '/request_rate_transporter_list';\n\n  /**\n   * Ставки запроса Вывоз.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateTransporterList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateTransporterList$Response(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Аэропорт\n */\n'point': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Адрес\n */\n'address'?: string;\n};\n\n/**\n * Город отправки\n */\n'departure_city': {\n};\n\n/**\n * Город прибытия\n */\n'arrival_city': {\n};\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Вид рейса\n */\n'point_action': {\n\n/**\n * Наименование\n */\n'name': string;\n};\n\n/**\n * Срок (дней), от\n */\n'days_min'?: string;\n\n/**\n * Срок (дней), до\n */\n'days_max'?: string;\n\n/**\n * Срок, дн.\n */\n'period'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Доставки\n */\n'values': Array<{\n\n/**\n * Тип транспорта\n */\n'kind_id': number;\n\n/**\n * Город убытия\n */\n'departure_city_id': number;\n\n/**\n * Город прибытия\n */\n'arrival_city_id': number;\n\n/**\n * Время транзита мин., дней\n */\n'days_min': number;\n\n/**\n * Время транзита макс., дней\n */\n'days_max': number;\n\n/**\n * Сумма за перевозку\n */\n'amount': number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Тип транспорта\n */\n'kind': {\n};\n\n/**\n * Город убытия\n */\n'departure_city': {\n};\n\n/**\n * Город прибытия\n */\n'arrival_city': {\n};\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование этапов доставки\n */\n'service_items': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text': string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateTransporterListPath, 'get');\n    if (params) {\n      rb.query('request_id', params.request_id, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * Запрос\n         */\n        'request': {\n        \n        /**\n         * Кол-во мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Объем, м3\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Оплачиваемый вес, кг\n         */\n        'cargo_places_paid_weight'?: number;\n        };\n        \n        /**\n         * ID контрагента (ID берем из запроса - contractor_list)\n         */\n        'contractor_id': number;\n        \n        /**\n         * Подрядчик\n         */\n        'contractor': {\n        \n        /**\n         * Подрядчик\n         */\n        'name': string;\n        \n        /**\n         * Агент транспортной компании\n         */\n        'carrier_name'?: string;\n        \n        /**\n         * Агент транспортной компании (ID берем из запроса - transport_carrier)\n         */\n        'carrier_id'?: number;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps_text'?: string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps'?: number;\n        \n        /**\n         * Участие в торгах (общее количество)\n         */\n        'trade_count'?: number;\n        \n        /**\n         * Количество выигранных торгов\n         */\n        'trade_success_count'?: number;\n        \n        /**\n         * % выигранных торгов\n         */\n        'trade_success_percent'?: number;\n        \n        /**\n         * Количество проигранных торгов\n         */\n        'trade_fail_count'?: number;\n        \n        /**\n         * % проигранных торгов\n         */\n        'trade_fail_percent'?: number;\n        \n        /**\n         * Участие в торгах (результаты)\n         */\n        'trade_count_text'?: number;\n        \n        /**\n         * Email\n         */\n        'email'?: string;\n        \n        /**\n         * Телефон\n         */\n        'phone'?: string;\n        };\n        \n        /**\n         * ID аэропорта\n         */\n        'point_id': number;\n        \n        /**\n         * Аэропорт\n         */\n        'point': {\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Адрес\n         */\n        'address'?: string;\n        };\n        \n        /**\n         * Город отправки\n         */\n        'departure_city': {\n        };\n        \n        /**\n         * Город прибытия\n         */\n        'arrival_city': {\n        };\n        \n        /**\n         * Вид рейса\n         */\n        'point_action_id': number;\n        \n        /**\n         * Вид рейса\n         */\n        'point_action': {\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        };\n        \n        /**\n         * Срок (дней), от\n         */\n        'days_min'?: string;\n        \n        /**\n         * Срок (дней), до\n         */\n        'days_max'?: string;\n        \n        /**\n         * Срок, дн.\n         */\n        'period'?: string;\n        \n        /**\n         * Комментарий\n         */\n        'comment'?: string;\n        \n        /**\n         * Доставки\n         */\n        'values': Array<{\n        \n        /**\n         * Тип транспорта\n         */\n        'kind_id': number;\n        \n        /**\n         * Город убытия\n         */\n        'departure_city_id': number;\n        \n        /**\n         * Город прибытия\n         */\n        'arrival_city_id': number;\n        \n        /**\n         * Время транзита мин., дней\n         */\n        'days_min': number;\n        \n        /**\n         * Время транзита макс., дней\n         */\n        'days_max': number;\n        \n        /**\n         * Сумма за перевозку\n         */\n        'amount': number;\n        \n        /**\n         * Комментарий\n         */\n        'comment'?: string;\n        \n        /**\n         * Тип транспорта\n         */\n        'kind': {\n        };\n        \n        /**\n         * Город убытия\n         */\n        'departure_city': {\n        };\n        \n        /**\n         * Город прибытия\n         */\n        'arrival_city': {\n        };\n        \n        /**\n         * Стоимость\n         */\n        'cost': string;\n        \n        /**\n         * Стоимость\n         */\n        'cost_text': string;\n        }>;\n        \n        /**\n         * Наименование этапов доставки\n         */\n        'service_items': string;\n        \n        /**\n         * Сумма\n         */\n        'total_cost': number;\n        \n        /**\n         * Сумма\n         */\n        'total_cost_text': string;\n        \n        /**\n         * Валюта\n         */\n        'currecy_text': string;\n        \n        /**\n         * Валюта (ID берем из запроса - system_currency)\n         */\n        'currency'?: number;\n        \n        /**\n         * Сводная информация\n         */\n        'summary_data': Array<{\n        \n        /**\n         * Наименование\n         */\n        'name': string;\n        \n        /**\n         * Значение\n         */\n        'value': string;\n        \n        /**\n         * Широкая колонка\n         */\n        'wide_row'?: boolean;\n        }>;\n        \n        /**\n         * В итоговом\n         */\n        'selected'?: boolean;\n        \n        /**\n         * В коммерческом предложении\n         */\n        'offer'?: boolean;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки запроса Вывоз.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateTransporterList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateTransporterList(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Аэропорт\n */\n'point': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Адрес\n */\n'address'?: string;\n};\n\n/**\n * Город отправки\n */\n'departure_city': {\n};\n\n/**\n * Город прибытия\n */\n'arrival_city': {\n};\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Вид рейса\n */\n'point_action': {\n\n/**\n * Наименование\n */\n'name': string;\n};\n\n/**\n * Срок (дней), от\n */\n'days_min'?: string;\n\n/**\n * Срок (дней), до\n */\n'days_max'?: string;\n\n/**\n * Срок, дн.\n */\n'period'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Доставки\n */\n'values': Array<{\n\n/**\n * Тип транспорта\n */\n'kind_id': number;\n\n/**\n * Город убытия\n */\n'departure_city_id': number;\n\n/**\n * Город прибытия\n */\n'arrival_city_id': number;\n\n/**\n * Время транзита мин., дней\n */\n'days_min': number;\n\n/**\n * Время транзита макс., дней\n */\n'days_max': number;\n\n/**\n * Сумма за перевозку\n */\n'amount': number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Тип транспорта\n */\n'kind': {\n};\n\n/**\n * Город убытия\n */\n'departure_city': {\n};\n\n/**\n * Город прибытия\n */\n'arrival_city': {\n};\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование этапов доставки\n */\n'service_items': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text': string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}> {\n    return this.requestRateTransporterList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Аэропорт\n */\n'point': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Адрес\n */\n'address'?: string;\n};\n\n/**\n * Город отправки\n */\n'departure_city': {\n};\n\n/**\n * Город прибытия\n */\n'arrival_city': {\n};\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Вид рейса\n */\n'point_action': {\n\n/**\n * Наименование\n */\n'name': string;\n};\n\n/**\n * Срок (дней), от\n */\n'days_min'?: string;\n\n/**\n * Срок (дней), до\n */\n'days_max'?: string;\n\n/**\n * Срок, дн.\n */\n'period'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Доставки\n */\n'values': Array<{\n\n/**\n * Тип транспорта\n */\n'kind_id': number;\n\n/**\n * Город убытия\n */\n'departure_city_id': number;\n\n/**\n * Город прибытия\n */\n'arrival_city_id': number;\n\n/**\n * Время транзита мин., дней\n */\n'days_min': number;\n\n/**\n * Время транзита макс., дней\n */\n'days_max': number;\n\n/**\n * Сумма за перевозку\n */\n'amount': number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Тип транспорта\n */\n'kind': {\n};\n\n/**\n * Город убытия\n */\n'departure_city': {\n};\n\n/**\n * Город прибытия\n */\n'arrival_city': {\n};\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование этапов доставки\n */\n'service_items': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text': string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Аэропорт\n */\n'point': {\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Адрес\n */\n'address'?: string;\n};\n\n/**\n * Город отправки\n */\n'departure_city': {\n};\n\n/**\n * Город прибытия\n */\n'arrival_city': {\n};\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Вид рейса\n */\n'point_action': {\n\n/**\n * Наименование\n */\n'name': string;\n};\n\n/**\n * Срок (дней), от\n */\n'days_min'?: string;\n\n/**\n * Срок (дней), до\n */\n'days_max'?: string;\n\n/**\n * Срок, дн.\n */\n'period'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Доставки\n */\n'values': Array<{\n\n/**\n * Тип транспорта\n */\n'kind_id': number;\n\n/**\n * Город убытия\n */\n'departure_city_id': number;\n\n/**\n * Город прибытия\n */\n'arrival_city_id': number;\n\n/**\n * Время транзита мин., дней\n */\n'days_min': number;\n\n/**\n * Время транзита макс., дней\n */\n'days_max': number;\n\n/**\n * Сумма за перевозку\n */\n'amount': number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Тип транспорта\n */\n'kind': {\n};\n\n/**\n * Город убытия\n */\n'departure_city': {\n};\n\n/**\n * Город прибытия\n */\n'arrival_city': {\n};\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n}>;\n\n/**\n * Наименование этапов доставки\n */\n'service_items': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта\n */\n'currecy_text': string;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * Сводная информация\n */\n'summary_data': Array<{\n\n/**\n * Наименование\n */\n'name': string;\n\n/**\n * Значение\n */\n'value': string;\n\n/**\n * Широкая колонка\n */\n'wide_row'?: boolean;\n}>;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateTransporterSave()` */\n  static readonly RequestRateTransporterSavePath = '/request_rate_transporter_save';\n\n  /**\n   * Ставка запроса Вывоз.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateTransporterSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateTransporterSave$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Доставки\n */\n'values': Array<{\n\n/**\n * Тип транспорта\n */\n'kind_id': number;\n\n/**\n * Город убытия\n */\n'departure_city_id': number;\n\n/**\n * Город прибытия\n */\n'arrival_city_id': number;\n\n/**\n * Время транзита мин., дней\n */\n'days_min': number;\n\n/**\n * Время транзита макс., дней\n */\n'days_max': number;\n\n/**\n * Сумма за перевозку\n */\n'amount': number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n}>;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateTransporterSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставка запроса Вывоз.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateTransporterSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateTransporterSave(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * ID контрагента (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * ID аэропорта\n */\n'point_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id': number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Доставки\n */\n'values': Array<{\n\n/**\n * Тип транспорта\n */\n'kind_id': number;\n\n/**\n * Город убытия\n */\n'departure_city_id': number;\n\n/**\n * Город прибытия\n */\n'arrival_city_id': number;\n\n/**\n * Время транзита мин., дней\n */\n'days_min': number;\n\n/**\n * Время транзита макс., дней\n */\n'days_max': number;\n\n/**\n * Сумма за перевозку\n */\n'amount': number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n}>;\n\n/**\n * Валюта (ID берем из запроса - system_currency)\n */\n'currency'?: number;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestRateTransporterSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateFinalList()` */\n  static readonly RequestRateFinalListPath = '/request_rate_final_list';\n\n  /**\n   * Ставки итоговые.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateFinalList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateFinalList$Response(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'time_request' | 'total_cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Ставка до границы\n */\n'custom_id': number;\n\n/**\n * Ставка до границы\n */\n'custom': {\n};\n\n/**\n * ID Ставка СВХ\n */\n'storage_id': number;\n\n/**\n * Ставка СВХ\n */\n'storage': {\n};\n\n/**\n * ID Ставка доставки\n */\n'delivery_id': number;\n\n/**\n * Ставка доставки\n */\n'delivery': {\n};\n\n/**\n * ID других услуг\n */\n'other_id': number;\n\n/**\n * Другие услуги\n */\n'other': {\n};\n\n/**\n * Итого: До границы\n */\n'customs_rate': string;\n\n/**\n * Итого: Перевозка\n */\n'delivery_rate': string;\n\n/**\n * Итого: СВХ\n */\n'svh_rate': string;\n\n/**\n * Итого: Локальные\n */\n'local_rate': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Маршрут\n */\n'route_text': string;\n\n/**\n * Срок (дней), от\n */\n'days_min'?: string;\n\n/**\n * Срок (дней), до\n */\n'days_max'?: string;\n\n/**\n * Срок, дн.\n */\n'period'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateFinalListPath, 'get');\n    if (params) {\n      rb.query('request_id', params.request_id, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * ID Ставка до границы\n         */\n        'custom_id': number;\n        \n        /**\n         * Ставка до границы\n         */\n        'custom': {\n        };\n        \n        /**\n         * ID Ставка СВХ\n         */\n        'storage_id': number;\n        \n        /**\n         * Ставка СВХ\n         */\n        'storage': {\n        };\n        \n        /**\n         * ID Ставка доставки\n         */\n        'delivery_id': number;\n        \n        /**\n         * Ставка доставки\n         */\n        'delivery': {\n        };\n        \n        /**\n         * ID других услуг\n         */\n        'other_id': number;\n        \n        /**\n         * Другие услуги\n         */\n        'other': {\n        };\n        \n        /**\n         * Итого: До границы\n         */\n        'customs_rate': string;\n        \n        /**\n         * Итого: Перевозка\n         */\n        'delivery_rate': string;\n        \n        /**\n         * Итого: СВХ\n         */\n        'svh_rate': string;\n        \n        /**\n         * Итого: Локальные\n         */\n        'local_rate': string;\n        \n        /**\n         * Сумма\n         */\n        'total_cost': number;\n        \n        /**\n         * Сумма\n         */\n        'total_cost_text': string;\n        \n        /**\n         * Маршрут\n         */\n        'route_text': string;\n        \n        /**\n         * Срок (дней), от\n         */\n        'days_min'?: string;\n        \n        /**\n         * Срок (дней), до\n         */\n        'days_max'?: string;\n        \n        /**\n         * Срок, дн.\n         */\n        'period'?: string;\n        \n        /**\n         * В итоговом\n         */\n        'selected'?: boolean;\n        \n        /**\n         * В коммерческом предложении\n         */\n        'offer'?: boolean;\n        \n        /**\n         * Класс строки\n         */\n        'row_class'?: string;\n        \n        /**\n         * Класс ячейки\n         */\n        'cell_class'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки итоговые.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateFinalList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateFinalList(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'time_request' | 'total_cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Ставка до границы\n */\n'custom_id': number;\n\n/**\n * Ставка до границы\n */\n'custom': {\n};\n\n/**\n * ID Ставка СВХ\n */\n'storage_id': number;\n\n/**\n * Ставка СВХ\n */\n'storage': {\n};\n\n/**\n * ID Ставка доставки\n */\n'delivery_id': number;\n\n/**\n * Ставка доставки\n */\n'delivery': {\n};\n\n/**\n * ID других услуг\n */\n'other_id': number;\n\n/**\n * Другие услуги\n */\n'other': {\n};\n\n/**\n * Итого: До границы\n */\n'customs_rate': string;\n\n/**\n * Итого: Перевозка\n */\n'delivery_rate': string;\n\n/**\n * Итого: СВХ\n */\n'svh_rate': string;\n\n/**\n * Итого: Локальные\n */\n'local_rate': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Маршрут\n */\n'route_text': string;\n\n/**\n * Срок (дней), от\n */\n'days_min'?: string;\n\n/**\n * Срок (дней), до\n */\n'days_max'?: string;\n\n/**\n * Срок, дн.\n */\n'period'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n}>;\n}> {\n    return this.requestRateFinalList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Ставка до границы\n */\n'custom_id': number;\n\n/**\n * Ставка до границы\n */\n'custom': {\n};\n\n/**\n * ID Ставка СВХ\n */\n'storage_id': number;\n\n/**\n * Ставка СВХ\n */\n'storage': {\n};\n\n/**\n * ID Ставка доставки\n */\n'delivery_id': number;\n\n/**\n * Ставка доставки\n */\n'delivery': {\n};\n\n/**\n * ID других услуг\n */\n'other_id': number;\n\n/**\n * Другие услуги\n */\n'other': {\n};\n\n/**\n * Итого: До границы\n */\n'customs_rate': string;\n\n/**\n * Итого: Перевозка\n */\n'delivery_rate': string;\n\n/**\n * Итого: СВХ\n */\n'svh_rate': string;\n\n/**\n * Итого: Локальные\n */\n'local_rate': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Маршрут\n */\n'route_text': string;\n\n/**\n * Срок (дней), от\n */\n'days_min'?: string;\n\n/**\n * Срок (дней), до\n */\n'days_max'?: string;\n\n/**\n * Срок, дн.\n */\n'period'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Ставка до границы\n */\n'custom_id': number;\n\n/**\n * Ставка до границы\n */\n'custom': {\n};\n\n/**\n * ID Ставка СВХ\n */\n'storage_id': number;\n\n/**\n * Ставка СВХ\n */\n'storage': {\n};\n\n/**\n * ID Ставка доставки\n */\n'delivery_id': number;\n\n/**\n * Ставка доставки\n */\n'delivery': {\n};\n\n/**\n * ID других услуг\n */\n'other_id': number;\n\n/**\n * Другие услуги\n */\n'other': {\n};\n\n/**\n * Итого: До границы\n */\n'customs_rate': string;\n\n/**\n * Итого: Перевозка\n */\n'delivery_rate': string;\n\n/**\n * Итого: СВХ\n */\n'svh_rate': string;\n\n/**\n * Итого: Локальные\n */\n'local_rate': string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Маршрут\n */\n'route_text': string;\n\n/**\n * Срок (дней), от\n */\n'days_min'?: string;\n\n/**\n * Срок (дней), до\n */\n'days_max'?: string;\n\n/**\n * Срок, дн.\n */\n'period'?: string;\n\n/**\n * В итоговом\n */\n'selected'?: boolean;\n\n/**\n * В коммерческом предложении\n */\n'offer'?: boolean;\n\n/**\n * Класс строки\n */\n'row_class'?: string;\n\n/**\n * Класс ячейки\n */\n'cell_class'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateFinaleDelete()` */\n  static readonly RequestRateFinaleDeletePath = '/request_rate_finale_delete';\n\n  /**\n   * Удаление финальные пересечения ставок.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateFinaleDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateFinaleDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateFinaleDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление финальные пересечения ставок.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateFinaleDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateFinaleDelete(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestRateFinaleDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateOtherList()` */\n  static readonly RequestRateOtherListPath = '/request_rate_other_list';\n\n  /**\n   * Ставки запроса Другие.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateOtherList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateOtherList$Response(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта приведенная\n */\n'currency'?: number;\n\n/**\n * Валюта приведенная\n */\n'currency_text'?: string;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Стоимость услуги\n */\n'price': number;\n\n/**\n * Стоимость услуги\n */\n'price_text': string;\n\n/**\n * Количество\n */\n'count'?: number;\n\n/**\n * Количество\n */\n'count_text'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Подрядчик (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id'?: number;\n\n/**\n * Город\n */\n'city_id': number;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Наименование услуги\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n\n/**\n * Город\n */\n'city_name': string;\n\n/**\n * Вид рейса\n */\n'point_action'?: string;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * ID подрядчика (ID берем из запроса - contractor_list)\n */\n'id': number;\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items'?: string;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Стоимость товаров\n */\n'cargo_cost'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n};\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateOtherListPath, 'get');\n    if (params) {\n      rb.query('request_id', params.request_id, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n      rb.query('filter', params.filter, {});\n      rb.query('sort', params.sort, {\"style\":\"form\",\"explode\":false});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * Примечание\n         */\n        'comment'?: string;\n        \n        /**\n         * Сумма\n         */\n        'total_cost': number;\n        \n        /**\n         * Сумма\n         */\n        'total_cost_text': string;\n        \n        /**\n         * Валюта приведенная\n         */\n        'currency'?: number;\n        \n        /**\n         * Валюта приведенная\n         */\n        'currency_text'?: string;\n        \n        /**\n         * Значения ставок\n         */\n        'values': Array<{\n        \n        /**\n         * Наименование поля\n         */\n        'field': string;\n        \n        /**\n         * Стоимость услуги\n         */\n        'price': number;\n        \n        /**\n         * Стоимость услуги\n         */\n        'price_text': string;\n        \n        /**\n         * Количество\n         */\n        'count'?: number;\n        \n        /**\n         * Количество\n         */\n        'count_text'?: string;\n        \n        /**\n         * Комментарий\n         */\n        'comment'?: string;\n        \n        /**\n         * Признак выбора\n         */\n        'select'?: boolean;\n        \n        /**\n         * Подрядчик (ID берем из запроса - contractor_list)\n         */\n        'contractor_id': number;\n        \n        /**\n         * Вид рейса\n         */\n        'point_action_id'?: number;\n        \n        /**\n         * Город\n         */\n        'city_id': number;\n        \n        /**\n         * Валюта\n         */\n        'currency': number;\n        \n        /**\n         * Наименование услуги\n         */\n        'name': string;\n        \n        /**\n         * Стоимость\n         */\n        'cost': string;\n        \n        /**\n         * Стоимость\n         */\n        'cost_text': string;\n        \n        /**\n         * Город\n         */\n        'city_name': string;\n        \n        /**\n         * Вид рейса\n         */\n        'point_action'?: string;\n        \n        /**\n         * Подрядчик\n         */\n        'contractor': {\n        \n        /**\n         * Агент транспортной компании\n         */\n        'carrier_name'?: string;\n        \n        /**\n         * Агент транспортной компании (ID берем из запроса - transport_carrier)\n         */\n        'carrier_id'?: number;\n        \n        /**\n         * ID подрядчика (ID берем из запроса - contractor_list)\n         */\n        'id': number;\n        \n        /**\n         * Подрядчик\n         */\n        'name': string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps_text'?: string;\n        \n        /**\n         * Рейтинг в системе (NPS)\n         */\n        'rating_nps'?: number;\n        \n        /**\n         * Участие в торгах (общее количество)\n         */\n        'trade_count'?: number;\n        \n        /**\n         * Количество выигранных торгов\n         */\n        'trade_success_count'?: number;\n        \n        /**\n         * % выигранных торгов\n         */\n        'trade_success_percent'?: number;\n        \n        /**\n         * Количество проигранных торгов\n         */\n        'trade_fail_count'?: number;\n        \n        /**\n         * % проигранных торгов\n         */\n        'trade_fail_percent'?: number;\n        \n        /**\n         * Участие в торгах (результаты)\n         */\n        'trade_count_text'?: number;\n        \n        /**\n         * Email\n         */\n        'email'?: string;\n        \n        /**\n         * Телефон\n         */\n        'phone'?: string;\n        };\n        }>;\n        \n        /**\n         * Наименование статей затрат\n         */\n        'service_items'?: string;\n        \n        /**\n         * Запрос\n         */\n        'request': {\n        \n        /**\n         * Кол-во мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Оплачиваемый вес, кг\n         */\n        'cargo_places_paid_weight'?: number;\n        \n        /**\n         * Объем, м3\n         */\n        'cargo_places_volume'?: number;\n        \n        /**\n         * Стоимость товаров\n         */\n        'cargo_cost'?: number;\n        \n        /**\n         * Дата запроса\n         */\n        'time_request'?: string;\n        };\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки запроса Другие.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateOtherList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestRateOtherList(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n\n    /**\n     * Фильтр\n     */\n      filter?: {\n};\n\n    /**\n     * Сортировка\n     */\n      sort?: Array<{\n\n/**\n * Поле сортировки\n */\n'field'?: 'cost';\n\n/**\n * Направление сортировки\n */\n'dir'?: 'asc' | 'desc';\n}>;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта приведенная\n */\n'currency'?: number;\n\n/**\n * Валюта приведенная\n */\n'currency_text'?: string;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Стоимость услуги\n */\n'price': number;\n\n/**\n * Стоимость услуги\n */\n'price_text': string;\n\n/**\n * Количество\n */\n'count'?: number;\n\n/**\n * Количество\n */\n'count_text'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Подрядчик (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id'?: number;\n\n/**\n * Город\n */\n'city_id': number;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Наименование услуги\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n\n/**\n * Город\n */\n'city_name': string;\n\n/**\n * Вид рейса\n */\n'point_action'?: string;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * ID подрядчика (ID берем из запроса - contractor_list)\n */\n'id': number;\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items'?: string;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Стоимость товаров\n */\n'cargo_cost'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n};\n}>;\n}> {\n    return this.requestRateOtherList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта приведенная\n */\n'currency'?: number;\n\n/**\n * Валюта приведенная\n */\n'currency_text'?: string;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Стоимость услуги\n */\n'price': number;\n\n/**\n * Стоимость услуги\n */\n'price_text': string;\n\n/**\n * Количество\n */\n'count'?: number;\n\n/**\n * Количество\n */\n'count_text'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Подрядчик (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id'?: number;\n\n/**\n * Город\n */\n'city_id': number;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Наименование услуги\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n\n/**\n * Город\n */\n'city_name': string;\n\n/**\n * Вид рейса\n */\n'point_action'?: string;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * ID подрядчика (ID берем из запроса - contractor_list)\n */\n'id': number;\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items'?: string;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Стоимость товаров\n */\n'cargo_cost'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n};\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * Сумма\n */\n'total_cost': number;\n\n/**\n * Сумма\n */\n'total_cost_text': string;\n\n/**\n * Валюта приведенная\n */\n'currency'?: number;\n\n/**\n * Валюта приведенная\n */\n'currency_text'?: string;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Стоимость услуги\n */\n'price': number;\n\n/**\n * Стоимость услуги\n */\n'price_text': string;\n\n/**\n * Количество\n */\n'count'?: number;\n\n/**\n * Количество\n */\n'count_text'?: string;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Подрядчик (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id'?: number;\n\n/**\n * Город\n */\n'city_id': number;\n\n/**\n * Валюта\n */\n'currency': number;\n\n/**\n * Наименование услуги\n */\n'name': string;\n\n/**\n * Стоимость\n */\n'cost': string;\n\n/**\n * Стоимость\n */\n'cost_text': string;\n\n/**\n * Город\n */\n'city_name': string;\n\n/**\n * Вид рейса\n */\n'point_action'?: string;\n\n/**\n * Подрядчик\n */\n'contractor': {\n\n/**\n * Агент транспортной компании\n */\n'carrier_name'?: string;\n\n/**\n * Агент транспортной компании (ID берем из запроса - transport_carrier)\n */\n'carrier_id'?: number;\n\n/**\n * ID подрядчика (ID берем из запроса - contractor_list)\n */\n'id': number;\n\n/**\n * Подрядчик\n */\n'name': string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps_text'?: string;\n\n/**\n * Рейтинг в системе (NPS)\n */\n'rating_nps'?: number;\n\n/**\n * Участие в торгах (общее количество)\n */\n'trade_count'?: number;\n\n/**\n * Количество выигранных торгов\n */\n'trade_success_count'?: number;\n\n/**\n * % выигранных торгов\n */\n'trade_success_percent'?: number;\n\n/**\n * Количество проигранных торгов\n */\n'trade_fail_count'?: number;\n\n/**\n * % проигранных торгов\n */\n'trade_fail_percent'?: number;\n\n/**\n * Участие в торгах (результаты)\n */\n'trade_count_text'?: number;\n\n/**\n * Email\n */\n'email'?: string;\n\n/**\n * Телефон\n */\n'phone'?: string;\n};\n}>;\n\n/**\n * Наименование статей затрат\n */\n'service_items'?: string;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n\n/**\n * Объем, м3\n */\n'cargo_places_volume'?: number;\n\n/**\n * Стоимость товаров\n */\n'cargo_cost'?: number;\n\n/**\n * Дата запроса\n */\n'time_request'?: string;\n};\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestRateOtherSave()` */\n  static readonly RequestRateOtherSavePath = '/request_rate_other_save';\n\n  /**\n   * Ставки запроса Другие.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestRateOtherSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateOtherSave$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Стоимость услуги\n */\n'price': number;\n\n/**\n * Количество\n */\n'count'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Подрядчик (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id'?: number;\n\n/**\n * Город\n */\n'city_id': number;\n\n/**\n * Валюта\n */\n'currency': number;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestRateOtherSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Ставки запроса Другие.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestRateOtherSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestRateOtherSave(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Примечание\n */\n'comment'?: string;\n\n/**\n * Значения ставок\n */\n'values': Array<{\n\n/**\n * Наименование поля\n */\n'field': string;\n\n/**\n * Стоимость услуги\n */\n'price': number;\n\n/**\n * Количество\n */\n'count'?: number;\n\n/**\n * Комментарий\n */\n'comment'?: string;\n\n/**\n * Признак выбора\n */\n'select'?: boolean;\n\n/**\n * Подрядчик (ID берем из запроса - contractor_list)\n */\n'contractor_id': number;\n\n/**\n * Вид рейса\n */\n'point_action_id'?: number;\n\n/**\n * Город\n */\n'city_id': number;\n\n/**\n * Валюта\n */\n'currency': number;\n}>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestRateOtherSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferList()` */\n  static readonly RequestOfferListPath = '/request_offer_list';\n\n  /**\n   * Коммерческие предложения.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferList$Response(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n\n/**\n * Примечание\n */\n'comment'?: string;\n}>;\n\n/**\n * Колонки\n */\n'columns'?: Array<string>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferListPath, 'get');\n    if (params) {\n      rb.query('request_id', params.request_id, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * UID\n         */\n        'uid': string;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * Запрос\n         */\n        'request': {\n        \n        /**\n         * Кол-во мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Оплачиваемый вес, кг\n         */\n        'cargo_places_paid_weight'?: number;\n        };\n        \n        /**\n         * Параметры профитов\n         */\n        'param': {\n        \n        /**\n         * Массив ставок До границы\n         */\n        'custom'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        \n        /**\n         * Массив ставок Склад (СВХ)\n         */\n        'storage'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        \n        /**\n         * Массив ставок Вывоз\n         */\n        'delivery'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        };\n        \n        /**\n         * Вх. ставка\n         */\n        'rate_amount'?: string;\n        \n        /**\n         * Вх. ставка\n         */\n        'rate_amount_text'?: string;\n        \n        /**\n         * Профит\n         */\n        'profit_amount'?: string;\n        \n        /**\n         * Профит\n         */\n        'profit_amount_text'?: string;\n        \n        /**\n         * %\n         */\n        'profit_percent'?: string;\n        \n        /**\n         * %\n         */\n        'profit_percent_text'?: string;\n        \n        /**\n         * Ставка итого\n         */\n        'rate_total'?: string;\n        \n        /**\n         * Ставка итого\n         */\n        'rate_total_text'?: string;\n        \n        /**\n         * Валидность\n         */\n        'valid'?: string;\n        \n        /**\n         * Валидность\n         */\n        'time_valid_text'?: string;\n        \n        /**\n         * Статус\n         */\n        'status'?: number;\n        \n        /**\n         * ID главного рейта: До границы\n         */\n        'custom_id'?: number;\n        \n        /**\n         * ID главного рейта: СВХ\n         */\n        'storage_id'?: number;\n        \n        /**\n         * ID главного рейта: Вывоз\n         */\n        'delivery_id'?: number;\n        \n        /**\n         * Статус\n         */\n        'status_text'?: string;\n        \n        /**\n         * Данные для формы\n         */\n        'form_data': {\n        \n        /**\n         * Статусы\n         */\n        'statuses': Array<string>;\n        };\n        \n        /**\n         * Примечание\n         */\n        'comment'?: string;\n        }>;\n        \n        /**\n         * Колонки\n         */\n        'columns'?: Array<string>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Коммерческие предложения.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferList(\n    params: {\n\n    /**\n     * ID Запроса\n     */\n      request_id: number;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n\n/**\n * Примечание\n */\n'comment'?: string;\n}>;\n\n/**\n * Колонки\n */\n'columns'?: Array<string>;\n}> {\n    return this.requestOfferList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n\n/**\n * Примечание\n */\n'comment'?: string;\n}>;\n\n/**\n * Колонки\n */\n'columns'?: Array<string>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n\n/**\n * Примечание\n */\n'comment'?: string;\n}>;\n\n/**\n * Колонки\n */\n'columns'?: Array<string>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferMake()` */\n  static readonly RequestOfferMakePath = '/request_offer_make';\n\n  /**\n   * Создание КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferMake()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferMake$Response(\n    params?: {\n      body?: {\n\n/**\n * ID сводных запросов\n */\n'id': Array<number>;\n\n/**\n * Тип запроса\n */\n'type'?: 'final' | 'custom' | 'svh' | 'delivery' | 'other';\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferMakePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Создание КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferMake$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferMake(\n    params?: {\n      body?: {\n\n/**\n * ID сводных запросов\n */\n'id': Array<number>;\n\n/**\n * Тип запроса\n */\n'type'?: 'final' | 'custom' | 'svh' | 'delivery' | 'other';\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestOfferMake$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferInfo()` */\n  static readonly RequestOfferInfoPath = '/request_offer_info';\n\n  /**\n   * Данны по КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferInfo()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferInfo$Response(\n    params: {\n\n    /**\n     * ID КП\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n\n/**\n * Примечание\n */\n'comment'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferInfoPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * UID\n         */\n        'uid': string;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * Запрос\n         */\n        'request': {\n        \n        /**\n         * Кол-во мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Оплачиваемый вес, кг\n         */\n        'cargo_places_paid_weight'?: number;\n        };\n        \n        /**\n         * Параметры профитов\n         */\n        'param': {\n        \n        /**\n         * Массив ставок До границы\n         */\n        'custom'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        \n        /**\n         * Массив ставок Склад (СВХ)\n         */\n        'storage'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        \n        /**\n         * Массив ставок Вывоз\n         */\n        'delivery'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        };\n        \n        /**\n         * Вх. ставка\n         */\n        'rate_amount'?: string;\n        \n        /**\n         * Вх. ставка\n         */\n        'rate_amount_text'?: string;\n        \n        /**\n         * Профит\n         */\n        'profit_amount'?: string;\n        \n        /**\n         * Профит\n         */\n        'profit_amount_text'?: string;\n        \n        /**\n         * %\n         */\n        'profit_percent'?: string;\n        \n        /**\n         * %\n         */\n        'profit_percent_text'?: string;\n        \n        /**\n         * Ставка итого\n         */\n        'rate_total'?: string;\n        \n        /**\n         * Ставка итого\n         */\n        'rate_total_text'?: string;\n        \n        /**\n         * Валидность\n         */\n        'valid'?: string;\n        \n        /**\n         * Валидность\n         */\n        'time_valid_text'?: string;\n        \n        /**\n         * Статус\n         */\n        'status'?: number;\n        \n        /**\n         * ID главного рейта: До границы\n         */\n        'custom_id'?: number;\n        \n        /**\n         * ID главного рейта: СВХ\n         */\n        'storage_id'?: number;\n        \n        /**\n         * ID главного рейта: Вывоз\n         */\n        'delivery_id'?: number;\n        \n        /**\n         * Статус\n         */\n        'status_text'?: string;\n        \n        /**\n         * Данные для формы\n         */\n        'form_data': {\n        \n        /**\n         * Статусы\n         */\n        'statuses': Array<string>;\n        };\n        \n        /**\n         * Примечание\n         */\n        'comment'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Данны по КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferInfo$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferInfo(\n    params: {\n\n    /**\n     * ID КП\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n\n/**\n * Примечание\n */\n'comment'?: string;\n}> {\n    return this.requestOfferInfo$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n\n/**\n * Примечание\n */\n'comment'?: string;\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n\n/**\n * Примечание\n */\n'comment'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferSave()` */\n  static readonly RequestOfferSavePath = '/request_offer_save';\n\n  /**\n   * Редактирование КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferSave$Response(\n    params?: {\n      body?: {\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Параметры профитов\n */\n'param'?: {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Примечание\n */\n'comment'?: string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Редактирование КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferSave(\n    params?: {\n      body?: {\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Параметры профитов\n */\n'param'?: {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Валидность\n */\n'valid'?: string;\n\n/**\n * Валидность\n */\n'time_valid_text'?: string;\n\n/**\n * Статус\n */\n'status'?: number;\n\n/**\n * ID главного рейта: До границы\n */\n'custom_id'?: number;\n\n/**\n * ID главного рейта: СВХ\n */\n'storage_id'?: number;\n\n/**\n * ID главного рейта: Вывоз\n */\n'delivery_id'?: number;\n\n/**\n * Примечание\n */\n'comment'?: string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestOfferSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferDelete()` */\n  static readonly RequestOfferDeletePath = '/request_offer_delete';\n\n  /**\n   * Удаление КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferDelete(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestOfferDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferTxt()` */\n  static readonly RequestOfferTxtPath = '/request_offer_txt';\n\n  /**\n   * Скачивание КП в формате TXT.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferTxt()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferTxt$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n\n/**\n * Текст\n */\n'text'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferTxtPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        \n        /**\n         * Текст\n         */\n        'text'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Скачивание КП в формате TXT.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferTxt$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferTxt(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n\n/**\n * Текст\n */\n'text'?: string;\n}> {\n    return this.requestOfferTxt$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n\n/**\n * Текст\n */\n'text'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n\n/**\n * Текст\n */\n'text'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferPdf()` */\n  static readonly RequestOfferPdfPath = '/request_offer_pdf';\n\n  /**\n   * Скачивание КП в формате PDF.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferPdf()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferPdf$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferPdfPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Base64 строка файла\n         */\n        'data'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Скачивание КП в формате PDF.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferPdf$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferPdf(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}> {\n    return this.requestOfferPdf$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n}>): {\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Base64 строка файла\n */\n'data'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferCalc()` */\n  static readonly RequestOfferCalcPath = '/request_offer_calc';\n\n  /**\n   * Расчет профита КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferCalc()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferCalc$Response(\n    params?: {\n      body?: {\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Параметры профитов\n */\n'param'?: {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferCalcPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * UID\n         */\n        'uid': string;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * ID Запроса\n         */\n        'request_id': number;\n        \n        /**\n         * Запрос\n         */\n        'request': {\n        \n        /**\n         * Кол-во мест\n         */\n        'cargo_places_count'?: number;\n        \n        /**\n         * Вес, кг\n         */\n        'cargo_places_weight'?: number;\n        \n        /**\n         * Плотность, кг/м3\n         */\n        'cargo_places_density'?: number;\n        \n        /**\n         * Оплачиваемый вес, кг\n         */\n        'cargo_places_paid_weight'?: number;\n        };\n        \n        /**\n         * Параметры профитов\n         */\n        'param': {\n        \n        /**\n         * Массив ставок До границы\n         */\n        'custom'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Признак изменения значения\n         */\n        'profit_changed'?: boolean;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Признак изменения значения\n         */\n        'profit_changed'?: boolean;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        \n        /**\n         * Массив ставок Склад (СВХ)\n         */\n        'storage'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Признак изменения значения\n         */\n        'profit_changed'?: boolean;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Признак изменения значения\n         */\n        'profit_changed'?: boolean;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        \n        /**\n         * Массив ставок Вывоз\n         */\n        'delivery'?: {\n        \n        /**\n         * Единый профит на все ставки\n         */\n        'one_profit'?: boolean;\n        \n        /**\n         * Единый профит на все ставки - Сумма\n         */\n        'one_profit_amount'?: number;\n        \n        /**\n         * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n         */\n        'one_profit_amount_currency'?: number;\n        \n        /**\n         * Единый профит на все ставки - Процент\n         */\n        'one_profit_percent'?: number;\n        \n        /**\n         * Детализировать ставку в КП\n         */\n        'detail_items'?: boolean;\n        \n        /**\n         * Ставки\n         */\n        'rows'?: Array<{\n        \n        /**\n         * ID ставки\n         */\n        'id'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Признак изменения значения\n         */\n        'profit_changed'?: boolean;\n        \n        /**\n         * Итого Входящее\n         */\n        'income_total_cost'?: number;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Главный рейт, использовать для итогового КП\n         */\n        'main'?: boolean;\n        \n        /**\n         * Услуги\n         */\n        'services'?: Array<{\n        \n        /**\n         * ID Услуги\n         */\n        'field'?: string;\n        \n        /**\n         * Стоимость\n         */\n        'amount'?: number;\n        \n        /**\n         * Профит - Сумма\n         */\n        'profit_amount'?: number;\n        \n        /**\n         * Профит - Процент\n         */\n        'profit_percent'?: number;\n        \n        /**\n         * Признак изменения значения\n         */\n        'profit_changed'?: boolean;\n        \n        /**\n         * Итого\n         */\n        'total_cost'?: number;\n        \n        /**\n         * Включено\n         */\n        'select'?: boolean;\n        }>;\n        }>;\n        };\n        };\n        \n        /**\n         * Вх. ставка\n         */\n        'rate_amount'?: string;\n        \n        /**\n         * Вх. ставка\n         */\n        'rate_amount_text'?: string;\n        \n        /**\n         * Профит\n         */\n        'profit_amount'?: string;\n        \n        /**\n         * Профит\n         */\n        'profit_amount_text'?: string;\n        \n        /**\n         * %\n         */\n        'profit_percent'?: string;\n        \n        /**\n         * %\n         */\n        'profit_percent_text'?: string;\n        \n        /**\n         * Ставка итого\n         */\n        'rate_total'?: string;\n        \n        /**\n         * Ставка итого\n         */\n        'rate_total_text'?: string;\n        \n        /**\n         * Статус\n         */\n        'status_text'?: string;\n        \n        /**\n         * Данные для формы\n         */\n        'form_data': {\n        \n        /**\n         * Статусы\n         */\n        'statuses': Array<string>;\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Расчет профита КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferCalc$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferCalc(\n    params?: {\n      body?: {\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Параметры профитов\n */\n'param'?: {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n}> {\n    return this.requestOfferCalc$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n}>): {\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * UID\n */\n'uid': string;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * ID Запроса\n */\n'request_id': number;\n\n/**\n * Запрос\n */\n'request': {\n\n/**\n * Кол-во мест\n */\n'cargo_places_count'?: number;\n\n/**\n * Вес, кг\n */\n'cargo_places_weight'?: number;\n\n/**\n * Плотность, кг/м3\n */\n'cargo_places_density'?: number;\n\n/**\n * Оплачиваемый вес, кг\n */\n'cargo_places_paid_weight'?: number;\n};\n\n/**\n * Параметры профитов\n */\n'param': {\n\n/**\n * Массив ставок До границы\n */\n'custom'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Склад (СВХ)\n */\n'storage'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n\n/**\n * Массив ставок Вывоз\n */\n'delivery'?: {\n\n/**\n * Единый профит на все ставки\n */\n'one_profit'?: boolean;\n\n/**\n * Единый профит на все ставки - Сумма\n */\n'one_profit_amount'?: number;\n\n/**\n * Единый профит на все ставки - Валюта (ID берем из запроса - system_currency)\n */\n'one_profit_amount_currency'?: number;\n\n/**\n * Единый профит на все ставки - Процент\n */\n'one_profit_percent'?: number;\n\n/**\n * Детализировать ставку в КП\n */\n'detail_items'?: boolean;\n\n/**\n * Ставки\n */\n'rows'?: Array<{\n\n/**\n * ID ставки\n */\n'id'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого Входящее\n */\n'income_total_cost'?: number;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Главный рейт, использовать для итогового КП\n */\n'main'?: boolean;\n\n/**\n * Услуги\n */\n'services'?: Array<{\n\n/**\n * ID Услуги\n */\n'field'?: string;\n\n/**\n * Стоимость\n */\n'amount'?: number;\n\n/**\n * Профит - Сумма\n */\n'profit_amount'?: number;\n\n/**\n * Профит - Процент\n */\n'profit_percent'?: number;\n\n/**\n * Признак изменения значения\n */\n'profit_changed'?: boolean;\n\n/**\n * Итого\n */\n'total_cost'?: number;\n\n/**\n * Включено\n */\n'select'?: boolean;\n}>;\n}>;\n};\n};\n\n/**\n * Вх. ставка\n */\n'rate_amount'?: string;\n\n/**\n * Вх. ставка\n */\n'rate_amount_text'?: string;\n\n/**\n * Профит\n */\n'profit_amount'?: string;\n\n/**\n * Профит\n */\n'profit_amount_text'?: string;\n\n/**\n * %\n */\n'profit_percent'?: string;\n\n/**\n * %\n */\n'profit_percent_text'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total'?: string;\n\n/**\n * Ставка итого\n */\n'rate_total_text'?: string;\n\n/**\n * Статус\n */\n'status_text'?: string;\n\n/**\n * Данные для формы\n */\n'form_data': {\n\n/**\n * Статусы\n */\n'statuses': Array<string>;\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferDelRate()` */\n  static readonly RequestOfferDelRatePath = '/request_offer_del_rate';\n\n  /**\n   * Удаление ставки из КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferDelRate()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferDelRate$Response(\n    params: {\n\n    /**\n     * ID\n     */\n      id: number;\n\n    /**\n     * ID ставки для удаления\n     */\n      rate_id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferDelRatePath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n      rb.query('rate_id', params.rate_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление ставки из КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferDelRate$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferDelRate(\n    params: {\n\n    /**\n     * ID\n     */\n      id: number;\n\n    /**\n     * ID ставки для удаления\n     */\n      rate_id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestOfferDelRate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferCopy()` */\n  static readonly RequestOfferCopyPath = '/request_offer_copy';\n\n  /**\n   * Копирование КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferCopy()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferCopy$Response(\n    params: {\n\n    /**\n     * ID\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferCopyPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Копирование КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferCopy$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferCopy(\n    params: {\n\n    /**\n     * ID\n     */\n      id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestOfferCopy$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferSend()` */\n  static readonly RequestOfferSendPath = '/request_offer_send';\n\n  /**\n   * Отправка КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferSend()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferSend$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'ids': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferSendPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Отправка КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferSend$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  requestOfferSend(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'ids': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestOfferSend$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferStatuses()` */\n  static readonly RequestOfferStatusesPath = '/request_offer_statuses';\n\n  /**\n   * Статусы КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferStatuses()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferStatuses$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferStatusesPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Статусы КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferStatuses$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferStatuses(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.requestOfferStatuses$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `requestOfferSetStatus()` */\n  static readonly RequestOfferSetStatusPath = '/request_offer_set_status';\n\n  /**\n   * Установка статуса КП.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `requestOfferSetStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferSetStatus$Response(\n    params: {\n\n    /**\n     * ID\n     */\n      id: number;\n\n    /**\n     * ID статуса\n     */\n      status_id: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, RequestService.RequestOfferSetStatusPath, 'get');\n    if (params) {\n      rb.query('id', params.id, {});\n      rb.query('status_id', params.status_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Установка статуса КП.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `requestOfferSetStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  requestOfferSetStatus(\n    params: {\n\n    /**\n     * ID\n     */\n      id: number;\n\n    /**\n     * ID статуса\n     */\n      status_id: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.requestOfferSetStatus$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Настройки\n */\n@Injectable({ providedIn: 'root' })\nexport class SettingsService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `settingsGet()` */\n  static readonly SettingsGetPath = '/settings_get';\n\n  /**\n   * Чтение настроек.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `settingsGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  settingsGet$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Общее: Язык интерфейса (ID берем из запроса - settings_get из поля language)\n */\n'lang'?: string;\n\n/**\n * Общее: Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Общее: Валюта №1 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_1'?: string;\n\n/**\n * Общее: Валюта №2 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_2'?: string;\n\n/**\n * Общее: Валюта №3 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_3'?: string;\n\n/**\n * Способы уведомления\n */\n'notify_type'?: Array<string>;\n\n/**\n * События для уведомлений\n */\n'notify_event'?: Array<string>;\n\n/**\n * Параметры для уведомлений\n */\n'notify_param'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов\n */\n'notify_change_tariff'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Интервал проверки изменения курсов, мин\n */\n'check_time_interval'?: number;\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Порог изменения, %\n */\n'threshold_of_change'?: number;\n};\n};\n\n/**\n * Брендирование: Логотип вашей компании, url\n */\n'branding_logo'?: string;\n\n/**\n * Брендирование: Имя файла логотипа\n */\n'branding_logo_name'?: string;\n\n/**\n * Брендирование: Использование брендовых цветов\n */\n'branding_colors'?: {\n};\n\n/**\n * Виды налогообложения\n */\n'tax'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Языки интерфейса\n */\n'language'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Курсы валют\n */\n'currency'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Временные зоны: список\n */\n'timezone_list'?: Array<{\n}>;\n\n/**\n * Способы уведомления: список\n */\n'notify_types_list'?: Array<{\n}>;\n\n/**\n * События для уведомлений: список\n */\n'notify_events_list'?: Array<{\n}>;\n\n/**\n * Объекты для разграничения доступа\n */\n'permission_objects'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Правила доступа\n */\n'permission_rules'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Значения варианта доступа\n */\n'permission_values'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Стартовая страница\n */\n'start_page'?: string;\n\n/**\n * Цвета\n */\n'colors'?: {\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, SettingsService.SettingsGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Общее: Язык интерфейса (ID берем из запроса - settings_get из поля language)\n         */\n        'lang'?: string;\n        \n        /**\n         * Общее: Часовой пояс\n         */\n        'timezone'?: string;\n        \n        /**\n         * Общее: Валюта №1 (ID берем из запроса - settings_get из поля currency)\n         */\n        'currency_1'?: string;\n        \n        /**\n         * Общее: Валюта №2 (ID берем из запроса - settings_get из поля currency)\n         */\n        'currency_2'?: string;\n        \n        /**\n         * Общее: Валюта №3 (ID берем из запроса - settings_get из поля currency)\n         */\n        'currency_3'?: string;\n        \n        /**\n         * Способы уведомления\n         */\n        'notify_type'?: Array<string>;\n        \n        /**\n         * События для уведомлений\n         */\n        'notify_event'?: Array<string>;\n        \n        /**\n         * Параметры для уведомлений\n         */\n        'notify_param'?: {\n        \n        /**\n         * Параметры для уведомлений: Изменение тарифов\n         */\n        'notify_change_tariff'?: {\n        \n        /**\n         * Параметры для уведомлений: Изменение тарифов - Интервал проверки изменения курсов, мин\n         */\n        'check_time_interval'?: number;\n        \n        /**\n         * Параметры для уведомлений: Изменение тарифов - Порог изменения, %\n         */\n        'threshold_of_change'?: number;\n        };\n        };\n        \n        /**\n         * Брендирование: Логотип вашей компании, url\n         */\n        'branding_logo'?: string;\n        \n        /**\n         * Брендирование: Имя файла логотипа\n         */\n        'branding_logo_name'?: string;\n        \n        /**\n         * Брендирование: Использование брендовых цветов\n         */\n        'branding_colors'?: {\n        };\n        \n        /**\n         * Виды налогообложения\n         */\n        'tax'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        \n        /**\n         * Языки интерфейса\n         */\n        'language'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        \n        /**\n         * Курсы валют\n         */\n        'currency'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        \n        /**\n         * Временные зоны: список\n         */\n        'timezone_list'?: Array<{\n        }>;\n        \n        /**\n         * Способы уведомления: список\n         */\n        'notify_types_list'?: Array<{\n        }>;\n        \n        /**\n         * События для уведомлений: список\n         */\n        'notify_events_list'?: Array<{\n        }>;\n        \n        /**\n         * Объекты для разграничения доступа\n         */\n        'permission_objects'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        \n        /**\n         * Правила доступа\n         */\n        'permission_rules'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        \n        /**\n         * Значения варианта доступа\n         */\n        'permission_values'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>;\n        \n        /**\n         * Стартовая страница\n         */\n        'start_page'?: string;\n        \n        /**\n         * Цвета\n         */\n        'colors'?: {\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Чтение настроек.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `settingsGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  settingsGet(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Общее: Язык интерфейса (ID берем из запроса - settings_get из поля language)\n */\n'lang'?: string;\n\n/**\n * Общее: Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Общее: Валюта №1 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_1'?: string;\n\n/**\n * Общее: Валюта №2 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_2'?: string;\n\n/**\n * Общее: Валюта №3 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_3'?: string;\n\n/**\n * Способы уведомления\n */\n'notify_type'?: Array<string>;\n\n/**\n * События для уведомлений\n */\n'notify_event'?: Array<string>;\n\n/**\n * Параметры для уведомлений\n */\n'notify_param'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов\n */\n'notify_change_tariff'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Интервал проверки изменения курсов, мин\n */\n'check_time_interval'?: number;\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Порог изменения, %\n */\n'threshold_of_change'?: number;\n};\n};\n\n/**\n * Брендирование: Логотип вашей компании, url\n */\n'branding_logo'?: string;\n\n/**\n * Брендирование: Имя файла логотипа\n */\n'branding_logo_name'?: string;\n\n/**\n * Брендирование: Использование брендовых цветов\n */\n'branding_colors'?: {\n};\n\n/**\n * Виды налогообложения\n */\n'tax'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Языки интерфейса\n */\n'language'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Курсы валют\n */\n'currency'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Временные зоны: список\n */\n'timezone_list'?: Array<{\n}>;\n\n/**\n * Способы уведомления: список\n */\n'notify_types_list'?: Array<{\n}>;\n\n/**\n * События для уведомлений: список\n */\n'notify_events_list'?: Array<{\n}>;\n\n/**\n * Объекты для разграничения доступа\n */\n'permission_objects'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Правила доступа\n */\n'permission_rules'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Значения варианта доступа\n */\n'permission_values'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Стартовая страница\n */\n'start_page'?: string;\n\n/**\n * Цвета\n */\n'colors'?: {\n};\n}> {\n    return this.settingsGet$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Общее: Язык интерфейса (ID берем из запроса - settings_get из поля language)\n */\n'lang'?: string;\n\n/**\n * Общее: Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Общее: Валюта №1 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_1'?: string;\n\n/**\n * Общее: Валюта №2 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_2'?: string;\n\n/**\n * Общее: Валюта №3 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_3'?: string;\n\n/**\n * Способы уведомления\n */\n'notify_type'?: Array<string>;\n\n/**\n * События для уведомлений\n */\n'notify_event'?: Array<string>;\n\n/**\n * Параметры для уведомлений\n */\n'notify_param'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов\n */\n'notify_change_tariff'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Интервал проверки изменения курсов, мин\n */\n'check_time_interval'?: number;\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Порог изменения, %\n */\n'threshold_of_change'?: number;\n};\n};\n\n/**\n * Брендирование: Логотип вашей компании, url\n */\n'branding_logo'?: string;\n\n/**\n * Брендирование: Имя файла логотипа\n */\n'branding_logo_name'?: string;\n\n/**\n * Брендирование: Использование брендовых цветов\n */\n'branding_colors'?: {\n};\n\n/**\n * Виды налогообложения\n */\n'tax'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Языки интерфейса\n */\n'language'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Курсы валют\n */\n'currency'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Временные зоны: список\n */\n'timezone_list'?: Array<{\n}>;\n\n/**\n * Способы уведомления: список\n */\n'notify_types_list'?: Array<{\n}>;\n\n/**\n * События для уведомлений: список\n */\n'notify_events_list'?: Array<{\n}>;\n\n/**\n * Объекты для разграничения доступа\n */\n'permission_objects'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Правила доступа\n */\n'permission_rules'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Значения варианта доступа\n */\n'permission_values'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Стартовая страница\n */\n'start_page'?: string;\n\n/**\n * Цвета\n */\n'colors'?: {\n};\n}>): {\n\n/**\n * Общее: Язык интерфейса (ID берем из запроса - settings_get из поля language)\n */\n'lang'?: string;\n\n/**\n * Общее: Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Общее: Валюта №1 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_1'?: string;\n\n/**\n * Общее: Валюта №2 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_2'?: string;\n\n/**\n * Общее: Валюта №3 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_3'?: string;\n\n/**\n * Способы уведомления\n */\n'notify_type'?: Array<string>;\n\n/**\n * События для уведомлений\n */\n'notify_event'?: Array<string>;\n\n/**\n * Параметры для уведомлений\n */\n'notify_param'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов\n */\n'notify_change_tariff'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Интервал проверки изменения курсов, мин\n */\n'check_time_interval'?: number;\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Порог изменения, %\n */\n'threshold_of_change'?: number;\n};\n};\n\n/**\n * Брендирование: Логотип вашей компании, url\n */\n'branding_logo'?: string;\n\n/**\n * Брендирование: Имя файла логотипа\n */\n'branding_logo_name'?: string;\n\n/**\n * Брендирование: Использование брендовых цветов\n */\n'branding_colors'?: {\n};\n\n/**\n * Виды налогообложения\n */\n'tax'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Языки интерфейса\n */\n'language'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Курсы валют\n */\n'currency'?: Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Временные зоны: список\n */\n'timezone_list'?: Array<{\n}>;\n\n/**\n * Способы уведомления: список\n */\n'notify_types_list'?: Array<{\n}>;\n\n/**\n * События для уведомлений: список\n */\n'notify_events_list'?: Array<{\n}>;\n\n/**\n * Объекты для разграничения доступа\n */\n'permission_objects'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Правила доступа\n */\n'permission_rules'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Значения варианта доступа\n */\n'permission_values'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>;\n\n/**\n * Стартовая страница\n */\n'start_page'?: string;\n\n/**\n * Цвета\n */\n'colors'?: {\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `settingsUpdate()` */\n  static readonly SettingsUpdatePath = '/settings_update';\n\n  /**\n   * Сохранение настроек.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `settingsUpdate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  settingsUpdate$Response(\n    params?: {\n      body?: {\n\n/**\n * Общее: Язык интерфейса (ID берем из запроса - settings_get из поля language)\n */\n'lang'?: string;\n\n/**\n * Общее: Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Общее: Валюта №1 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_1'?: string;\n\n/**\n * Общее: Валюта №2 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_2'?: string;\n\n/**\n * Общее: Валюта №3 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_3'?: string;\n\n/**\n * Способы уведомления\n */\n'notify_type'?: Array<string>;\n\n/**\n * События для уведомлений\n */\n'notify_event'?: Array<string>;\n\n/**\n * Параметры для уведомлений\n */\n'notify_param'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов\n */\n'notify_change_tariff'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Интервал проверки изменения курсов, мин\n */\n'check_time_interval'?: number;\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Порог изменения, %\n */\n'threshold_of_change'?: number;\n};\n};\n\n/**\n * Брендирование: Логотип вашей компании, строка base64 (svg, png, jpg, gif, bmp)\n */\n'branding_logo'?: string;\n\n/**\n * Брендирование: Имя файла логотипа\n */\n'branding_logo_name'?: string;\n\n/**\n * Брендирование: Использование брендовых цветов\n */\n'branding_colors'?: {\n};\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, SettingsService.SettingsUpdatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сохранение настроек.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `settingsUpdate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  settingsUpdate(\n    params?: {\n      body?: {\n\n/**\n * Общее: Язык интерфейса (ID берем из запроса - settings_get из поля language)\n */\n'lang'?: string;\n\n/**\n * Общее: Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Общее: Валюта №1 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_1'?: string;\n\n/**\n * Общее: Валюта №2 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_2'?: string;\n\n/**\n * Общее: Валюта №3 (ID берем из запроса - settings_get из поля currency)\n */\n'currency_3'?: string;\n\n/**\n * Способы уведомления\n */\n'notify_type'?: Array<string>;\n\n/**\n * События для уведомлений\n */\n'notify_event'?: Array<string>;\n\n/**\n * Параметры для уведомлений\n */\n'notify_param'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов\n */\n'notify_change_tariff'?: {\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Интервал проверки изменения курсов, мин\n */\n'check_time_interval'?: number;\n\n/**\n * Параметры для уведомлений: Изменение тарифов - Порог изменения, %\n */\n'threshold_of_change'?: number;\n};\n};\n\n/**\n * Брендирование: Логотип вашей компании, строка base64 (svg, png, jpg, gif, bmp)\n */\n'branding_logo'?: string;\n\n/**\n * Брендирование: Имя файла логотипа\n */\n'branding_logo_name'?: string;\n\n/**\n * Брендирование: Использование брендовых цветов\n */\n'branding_colors'?: {\n};\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.settingsUpdate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `settingsFilterList()` */\n  static readonly SettingsFilterListPath = '/settings_filter_list';\n\n  /**\n   * Фильтры.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `settingsFilterList()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  settingsFilterList$Response(\n    params: {\n\n    /**\n     * Раздел\n     */\n      table: string;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Раздел\n */\n'table': string;\n\n/**\n * Наименование фильтра\n */\n'name': string;\n\n/**\n * Тип фильтра\n */\n'type': string;\n\n/**\n * Тип фильтра текст\n */\n'type_text'?: string;\n\n/**\n * Тип фильтра фиксирован\n */\n'type_fixed'?: boolean;\n\n/**\n * Поле БД\n */\n'field': string;\n\n/**\n * Статус\n */\n'show': boolean;\n\n/**\n * Место\n */\n'place': string;\n\n/**\n * Место текст\n */\n'place_text'?: string;\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, SettingsService.SettingsFilterListPath, 'get');\n    if (params) {\n      rb.query('table', params.table, {});\n      rb.query('start', params.start, {});\n      rb.query('count', params.count, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Всего позиций\n         */\n        'total'?: number;\n        \n        /**\n         * Позиции\n         */\n        'items'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id': number;\n        \n        /**\n         * Дата создания\n         */\n        'time_add': string;\n        \n        /**\n         * Раздел\n         */\n        'table': string;\n        \n        /**\n         * Наименование фильтра\n         */\n        'name': string;\n        \n        /**\n         * Тип фильтра\n         */\n        'type': string;\n        \n        /**\n         * Тип фильтра текст\n         */\n        'type_text'?: string;\n        \n        /**\n         * Тип фильтра фиксирован\n         */\n        'type_fixed'?: boolean;\n        \n        /**\n         * Поле БД\n         */\n        'field': string;\n        \n        /**\n         * Статус\n         */\n        'show': boolean;\n        \n        /**\n         * Место\n         */\n        'place': string;\n        \n        /**\n         * Место текст\n         */\n        'place_text'?: string;\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Фильтры.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `settingsFilterList$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  settingsFilterList(\n    params: {\n\n    /**\n     * Раздел\n     */\n      table: string;\n\n    /**\n     * Начальная позиция\n     */\n      start?: number;\n\n    /**\n     * Лимит позиций на страницу\n     */\n      count?: number;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Раздел\n */\n'table': string;\n\n/**\n * Наименование фильтра\n */\n'name': string;\n\n/**\n * Тип фильтра\n */\n'type': string;\n\n/**\n * Тип фильтра текст\n */\n'type_text'?: string;\n\n/**\n * Тип фильтра фиксирован\n */\n'type_fixed'?: boolean;\n\n/**\n * Поле БД\n */\n'field': string;\n\n/**\n * Статус\n */\n'show': boolean;\n\n/**\n * Место\n */\n'place': string;\n\n/**\n * Место текст\n */\n'place_text'?: string;\n}>;\n}> {\n    return this.settingsFilterList$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Раздел\n */\n'table': string;\n\n/**\n * Наименование фильтра\n */\n'name': string;\n\n/**\n * Тип фильтра\n */\n'type': string;\n\n/**\n * Тип фильтра текст\n */\n'type_text'?: string;\n\n/**\n * Тип фильтра фиксирован\n */\n'type_fixed'?: boolean;\n\n/**\n * Поле БД\n */\n'field': string;\n\n/**\n * Статус\n */\n'show': boolean;\n\n/**\n * Место\n */\n'place': string;\n\n/**\n * Место текст\n */\n'place_text'?: string;\n}>;\n}>): {\n\n/**\n * Всего позиций\n */\n'total'?: number;\n\n/**\n * Позиции\n */\n'items'?: Array<{\n\n/**\n * ID\n */\n'id': number;\n\n/**\n * Дата создания\n */\n'time_add': string;\n\n/**\n * Раздел\n */\n'table': string;\n\n/**\n * Наименование фильтра\n */\n'name': string;\n\n/**\n * Тип фильтра\n */\n'type': string;\n\n/**\n * Тип фильтра текст\n */\n'type_text'?: string;\n\n/**\n * Тип фильтра фиксирован\n */\n'type_fixed'?: boolean;\n\n/**\n * Поле БД\n */\n'field': string;\n\n/**\n * Статус\n */\n'show': boolean;\n\n/**\n * Место\n */\n'place': string;\n\n/**\n * Место текст\n */\n'place_text'?: string;\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `settingsFilterFormParam()` */\n  static readonly SettingsFilterFormParamPath = '/settings_filter_form_param';\n\n  /**\n   * Параметры для форм.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `settingsFilterFormParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  settingsFilterFormParam$Response(\n    params?: {\n\n    /**\n     * Таблица/раздел\n     */\n      table?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Таблицы/разделы\n */\n'tables': Array<{\n}>;\n\n/**\n * Типы\n */\n'types': Array<{\n}>;\n\n/**\n * Места\n */\n'places'?: Array<{\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, SettingsService.SettingsFilterFormParamPath, 'get');\n    if (params) {\n      rb.query('table', params.table, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Таблицы/разделы\n         */\n        'tables': Array<{\n        }>;\n        \n        /**\n         * Типы\n         */\n        'types': Array<{\n        }>;\n        \n        /**\n         * Места\n         */\n        'places'?: Array<{\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры для форм.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `settingsFilterFormParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  settingsFilterFormParam(\n    params?: {\n\n    /**\n     * Таблица/раздел\n     */\n      table?: string;\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Таблицы/разделы\n */\n'tables': Array<{\n}>;\n\n/**\n * Типы\n */\n'types': Array<{\n}>;\n\n/**\n * Места\n */\n'places'?: Array<{\n}>;\n}> {\n    return this.settingsFilterFormParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Таблицы/разделы\n */\n'tables': Array<{\n}>;\n\n/**\n * Типы\n */\n'types': Array<{\n}>;\n\n/**\n * Места\n */\n'places'?: Array<{\n}>;\n}>): {\n\n/**\n * Таблицы/разделы\n */\n'tables': Array<{\n}>;\n\n/**\n * Типы\n */\n'types': Array<{\n}>;\n\n/**\n * Места\n */\n'places'?: Array<{\n}>;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `settingsFilterSave()` */\n  static readonly SettingsFilterSavePath = '/settings_filter_save';\n\n  /**\n   * Сохранение фильтра.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `settingsFilterSave()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  settingsFilterSave$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Раздел\n */\n'table': string;\n\n/**\n * Наименование фильтра\n */\n'name': string;\n\n/**\n * Тип фильтра\n */\n'type': string;\n\n/**\n * Поле БД\n */\n'field': string;\n\n/**\n * Статус\n */\n'show': boolean;\n\n/**\n * Место\n */\n'place': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, SettingsService.SettingsFilterSavePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сохранение фильтра.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `settingsFilterSave$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  settingsFilterSave(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Раздел\n */\n'table': string;\n\n/**\n * Наименование фильтра\n */\n'name': string;\n\n/**\n * Тип фильтра\n */\n'type': string;\n\n/**\n * Поле БД\n */\n'field': string;\n\n/**\n * Статус\n */\n'show': boolean;\n\n/**\n * Место\n */\n'place': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.settingsFilterSave$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `settingsFilterSaveOrder()` */\n  static readonly SettingsFilterSaveOrderPath = '/settings_filter_save_order';\n\n  /**\n   * Сохранение порядка фильтров.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `settingsFilterSaveOrder()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  settingsFilterSaveOrder$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'ids': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, SettingsService.SettingsFilterSaveOrderPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сохранение порядка фильтров.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `settingsFilterSaveOrder$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  settingsFilterSaveOrder(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'ids': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.settingsFilterSaveOrder$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `settingsFilterDelete()` */\n  static readonly SettingsFilterDeletePath = '/settings_filter_delete';\n\n  /**\n   * Удаление фильтров.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `settingsFilterDelete()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  settingsFilterDelete$Response(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, SettingsService.SettingsFilterDeletePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Удаление фильтров.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `settingsFilterDelete$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  settingsFilterDelete(\n    params?: {\n      body?: {\n\n/**\n * ID\n */\n'id': Array<number>;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.settingsFilterDelete$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Системный справочник данных\n */\n@Injectable({ providedIn: 'root' })\nexport class SystemService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `systemTaxSystem()` */\n  static readonly SystemTaxSystemPath = '/system_tax_system';\n\n  /**\n   * Система налогооблажения.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemTaxSystem()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemTaxSystem$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemTaxSystemPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Система налогооблажения.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemTaxSystem$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemTaxSystem(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.systemTaxSystem$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemCurrency()` */\n  static readonly SystemCurrencyPath = '/system_currency';\n\n  /**\n   * Валюта.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemCurrency()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemCurrency$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Рабочий курс\n */\n'current'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Код\n */\n'code'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Курс\n */\n'currency'?: number;\n\n/**\n * Символ\n */\n'char'?: string;\n}>;\n\n/**\n * Сводная информация\n */\n'summary'?: {\n\n/**\n * Заголовок\n */\n'title'?: string;\n\n/**\n * Источники\n */\n'rows'?: Array<{\n\n/**\n * Наименование источника\n */\n'title'?: string;\n\n/**\n * Ссылка на источник\n */\n'url'?: string;\n\n/**\n * Курсы\n */\n'items'?: Array<{\n\n/**\n * Наименование валюты\n */\n'title'?: string;\n\n/**\n * Значение курса\n */\n'value'?: string;\n}>;\n}>;\n};\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemCurrencyPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Рабочий курс\n         */\n        'current'?: Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Код\n         */\n        'code'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Курс\n         */\n        'currency'?: number;\n        \n        /**\n         * Символ\n         */\n        'char'?: string;\n        }>;\n        \n        /**\n         * Сводная информация\n         */\n        'summary'?: {\n        \n        /**\n         * Заголовок\n         */\n        'title'?: string;\n        \n        /**\n         * Источники\n         */\n        'rows'?: Array<{\n        \n        /**\n         * Наименование источника\n         */\n        'title'?: string;\n        \n        /**\n         * Ссылка на источник\n         */\n        'url'?: string;\n        \n        /**\n         * Курсы\n         */\n        'items'?: Array<{\n        \n        /**\n         * Наименование валюты\n         */\n        'title'?: string;\n        \n        /**\n         * Значение курса\n         */\n        'value'?: string;\n        }>;\n        }>;\n        };\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Валюта.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemCurrency$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemCurrency(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Рабочий курс\n */\n'current'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Код\n */\n'code'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Курс\n */\n'currency'?: number;\n\n/**\n * Символ\n */\n'char'?: string;\n}>;\n\n/**\n * Сводная информация\n */\n'summary'?: {\n\n/**\n * Заголовок\n */\n'title'?: string;\n\n/**\n * Источники\n */\n'rows'?: Array<{\n\n/**\n * Наименование источника\n */\n'title'?: string;\n\n/**\n * Ссылка на источник\n */\n'url'?: string;\n\n/**\n * Курсы\n */\n'items'?: Array<{\n\n/**\n * Наименование валюты\n */\n'title'?: string;\n\n/**\n * Значение курса\n */\n'value'?: string;\n}>;\n}>;\n};\n}> {\n    return this.systemCurrency$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Рабочий курс\n */\n'current'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Код\n */\n'code'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Курс\n */\n'currency'?: number;\n\n/**\n * Символ\n */\n'char'?: string;\n}>;\n\n/**\n * Сводная информация\n */\n'summary'?: {\n\n/**\n * Заголовок\n */\n'title'?: string;\n\n/**\n * Источники\n */\n'rows'?: Array<{\n\n/**\n * Наименование источника\n */\n'title'?: string;\n\n/**\n * Ссылка на источник\n */\n'url'?: string;\n\n/**\n * Курсы\n */\n'items'?: Array<{\n\n/**\n * Наименование валюты\n */\n'title'?: string;\n\n/**\n * Значение курса\n */\n'value'?: string;\n}>;\n}>;\n};\n}>): {\n\n/**\n * Рабочий курс\n */\n'current'?: Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Код\n */\n'code'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Курс\n */\n'currency'?: number;\n\n/**\n * Символ\n */\n'char'?: string;\n}>;\n\n/**\n * Сводная информация\n */\n'summary'?: {\n\n/**\n * Заголовок\n */\n'title'?: string;\n\n/**\n * Источники\n */\n'rows'?: Array<{\n\n/**\n * Наименование источника\n */\n'title'?: string;\n\n/**\n * Ссылка на источник\n */\n'url'?: string;\n\n/**\n * Курсы\n */\n'items'?: Array<{\n\n/**\n * Наименование валюты\n */\n'title'?: string;\n\n/**\n * Значение курса\n */\n'value'?: string;\n}>;\n}>;\n};\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `systemHeadPosition()` */\n  static readonly SystemHeadPositionPath = '/system_head_position';\n\n  /**\n   * Должности руководителей.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemHeadPosition()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemHeadPosition$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemHeadPositionPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Должности руководителей.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemHeadPosition$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemHeadPosition(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.systemHeadPosition$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemServices()` */\n  static readonly SystemServicesPath = '/system_services';\n\n  /**\n   * Виды услуг.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemServices()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemServices$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemServicesPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Виды услуг.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemServices$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemServices(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.systemServices$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemBusiness()` */\n  static readonly SystemBusinessPath = '/system_business';\n\n  /**\n   * Отрасль деятельности.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemBusiness()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemBusiness$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemBusinessPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Порядок (меньше - выше)\n         */\n        'num'?: number;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Отрасль деятельности.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemBusiness$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemBusiness(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>> {\n    return this.systemBusiness$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemCounterparty()` */\n  static readonly SystemCounterpartyPath = '/system_counterparty';\n\n  /**\n   * Тип контрагента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemCounterparty()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemCounterparty$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemCounterpartyPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Порядок (меньше - выше)\n         */\n        'num'?: number;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Тип контрагента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemCounterparty$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemCounterparty(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>> {\n    return this.systemCounterparty$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemInteraction()` */\n  static readonly SystemInteractionPath = '/system_interaction';\n\n  /**\n   * Взаимодействие.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemInteraction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemInteraction$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemInteractionPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * Порядок (меньше - выше)\n         */\n        'num'?: number;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Взаимодействие.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemInteraction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemInteraction(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>> {\n    return this.systemInteraction$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * Порядок (меньше - выше)\n */\n'num'?: number;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemContactSource()` */\n  static readonly SystemContactSourcePath = '/system_contact_source';\n\n  /**\n   * Источник контакта.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemContactSource()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemContactSource$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemContactSourcePath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Источник контакта.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemContactSource$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemContactSource(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.systemContactSource$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemCustomerStatus()` */\n  static readonly SystemCustomerStatusPath = '/system_customer_status';\n\n  /**\n   * Статус клиента.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemCustomerStatus()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemCustomerStatus$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemCustomerStatusPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Статус клиента.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemCustomerStatus$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemCustomerStatus(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.systemCustomerStatus$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemAssociation()` */\n  static readonly SystemAssociationPath = '/system_association';\n\n  /**\n   * Рейтинг подрядчиков.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemAssociation()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemAssociation$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemAssociationPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Рейтинг подрядчиков.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemAssociation$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemAssociation(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.systemAssociation$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `systemRating()` */\n  static readonly SystemRatingPath = '/system_rating';\n\n  /**\n   * Ассоциации подрядчиков.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `systemRating()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemRating$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, SystemService.SystemRatingPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Ассоциации подрядчиков.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `systemRating$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  systemRating(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.systemRating$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Транспорт\n */\n@Injectable({ providedIn: 'root' })\nexport class TransportService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `transportKind()` */\n  static readonly TransportKindPath = '/transport_kind';\n\n  /**\n   * Вид перевозки.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportKind()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportKind$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportKindPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Ключ\n         */\n        'key'?: string;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Вид перевозки.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `transportKind$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportKind(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.transportKind$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `transportSubKind()` */\n  static readonly TransportSubKindPath = '/transport_sub_kind';\n\n  /**\n   * Подвиды перевозки.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportSubKind()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportSubKind$Response(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportSubKindPath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Ключ\n         */\n        'key'?: string;\n        \n        /**\n         * Вид перевозки\n         */\n        'kind_id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Подвиды перевозки.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `transportSubKind$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportSubKind(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.transportSubKind$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Ключ\n */\n'key'?: string;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `transportType()` */\n  static readonly TransportTypePath = '/transport_type';\n\n  /**\n   * Тип транспорта.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportType()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportType$Response(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportTypePath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Вид перевозки\n         */\n        'kind_id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Тип транспорта.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `transportType$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportType(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.transportType$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `transportLoading()` */\n  static readonly TransportLoadingPath = '/transport_loading';\n\n  /**\n   * Способы загрузки.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportLoading()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportLoading$Response(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportLoadingPath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Вид перевозки\n         */\n        'kind_id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Способы загрузки.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `transportLoading$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportLoading(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.transportLoading$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `transportBody()` */\n  static readonly TransportBodyPath = '/transport_body';\n\n  /**\n   * Типы кузовов.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportBody()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportBody$Response(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportBodyPath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Вид перевозки\n         */\n        'kind_id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Типы кузовов.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `transportBody$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportBody(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.transportBody$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `transportCarrier()` */\n  static readonly TransportCarrierPath = '/transport_carrier';\n\n  /**\n   * Перевозчики.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportCarrier()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportCarrier$Response(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n\n    /**\n     * Наименование\n     */\n      name?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * IATA\n */\n'iata'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportCarrierPath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n      rb.query('name', params.name, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Вид перевозки\n         */\n        'kind_id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        \n        /**\n         * IATA\n         */\n        'iata'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Перевозчики.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `transportCarrier$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportCarrier(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n\n    /**\n     * Наименование\n     */\n      name?: string;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * IATA\n */\n'iata'?: string;\n}>> {\n    return this.transportCarrier$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * IATA\n */\n'iata'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n\n/**\n * IATA\n */\n'iata'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `transportRoute()` */\n  static readonly TransportRoutePath = '/transport_route';\n\n  /**\n   * Маршрут.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportRoute()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportRoute$Response(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n\n    /**\n     * Перевозчик\n     */\n      carrier_id?: number;\n\n    /**\n     * Страна отправления\n     */\n      country_id_departure?: number;\n\n    /**\n     * Страна прибытия\n     */\n      country_id_arrival?: number;\n\n    /**\n     * Город отправления\n     */\n      city_id_departure?: number;\n\n    /**\n     * Город прибытия\n     */\n      city_id_arrival?: number;\n\n    /**\n     * Пункт отправления\n     */\n      point_id_departure?: number;\n\n    /**\n     * Пункт прибытия\n     */\n      point_id_arrival?: number;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Перевозчик\n */\n'carrier_id'?: number;\n\n/**\n * Страна отправления\n */\n'country_id_departure'?: number;\n\n/**\n * Страна прибытия\n */\n'country_id_arrival'?: number;\n\n/**\n * Город отправления\n */\n'city_id_departure'?: number;\n\n/**\n * Город прибытия\n */\n'city_id_arrival'?: number;\n\n/**\n * Пункт отправления\n */\n'point_id_departure'?: number;\n\n/**\n * Пункт прибытия\n */\n'point_id_arrival'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportRoutePath, 'get');\n    if (params) {\n      rb.query('kind_id', params.kind_id, {});\n      rb.query('carrier_id', params.carrier_id, {});\n      rb.query('country_id_departure', params.country_id_departure, {});\n      rb.query('country_id_arrival', params.country_id_arrival, {});\n      rb.query('city_id_departure', params.city_id_departure, {});\n      rb.query('city_id_arrival', params.city_id_arrival, {});\n      rb.query('point_id_departure', params.point_id_departure, {});\n      rb.query('point_id_arrival', params.point_id_arrival, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Вид перевозки\n         */\n        'kind_id'?: number;\n        \n        /**\n         * Перевозчик\n         */\n        'carrier_id'?: number;\n        \n        /**\n         * Страна отправления\n         */\n        'country_id_departure'?: number;\n        \n        /**\n         * Страна прибытия\n         */\n        'country_id_arrival'?: number;\n        \n        /**\n         * Город отправления\n         */\n        'city_id_departure'?: number;\n        \n        /**\n         * Город прибытия\n         */\n        'city_id_arrival'?: number;\n        \n        /**\n         * Пункт отправления\n         */\n        'point_id_departure'?: number;\n        \n        /**\n         * Пункт прибытия\n         */\n        'point_id_arrival'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Маршрут.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `transportRoute$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportRoute(\n    params?: {\n\n    /**\n     * Вид перевозки\n     */\n      kind_id?: number;\n\n    /**\n     * Перевозчик\n     */\n      carrier_id?: number;\n\n    /**\n     * Страна отправления\n     */\n      country_id_departure?: number;\n\n    /**\n     * Страна прибытия\n     */\n      country_id_arrival?: number;\n\n    /**\n     * Город отправления\n     */\n      city_id_departure?: number;\n\n    /**\n     * Город прибытия\n     */\n      city_id_arrival?: number;\n\n    /**\n     * Пункт отправления\n     */\n      point_id_departure?: number;\n\n    /**\n     * Пункт прибытия\n     */\n      point_id_arrival?: number;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Перевозчик\n */\n'carrier_id'?: number;\n\n/**\n * Страна отправления\n */\n'country_id_departure'?: number;\n\n/**\n * Страна прибытия\n */\n'country_id_arrival'?: number;\n\n/**\n * Город отправления\n */\n'city_id_departure'?: number;\n\n/**\n * Город прибытия\n */\n'city_id_arrival'?: number;\n\n/**\n * Пункт отправления\n */\n'point_id_departure'?: number;\n\n/**\n * Пункт прибытия\n */\n'point_id_arrival'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.transportRoute$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Перевозчик\n */\n'carrier_id'?: number;\n\n/**\n * Страна отправления\n */\n'country_id_departure'?: number;\n\n/**\n * Страна прибытия\n */\n'country_id_arrival'?: number;\n\n/**\n * Город отправления\n */\n'city_id_departure'?: number;\n\n/**\n * Город прибытия\n */\n'city_id_arrival'?: number;\n\n/**\n * Пункт отправления\n */\n'point_id_departure'?: number;\n\n/**\n * Пункт прибытия\n */\n'point_id_arrival'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Вид перевозки\n */\n'kind_id'?: number;\n\n/**\n * Перевозчик\n */\n'carrier_id'?: number;\n\n/**\n * Страна отправления\n */\n'country_id_departure'?: number;\n\n/**\n * Страна прибытия\n */\n'country_id_arrival'?: number;\n\n/**\n * Город отправления\n */\n'city_id_departure'?: number;\n\n/**\n * Город прибытия\n */\n'city_id_arrival'?: number;\n\n/**\n * Пункт отправления\n */\n'point_id_departure'?: number;\n\n/**\n * Пункт прибытия\n */\n'point_id_arrival'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n  /** Path part for operation `transportPointAction()` */\n  static readonly TransportPointActionPath = '/transport_point_action';\n\n  /**\n   * Тип операции.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `transportPointAction()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportPointAction$Response(\n    params?: {\n\n    /**\n     * Направление (arrival,departure)\n     */\n      direction?: string;\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>> {\n    const rb = new RequestBuilder(this.rootUrl, TransportService.TransportPointActionPath, 'get');\n    if (params) {\n      rb.query('direction', params.direction, {});\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<Array<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        \n        /**\n         * Наименование\n         */\n        'name'?: string;\n        }>>;\n      })\n    );\n  }\n\n  /**\n   * Тип операции.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `transportPointAction$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  transportPointAction(\n    params?: {\n\n    /**\n     * Направление (arrival,departure)\n     */\n      direction?: string;\n    },\n    context?: HttpContext\n  ): Observable<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>> {\n    return this.transportPointAction$Response(params, context).pipe(\n      map((r: StrictHttpResponse<Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}>>): Array<{\n\n/**\n * ID\n */\n'id'?: number;\n\n/**\n * Наименование\n */\n'name'?: string;\n}> => r.body)\n    );\n  }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { BaseService } from '../base-service';\nimport { ApiConfiguration } from '../api-configuration';\nimport { StrictHttpResponse } from '../strict-http-response';\nimport { RequestBuilder } from '../request-builder';\n\n\n\n/**\n * Авторизация пользователей\n */\n@Injectable({ providedIn: 'root' })\nexport class UserService extends BaseService {\n  constructor(config: ApiConfiguration, http: HttpClient) {\n    super(config, http);\n  }\n\n  /** Path part for operation `userCreate()` */\n  static readonly UserCreatePath = '/user_create';\n\n  /**\n   * Регистрация пользователя.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userCreate()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userCreate$Response(\n    params?: {\n      body?: {\n\n/**\n * Название компании\n */\n'company': string;\n\n/**\n * Ответственное лицо\n */\n'fio': string;\n\n/**\n * Номер телефона:\n */\n'phone': string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * E-mail\n */\n'email': string;\n\n/**\n * Пароль\n */\n'password': string;\n\n/**\n * Подтверждение пароля\n */\n'password_confirm': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserCreatePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Идентификатор регистрации\n         */\n        'uid': string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Регистрация пользователя.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userCreate$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userCreate(\n    params?: {\n      body?: {\n\n/**\n * Название компании\n */\n'company': string;\n\n/**\n * Ответственное лицо\n */\n'fio': string;\n\n/**\n * Номер телефона:\n */\n'phone': string;\n\n/**\n * ИНН\n */\n'inn'?: string;\n\n/**\n * E-mail\n */\n'email': string;\n\n/**\n * Пароль\n */\n'password': string;\n\n/**\n * Подтверждение пароля\n */\n'password_confirm': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}> {\n    return this.userCreate$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}>): {\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userSendCode()` */\n  static readonly UserSendCodePath = '/user_send_code';\n\n  /**\n   * Отправка кода для регистрации пользователя.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userSendCode()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userSendCode$Response(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserSendCodePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Идентификатор регистрации\n         */\n        'uid': string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Отправка кода для регистрации пользователя.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userSendCode$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userSendCode(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}> {\n    return this.userSendCode$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}>): {\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userConfirm()` */\n  static readonly UserConfirmPath = '/user_confirm';\n\n  /**\n   * Подтверждение регистрация пользователя.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userConfirm()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userConfirm$Response(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n\n/**\n * Код подтверждения\n */\n'code': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * ID\n */\n'id'?: number;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserConfirmPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * ID\n         */\n        'id'?: number;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Подтверждение регистрация пользователя.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userConfirm$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userConfirm(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n\n/**\n * Код подтверждения\n */\n'code': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * ID\n */\n'id'?: number;\n}> {\n    return this.userConfirm$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * ID\n */\n'id'?: number;\n}>): {\n\n/**\n * ID\n */\n'id'?: number;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userSendResetCode()` */\n  static readonly UserSendResetCodePath = '/user_send_reset_code';\n\n  /**\n   * Отправка кода для сброса пароля пользователя.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userSendResetCode()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userSendResetCode$Response(\n    params?: {\n      body?: {\n\n/**\n * Логин\n */\n'login': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserSendResetCodePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Идентификатор регистрации\n         */\n        'uid': string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Отправка кода для сброса пароля пользователя.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userSendResetCode$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userSendResetCode(\n    params?: {\n      body?: {\n\n/**\n * Логин\n */\n'login': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}> {\n    return this.userSendResetCode$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n}>): {\n\n/**\n * Идентификатор регистрации\n */\n'uid': string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userResetPassword()` */\n  static readonly UserResetPasswordPath = '/user_reset_password';\n\n  /**\n   * Сброс пароля.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userResetPassword()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userResetPassword$Response(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор запроса\n */\n'uid': string;\n\n/**\n * Код из письма\n */\n'code'?: string;\n\n/**\n * Новый пароль\n */\n'password': string;\n\n/**\n * Подтверждение нового пароля\n */\n'confirm_password': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserResetPasswordPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сброс пароля.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userResetPassword$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userResetPassword(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор запроса\n */\n'uid': string;\n\n/**\n * Код из письма\n */\n'code'?: string;\n\n/**\n * Новый пароль\n */\n'password': string;\n\n/**\n * Подтверждение нового пароля\n */\n'confirm_password': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.userResetPassword$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userCreateInvite()` */\n  static readonly UserCreateInvitePath = '/user_create_invite';\n\n  /**\n   * Создание приглашения для сотрудника.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userCreateInvite()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userCreateInvite$Response(\n    params?: {\n      body?: {\n\n/**\n * ID сотрудника\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserCreateInvitePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Создание приглашения для сотрудника.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userCreateInvite$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userCreateInvite(\n    params?: {\n      body?: {\n\n/**\n * ID сотрудника\n */\n'id': number;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.userCreateInvite$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userRegisterInvite()` */\n  static readonly UserRegisterInvitePath = '/user_register_invite';\n\n  /**\n   * Установка логина и пароля.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userRegisterInvite()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userRegisterInvite$Response(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор приглашения\n */\n'uid'?: string;\n\n/**\n * Новый пароль\n */\n'password': string;\n\n/**\n * Подтверждение нового пароля\n */\n'confirm_password': string;\n\n/**\n * Логин (вместе со старым паролем, при смене)\n */\n'login'?: string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserRegisterInvitePath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Установка логина и пароля.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userRegisterInvite$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userRegisterInvite(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор приглашения\n */\n'uid'?: string;\n\n/**\n * Новый пароль\n */\n'password': string;\n\n/**\n * Подтверждение нового пароля\n */\n'confirm_password': string;\n\n/**\n * Логин (вместе со старым паролем, при смене)\n */\n'login'?: string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.userRegisterInvite$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userUpdatePassword()` */\n  static readonly UserUpdatePasswordPath = '/user_update_password';\n\n  /**\n   * Смена логина и пароля.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userUpdatePassword()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userUpdatePassword$Response(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор приглашения\n */\n'uid'?: string;\n\n/**\n * Старый пароль (при смене)\n */\n'old_password': string;\n\n/**\n * Новый пароль\n */\n'password': string;\n\n/**\n * Подтверждение нового пароля\n */\n'confirm_password': string;\n\n/**\n * Логин (вместе со старым паролем, при смене)\n */\n'login'?: string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserUpdatePasswordPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Смена логина и пароля.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userUpdatePassword$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userUpdatePassword(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор приглашения\n */\n'uid'?: string;\n\n/**\n * Старый пароль (при смене)\n */\n'old_password': string;\n\n/**\n * Новый пароль\n */\n'password': string;\n\n/**\n * Подтверждение нового пароля\n */\n'confirm_password': string;\n\n/**\n * Логин (вместе со старым паролем, при смене)\n */\n'login'?: string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.userUpdatePassword$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userInviteData()` */\n  static readonly UserInviteDataPath = '/user_invite_data';\n\n  /**\n   * Данные по приглашению.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userInviteData()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userInviteData$Response(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор приглашения\n */\n'uid': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Имеется ли старый пароль\n */\n'has_old_password'?: boolean;\n\n/**\n * Текущий логин\n */\n'login'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserInviteDataPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Имеется ли старый пароль\n         */\n        'has_old_password'?: boolean;\n        \n        /**\n         * Текущий логин\n         */\n        'login'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Данные по приглашению.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userInviteData$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userInviteData(\n    params?: {\n      body?: {\n\n/**\n * Идентификатор приглашения\n */\n'uid': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Имеется ли старый пароль\n */\n'has_old_password'?: boolean;\n\n/**\n * Текущий логин\n */\n'login'?: string;\n}> {\n    return this.userInviteData$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Имеется ли старый пароль\n */\n'has_old_password'?: boolean;\n\n/**\n * Текущий логин\n */\n'login'?: string;\n}>): {\n\n/**\n * Имеется ли старый пароль\n */\n'has_old_password'?: boolean;\n\n/**\n * Текущий логин\n */\n'login'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userLogin()` */\n  static readonly UserLoginPath = '/user_login';\n\n  /**\n   * Авторизация пользователя по паролю.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userLogin()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userLogin$Response(\n    params?: {\n      body?: {\n\n/**\n * Логин (email)\n */\n'login': string;\n\n/**\n * Пароль\n */\n'password': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Токен доступа, передается в заголовке \"Bearer ACCESS_TOKEN\" всех запросов кроме авторизации\n */\n'token': string;\n\n/**\n * Время жизни токена доступа\n */\n'token_expire': string;\n\n/**\n * Токен продления, используется для продления токена доступа и выхода\n */\n'refresh_token': string;\n\n/**\n * Время жизни токена продления\n */\n'refresh_token_expire': string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserLoginPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Токен доступа, передается в заголовке \"Bearer ACCESS_TOKEN\" всех запросов кроме авторизации\n         */\n        'token': string;\n        \n        /**\n         * Время жизни токена доступа\n         */\n        'token_expire': string;\n        \n        /**\n         * Токен продления, используется для продления токена доступа и выхода\n         */\n        'refresh_token': string;\n        \n        /**\n         * Время жизни токена продления\n         */\n        'refresh_token_expire': string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Авторизация пользователя по паролю.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userLogin$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userLogin(\n    params?: {\n      body?: {\n\n/**\n * Логин (email)\n */\n'login': string;\n\n/**\n * Пароль\n */\n'password': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Токен доступа, передается в заголовке \"Bearer ACCESS_TOKEN\" всех запросов кроме авторизации\n */\n'token': string;\n\n/**\n * Время жизни токена доступа\n */\n'token_expire': string;\n\n/**\n * Токен продления, используется для продления токена доступа и выхода\n */\n'refresh_token': string;\n\n/**\n * Время жизни токена продления\n */\n'refresh_token_expire': string;\n}> {\n    return this.userLogin$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Токен доступа, передается в заголовке \"Bearer ACCESS_TOKEN\" всех запросов кроме авторизации\n */\n'token': string;\n\n/**\n * Время жизни токена доступа\n */\n'token_expire': string;\n\n/**\n * Токен продления, используется для продления токена доступа и выхода\n */\n'refresh_token': string;\n\n/**\n * Время жизни токена продления\n */\n'refresh_token_expire': string;\n}>): {\n\n/**\n * Токен доступа, передается в заголовке \"Bearer ACCESS_TOKEN\" всех запросов кроме авторизации\n */\n'token': string;\n\n/**\n * Время жизни токена доступа\n */\n'token_expire': string;\n\n/**\n * Токен продления, используется для продления токена доступа и выхода\n */\n'refresh_token': string;\n\n/**\n * Время жизни токена продления\n */\n'refresh_token_expire': string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userLogout()` */\n  static readonly UserLogoutPath = '/user_logout';\n\n  /**\n   * Выход пользователя.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userLogout()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userLogout$Response(\n    params?: {\n      body?: {\n\n/**\n * Токен доступа\n */\n'token': string;\n\n/**\n * Выйти из всех авторизаций\n */\n'everywhere'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserLogoutPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Выход пользователя.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userLogout$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userLogout(\n    params?: {\n      body?: {\n\n/**\n * Токен доступа\n */\n'token': string;\n\n/**\n * Выйти из всех авторизаций\n */\n'everywhere'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.userLogout$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userUpdateToken()` */\n  static readonly UserUpdateTokenPath = '/user_update_token';\n\n  /**\n   * Обновление токена доступа.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userUpdateToken()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userUpdateToken$Response(\n    params?: {\n      body?: {\n\n/**\n * Токен продления\n */\n'refresh_token': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * токен доступа\n */\n'token'?: string;\n\n/**\n * Время жизни токена доступа\n */\n'token_expire'?: string;\n\n/**\n * Новый токен продления\n */\n'refresh_token'?: string;\n\n/**\n * Время жизни токена продления\n */\n'refresh_token_expire'?: string;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserUpdateTokenPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * токен доступа\n         */\n        'token'?: string;\n        \n        /**\n         * Время жизни токена доступа\n         */\n        'token_expire'?: string;\n        \n        /**\n         * Новый токен продления\n         */\n        'refresh_token'?: string;\n        \n        /**\n         * Время жизни токена продления\n         */\n        'refresh_token_expire'?: string;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Обновление токена доступа.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userUpdateToken$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userUpdateToken(\n    params?: {\n      body?: {\n\n/**\n * Токен продления\n */\n'refresh_token': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * токен доступа\n */\n'token'?: string;\n\n/**\n * Время жизни токена доступа\n */\n'token_expire'?: string;\n\n/**\n * Новый токен продления\n */\n'refresh_token'?: string;\n\n/**\n * Время жизни токена продления\n */\n'refresh_token_expire'?: string;\n}> {\n    return this.userUpdateToken$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * токен доступа\n */\n'token'?: string;\n\n/**\n * Время жизни токена доступа\n */\n'token_expire'?: string;\n\n/**\n * Новый токен продления\n */\n'refresh_token'?: string;\n\n/**\n * Время жизни токена продления\n */\n'refresh_token_expire'?: string;\n}>): {\n\n/**\n * токен доступа\n */\n'token'?: string;\n\n/**\n * Время жизни токена доступа\n */\n'token_expire'?: string;\n\n/**\n * Новый токен продления\n */\n'refresh_token'?: string;\n\n/**\n * Время жизни токена продления\n */\n'refresh_token_expire'?: string;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userSaveTableParam()` */\n  static readonly UserSaveTableParamPath = '/user_save_table_param';\n\n  /**\n   * Сохранение параметров вывода таблицы.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userSaveTableParam()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userSaveTableParam$Response(\n    params?: {\n      body?: {\n\n/**\n * Метод таблицы\n */\n'method': string;\n\n/**\n * Параметры таблицы, в структуре ...list_param\n */\n'param': {\n};\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserSaveTableParamPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сохранение параметров вывода таблицы.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userSaveTableParam$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userSaveTableParam(\n    params?: {\n      body?: {\n\n/**\n * Метод таблицы\n */\n'method': string;\n\n/**\n * Параметры таблицы, в структуре ...list_param\n */\n'param': {\n};\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.userSaveTableParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userResetTableParam()` */\n  static readonly UserResetTableParamPath = '/user_reset_table_param';\n\n  /**\n   * Сброс параметров вывода таблицы.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userResetTableParam()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userResetTableParam$Response(\n    params?: {\n      body?: {\n\n/**\n * Метод таблицы\n */\n'method': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserResetTableParamPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сброс параметров вывода таблицы.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userResetTableParam$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userResetTableParam(\n    params?: {\n      body?: {\n\n/**\n * Метод таблицы\n */\n'method': string;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.userResetTableParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userGetParam()` */\n  static readonly UserGetParamPath = '/user_get_param';\n\n  /**\n   * Получение параметров пользователя.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userGetParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  userGetParam$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Язык интерфейса\n */\n'language'?: string;\n\n/**\n * Основная валюта\n */\n'currency_main'?: string;\n\n/**\n * Валюта №2\n */\n'currency_2'?: string;\n\n/**\n * Валюта №3\n */\n'currency_3'?: string;\n\n/**\n * events\n */\n'events'?: {\n};\n\n/**\n * Способ уведомления: SMS\n */\n'notify_sms'?: boolean;\n\n/**\n * Способ уведомления: E-mail\n */\n'notify_email'?: boolean;\n\n/**\n * Способ уведомления: Skype\n */\n'notify_skype'?: boolean;\n\n/**\n * Способ уведомления: Система\n */\n'notify_system'?: boolean;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserGetParamPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Часовой пояс\n         */\n        'timezone'?: string;\n        \n        /**\n         * Язык интерфейса\n         */\n        'language'?: string;\n        \n        /**\n         * Основная валюта\n         */\n        'currency_main'?: string;\n        \n        /**\n         * Валюта №2\n         */\n        'currency_2'?: string;\n        \n        /**\n         * Валюта №3\n         */\n        'currency_3'?: string;\n        \n        /**\n         * events\n         */\n        'events'?: {\n        };\n        \n        /**\n         * Способ уведомления: SMS\n         */\n        'notify_sms'?: boolean;\n        \n        /**\n         * Способ уведомления: E-mail\n         */\n        'notify_email'?: boolean;\n        \n        /**\n         * Способ уведомления: Skype\n         */\n        'notify_skype'?: boolean;\n        \n        /**\n         * Способ уведомления: Система\n         */\n        'notify_system'?: boolean;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Получение параметров пользователя.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userGetParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  userGetParam(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Язык интерфейса\n */\n'language'?: string;\n\n/**\n * Основная валюта\n */\n'currency_main'?: string;\n\n/**\n * Валюта №2\n */\n'currency_2'?: string;\n\n/**\n * Валюта №3\n */\n'currency_3'?: string;\n\n/**\n * events\n */\n'events'?: {\n};\n\n/**\n * Способ уведомления: SMS\n */\n'notify_sms'?: boolean;\n\n/**\n * Способ уведомления: E-mail\n */\n'notify_email'?: boolean;\n\n/**\n * Способ уведомления: Skype\n */\n'notify_skype'?: boolean;\n\n/**\n * Способ уведомления: Система\n */\n'notify_system'?: boolean;\n}> {\n    return this.userGetParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Язык интерфейса\n */\n'language'?: string;\n\n/**\n * Основная валюта\n */\n'currency_main'?: string;\n\n/**\n * Валюта №2\n */\n'currency_2'?: string;\n\n/**\n * Валюта №3\n */\n'currency_3'?: string;\n\n/**\n * events\n */\n'events'?: {\n};\n\n/**\n * Способ уведомления: SMS\n */\n'notify_sms'?: boolean;\n\n/**\n * Способ уведомления: E-mail\n */\n'notify_email'?: boolean;\n\n/**\n * Способ уведомления: Skype\n */\n'notify_skype'?: boolean;\n\n/**\n * Способ уведомления: Система\n */\n'notify_system'?: boolean;\n}>): {\n\n/**\n * Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Язык интерфейса\n */\n'language'?: string;\n\n/**\n * Основная валюта\n */\n'currency_main'?: string;\n\n/**\n * Валюта №2\n */\n'currency_2'?: string;\n\n/**\n * Валюта №3\n */\n'currency_3'?: string;\n\n/**\n * events\n */\n'events'?: {\n};\n\n/**\n * Способ уведомления: SMS\n */\n'notify_sms'?: boolean;\n\n/**\n * Способ уведомления: E-mail\n */\n'notify_email'?: boolean;\n\n/**\n * Способ уведомления: Skype\n */\n'notify_skype'?: boolean;\n\n/**\n * Способ уведомления: Система\n */\n'notify_system'?: boolean;\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userSaveParam()` */\n  static readonly UserSaveParamPath = '/user_save_param';\n\n  /**\n   * Сохранение параметров пользователя.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userSaveParam()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userSaveParam$Response(\n    params?: {\n      body?: {\n\n/**\n * Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Язык интерфейса\n */\n'language'?: string;\n\n/**\n * Основная валюта\n */\n'currency_main'?: string;\n\n/**\n * Валюта №2\n */\n'currency_2'?: string;\n\n/**\n * Валюта №3\n */\n'currency_3'?: string;\n\n/**\n * events\n */\n'events'?: {\n};\n\n/**\n * Способ уведомления: SMS\n */\n'notify_sms'?: boolean;\n\n/**\n * Способ уведомления: E-mail\n */\n'notify_email'?: boolean;\n\n/**\n * Способ уведомления: Skype\n */\n'notify_skype'?: boolean;\n\n/**\n * Способ уведомления: Система\n */\n'notify_system'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserSaveParamPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/json');\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Статус выполнения\n         */\n        'result': 'OK';\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Сохранение параметров пользователя.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userSaveParam$Response()` instead.\n   *\n   * This method sends `application/json` and handles request body of type `application/json`.\n   */\n  userSaveParam(\n    params?: {\n      body?: {\n\n/**\n * Часовой пояс\n */\n'timezone'?: string;\n\n/**\n * Язык интерфейса\n */\n'language'?: string;\n\n/**\n * Основная валюта\n */\n'currency_main'?: string;\n\n/**\n * Валюта №2\n */\n'currency_2'?: string;\n\n/**\n * Валюта №3\n */\n'currency_3'?: string;\n\n/**\n * events\n */\n'events'?: {\n};\n\n/**\n * Способ уведомления: SMS\n */\n'notify_sms'?: boolean;\n\n/**\n * Способ уведомления: E-mail\n */\n'notify_email'?: boolean;\n\n/**\n * Способ уведомления: Skype\n */\n'notify_skype'?: boolean;\n\n/**\n * Способ уведомления: Система\n */\n'notify_system'?: boolean;\n}\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}> {\n    return this.userSaveParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n}>): {\n\n/**\n * Статус выполнения\n */\n'result': 'OK';\n} => r.body)\n    );\n  }\n\n  /** Path part for operation `userFormParamParam()` */\n  static readonly UserFormParamParamPath = '/user_form_param_param';\n\n  /**\n   * Параметры для формы параметров пользователя.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `userFormParamParam()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  userFormParamParam$Response(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<StrictHttpResponse<{\n\n/**\n * Часовые пояса\n */\n'timezone': Array<{\n}>;\n\n/**\n * Языки\n */\n'language': Array<{\n}>;\n\n/**\n * Валюты\n */\n'currency': Array<{\n}>;\n\n/**\n * События\n */\n'events': Array<{\n}>;\n}>> {\n    const rb = new RequestBuilder(this.rootUrl, UserService.UserFormParamParamPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(\n      rb.build({ responseType: 'json', accept: 'application/json', context })\n    ).pipe(\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<{\n        \n        /**\n         * Часовые пояса\n         */\n        'timezone': Array<{\n        }>;\n        \n        /**\n         * Языки\n         */\n        'language': Array<{\n        }>;\n        \n        /**\n         * Валюты\n         */\n        'currency': Array<{\n        }>;\n        \n        /**\n         * События\n         */\n        'events': Array<{\n        }>;\n        }>;\n      })\n    );\n  }\n\n  /**\n   * Параметры для формы параметров пользователя.\n   *\n   *\n   *\n   * This method provides access only to the response body.\n   * To access the full response (for headers, for example), `userFormParamParam$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  userFormParamParam(\n    params?: {\n    },\n    context?: HttpContext\n  ): Observable<{\n\n/**\n * Часовые пояса\n */\n'timezone': Array<{\n}>;\n\n/**\n * Языки\n */\n'language': Array<{\n}>;\n\n/**\n * Валюты\n */\n'currency': Array<{\n}>;\n\n/**\n * События\n */\n'events': Array<{\n}>;\n}> {\n    return this.userFormParamParam$Response(params, context).pipe(\n      map((r: StrictHttpResponse<{\n\n/**\n * Часовые пояса\n */\n'timezone': Array<{\n}>;\n\n/**\n * Языки\n */\n'language': Array<{\n}>;\n\n/**\n * Валюты\n */\n'currency': Array<{\n}>;\n\n/**\n * События\n */\n'events': Array<{\n}>;\n}>): {\n\n/**\n * Часовые пояса\n */\n'timezone': Array<{\n}>;\n\n/**\n * Языки\n */\n'language': Array<{\n}>;\n\n/**\n * Валюты\n */\n'currency': Array<{\n}>;\n\n/**\n * События\n */\n'events': Array<{\n}>;\n} => r.body)\n    );\n  }\n\n}\n","import { AuthGuard } from './auth/auth.guard';\nimport { UserGuard } from './auth/user.guard';\nimport { LogoutComponent } from './auth/components/logout/logout.component';\nimport { NgModule } from '@angular/core';\nimport { ExtraOptions, RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './auth/components/login/login.component';\nimport { RegisterComponent } from './auth/components/register/register.component';\nimport {ConfirmComponent} from \"./auth/components/confirm/confirm.component\";\nimport { RequestRateComponent } from './pages/components/request-rate/request-rate.component';\nimport { EmployeeRegisterComponent } from './pages/components/employee-register/employee-register.component';\nimport { PasswordRecoveryComponent } from './auth/components/password-recovery/password-recovery.component';\n\nconst config: ExtraOptions = {\n  useHash: true,\n  scrollPositionRestoration: 'enabled', // Восстанавливает позицию прокрутки\n  anchorScrolling: 'enabled', // Позволяет прокрутку до якоря\n  onSameUrlNavigation: 'reload' // Позволяет перезагружать страницу при переходе на тот же URL\n};\n\nconst routes: Routes = [\n  {\n    path: 'pages',\n    loadChildren: () => import('./pages/pages.module').then(m => m.PagesModule),\n    // canActivate: [AuthGuard]\n  },\n  { path: 'password_recovery', component: PasswordRecoveryComponent, canActivate: [UserGuard], title: 'Востановление пароля' },\n  { path: 'rate_request/:uid', component: RequestRateComponent, title: 'Rates' },\n  { path: 'employee_register/:uid', component: EmployeeRegisterComponent, title: 'Employee Register' },\n  { path: 'login', component: LoginComponent, canActivate: [UserGuard], title: 'Вход в систему' },\n  { path: 'logout', component: LogoutComponent, title: 'Выход из системы'},\n  { path: 'register', component: RegisterComponent, canActivate: [UserGuard], title: 'Регистрация в системе'},\n  { path: 'confirm', component: ConfirmComponent, canActivate: [UserGuard], title: 'Код подтверждения'},\n  { path: 'confirm/:uid', component: ConfirmComponent, canActivate: [UserGuard], title: 'Код подтверждения' },\n  { path: '', redirectTo: 'pages', pathMatch: 'full' },\n  { path: '**', redirectTo: 'pages' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, config)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { UserService } from './api/services/user.service';\nimport { Component, ViewEncapsulation } from '@angular/core';\nimport { LoaderService } from '../app/pages/services/loader.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n  title = 'cargodrom-frontend';\n  // isLoading$ = this.loaderService.isLoading$;\n\n  constructor(\n    private userService: UserService,\n    private loaderService: LoaderService) {\n  }\n\n  ngOnInit(): void {\n  }\n}\n","\n<router-outlet></router-outlet>\n<!-- <app-global-loader></app-global-loader> -->","import { AuthModule } from './auth/auth.module';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Injectable, LOCALE_ID, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ErrorInterceptor } from './error.interceptor';\nimport { TokenInterceptor } from './token.interceptor';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { registerLocaleData } from '@angular/common';\nimport localeRu from '@angular/common/locales/ru';\nimport { PageTitleService } from './page-title.service';\nimport { TitleStrategy } from '@angular/router';\nimport { DateAdapter, MAT_DATE_LOCALE, NativeDateAdapter } from '@angular/material/core';\nimport { MaterialModule } from './material/material.module';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { NgScrollbarModule } from 'ngx-scrollbar';\nimport { LoaderComponent } from './loader/loader.component';\nimport { LoadingInterceptor } from './interceptors/loader.interceptor';\nimport { SharedModule } from './shared/shared.module';\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoaderComponent,\n    \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    AuthModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatDatepickerModule,\n    NgScrollbarModule,\n    SharedModule,\n  ],\n  providers: [\n    \n    { provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true }\n  ,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: TokenInterceptor,\n      multi: true\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ErrorInterceptor,\n      multi: true\n    },\n    {\n      provide: LOCALE_ID,\n      useValue: 'ru'\n    },\n    {\n      provide: TitleStrategy,\n      useClass: PageTitleService\n    },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor() {\n    registerLocaleData(localeRu);\n  }\n }\n","import { MaterialModule } from './../material/material.module';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { LogoutComponent } from './components/logout/logout.component';\nimport { ConfirmComponent } from './components/confirm/confirm.component';\nimport { PasswordRecoveryComponent } from './components/password-recovery/password-recovery.component';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    LogoutComponent,\n    ConfirmComponent,\n    PasswordRecoveryComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    RouterModule,\n    MaterialModule\n  ],\n\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {PopupService} from \"../../../material/services/popup.service\";\nimport {finalize, tap} from \"rxjs\";\nimport {RegisterService} from \"../../services/register.service\";\nimport { UserService } from 'src/app/api/services';\n\n@Component({\n  selector: 'app-confirm',\n  templateUrl: './confirm.component.html',\n  styleUrls: ['./confirm.component.scss']\n})\n\nexport class ConfirmComponent implements OnInit {\n\n  checkForm: FormGroup;\n  uid!: string;\n  id?: number;\n  loading = false;\n\n  remainingTime: number = 120; // 2 минуты\n  timer: any;\n\n  constructor(\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    private router: Router,\n    public popup: PopupService,\n    private register: RegisterService,\n    private userService: UserService,\n  ) {\n    this.checkForm = this.fb.group({\n      code: ['', [Validators.required] ],\n    });\n  }\n\n  ngOnInit(): void {\n    this.uid = this.route.snapshot.params['uid'];\n    if (!this.uid) {\n      this.router.navigate(['/register']);\n    }\n\n    this.startTimer();\n  }\n  ngOnDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n\n  restartTimer() {\n    // Сбросить оставшееся время и перезапустить таймер\n    this.remainingTime = 120; // 2 минуты\n    clearInterval(this.timer); // остановить старый таймер\n    this.startTimer(); // начать новый таймер\n  }\n\n  get formattedTime(): string {\n    const minutes = Math.floor(this.remainingTime / 60);\n    const seconds = this.remainingTime % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  }\n\n  onSubmitCode() {\n    if (this.remainingTime > 0) {\n      alert(\"Код отправлен!\");\n    } else {\n      alert(\"Время истекло!\");\n    }\n  }\n\n  startTimer() {\n    this.timer = setInterval(() => {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n      } else {\n        clearInterval(this.timer);\n      }\n    }, 1000);\n  }\n\n  doCheck(){\n    if ( !this.checkForm.valid ) {\n      let err = {\n        'error': {\n          'error_message': 'Все поля обязательны к заполнению'\n        }\n      }\n      this.popup.error(err);\n      return;\n    }\n\n    this.loading = true;\n    const uid = this.uid!;\n    const code = this.checkForm.controls['code'].value;\n\n    this.register.confirm( { uid, code } )\n      .pipe(\n        finalize(() => this.loading = false)\n      ).subscribe({\n      next: ( id ) => this.processResult(id),\n      error: err => this.popup.error(err)\n    });\n  }\n\n  processResult( id:number ): void {\n    this.id = id; // вдруг пригодится потом\n    this.router.navigate(['/login']);\n  }\n\n  reSendCode(){\n    this.userService.userSendCode({body:{uid:this.uid}})\n    .pipe(\n      tap((data) => {}),\n    )\n    .subscribe({\n      next: (data:any) => {\n        this.restartTimer();\n      },\n      error: (err) => {}\n    });\n  }\n\n}\n","<div class=\"content\">\n  <div class=\"user-module\">\n    <div class=\"auth-bg\">\n\n      <div class=\"auth-form\">\n        <div class=\"hdr\">\n          <span class=\"logo\"></span>\n          <span class=\"sep\"></span>\n          <span class=\"back\" [routerLink]=\"['/register']\">Проверка кода</span>\n        </div>\n        <div class=\"fm-body\">\n          <form [formGroup]=\"checkForm\" (ngSubmit)=\"doCheck()\">\n            <div class=\"form-row inline sp\">\n              Для проверки актуальности Вашего адреса электронной почты был выслан проверочный код.\n              Введите полученный код в поле ниже.<br>\n              Если письмо не получено и его нет в спаме, то обратитесь к администрации ресурса.\n            </div>\n\n            <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Введите проверочный код:</div>\n                <div class=\"form-input\"><input type=\"text\" formControlName=\"code\" value=\"\" placeholder=\"—\"></div>\n              </div>\n\n              <div class=\"form-item\">\n                <input type=\"submit\" style=\"display: none\">\n                <span class=\"btn alt\" (click)=\"doCheck()\">Подвердить</span>\n              </div>\n            </div>\n\n            <div class=\"form-row inline\">\n              <p *ngIf=\"remainingTime !== 0\">Отправить проверочный код код еще раз, через {{ formattedTime }}</p>\n              <p *ngIf=\"remainingTime === 0\" (click)=\"reSendCode()\" style=\"cursor: pointer; color: var(--accent,  #DB563B);\">Отправить код повторно</p>\n\n              <!-- <div class=\"form-item\">\n\n              </div>\n\n              <div class=\"form-item\">\n\n              </div>\n              <div class=\"form-item\"></div> -->\n            </div>\n\n            <button type=\"submit\" style=\"display: none;\">Submit</button>\n          </form>\n        </div>\n      </div>\n\n    </div>\n\n  </div>\n</div>\n","import { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from './../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport {PopupService} from \"../../../material/services/popup.service\";\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  loading = false;\n\n  passwordVisible = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private auth: AuthService,\n    private router: Router,\n    public popup: PopupService,\n    public dialog: MatDialog,\n    private route: ActivatedRoute,\n  ) {\n    this.loginForm = this.fb.group({\n      login: ['', [Validators.required]],\n      password: ['', Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n  }\n  \n  togglePasswordVisibility() {\n    this.passwordVisible = !this.passwordVisible;\n  }\n\n  doLogin() {\n    console.log(this.loginForm.valid)\n    if (!this.loginForm.valid) {\n      let err = {\n        'error': {\n          'error_message': 'Не заполнены обязательные поля'\n        }\n      }\n      this.popup.error(err);\n      return;\n    }\n    this.loading = true;\n    const login = this.loginForm.controls['login'].value;\n    const password = this.loginForm.controls['password'].value;\n    this.auth.login(login, password)\n      .pipe(\n        finalize(() => this.loading = false)\n      ).subscribe({\n        next: () => this.processLogin(),\n        error: err => this.popup.error(err)\n      });\n  }\n\n  processLogin(): void {\n    const returnUrl = this.route.snapshot.queryParams['returnUrl'];\n    if (returnUrl) {\n      this.router.navigateByUrl(returnUrl);\n    } else {\n      this.router.navigate(['/pages']);\n    }\n  }\n\n}\n","<div class=\"content\">\n  <div class=\"user-module\">\n    <div class=\"auth-bg\">\n      <div class=\"auth-form\">\n        <div class=\"hdr\">\n          <span class=\"logo\"></span>\n        </div>\n        <div class=\"fm-body\">\n          <form autocomplete=\"off\" [formGroup]=\"loginForm\" (ngSubmit)=\"doLogin()\">\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Логин:</div>\n                <div class=\"form-input\"><input type=\"text\" name=\"login\" formControlName=\"login\" placeholder=\"—\"\n                    autocomplete=\"off\"></div>\n              </div>\n              <div class=\"form-item\">\n                <div class=\"form-label\">Пароль:</div>\n                <div class=\"form-input\">\n                  <input [type]=\"passwordVisible ? 'text' : 'password'\"\n                    name=\"password\"\n                    formControlName=\"password\"\n                    placeholder=\"—\"\n                    autocomplete=\"off\"\n                  >\n                  <button type=\"button\" (click)=\"togglePasswordVisibility()\" [class]=\"passwordVisible? 'btn-password password-visible':' btn-password toggle-password'\"></button>\n                </div>\n              </div>\n              <!-- <div class=\"form-item\">\n                <div class=\"form-label\">Пароль:</div>\n                <div class=\"form-input\"><input type=\"password\" name=\"password\" formControlName=\"password\"\n                    placeholder=\"—\" autocomplete=\"off\"></div>\n              </div> -->\n            </div>\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n                <span class=\"forgot\" [routerLink]=\"['/password_recovery']\">\n                  <span class=\"helper\">i</span>\n                  <span >Востановить пароль</span>\n                </span>\n\n                <!-- <span class=\"forgot\">\n                  <span class=\"helper\" (click)=\"popup.note('Test')\">i</span>\n                  <span [routerLink]=\"['/remind']\">Напомнить логин или пароль</span>\n                </span> -->\n              </div>\n              <div class=\"form-item\">\n                <span class=\"btn\" (click)=\"doLogin()\">Войти в систему</span>\n              </div>\n            </div>\n            <div class=\"form-hr\"></div>\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n                <span class=\"desc\">Если у вас еще нет доступа к системе,<br> пройдите быструю регистрацию:</span>\n              </div>\n              <div class=\"form-item\">\n                <span class=\"btn alt\" [routerLink]=\"['/register']\">Регистрация в системе</span>\n              </div>\n            </div>\n            <button type=\"submit\" style=\"display: none;\">Submit</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { AuthService } from './../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { delay } from 'rxjs';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.scss']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor(\n    private auth: AuthService,\n    private router: Router,\n  ) { }\n\n  ngOnInit(): void {\n    this.auth.logout()\n      .pipe(delay(1000))\n      .subscribe(() => this.router.navigateByUrl('/'));\n  }\n}\n","<div class=\"content\">\n  <div class=\"user-module\">\n    <div class=\"auth-bg\">\n\n      <div class=\"auth-form\">\n        <div class=\"hdr\">\n          <span class=\"logo\"></span>\n          <span class=\"sep\"></span>\n          <span>Выход из авторизации</span>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>\n","import { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { finalize, Subject, takeUntil, tap } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport {PopupService} from \"../../../material/services/popup.service\";\nimport { UserService } from 'src/app/api/services';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\n\n\n@Component({\n  selector: 'app-password-recovery',\n  templateUrl: './password-recovery.component.html',\n  styleUrls: ['./password-recovery.component.scss']\n})\nexport class PasswordRecoveryComponent implements OnInit {\n\n  snackBarWithShortDuration: MatSnackBarConfig = { duration: 1000 };\n  snackBarWithLongDuration: MatSnackBarConfig = { duration: 3000 };\n\n  private _destroy$ = new Subject();\n\n  getCodeForm: FormGroup;\n  resetPasswordForm: FormGroup;\n\n  loading = false;\n\n  passwordVisible = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private auth: AuthService,\n    private router: Router,\n    public popup: PopupService,\n    public dialog: MatDialog,\n    private route: ActivatedRoute,\n    private userService: UserService,\n    private snackBar: MatSnackBar,\n  ) {\n    this.getCodeForm = this.fb.group({\n      login: ['', [Validators.required]],\n    });\n    this.resetPasswordForm = this.fb.group({\n      login: ['', [Validators.required]],\n      uid: ['', [Validators.required]],\n      code: ['', Validators.required],\n      password: ['', [Validators.required]],\n      confirm_password: ['', Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n  }\n  \n  togglePasswordVisibility() {\n    this.passwordVisible = !this.passwordVisible;\n  }\n\n  getCode(){\n    this.userService.userSendResetCode({body:this.getCodeForm.value})\n    .pipe(\n      tap((services)=>{}),\n      takeUntil(this._destroy$),\n    )\n    .subscribe({\n      next: (e) => {\n        this.snackBar.open(\n          `Код отправлен на вашу почту`,\n          undefined,\n          this.snackBarWithShortDuration\n        );\n        this.resetPasswordForm.patchValue({\n          login: this.getCodeForm.value.login,\n          uid: e.uid,\n          // code: event.CODE.toString(),\n        });\n      },\n      error: (err) => {\n        this.snackBar.open(\n          `Ошибка отправки проверочного кода: ` + err.error.error_message,\n          undefined,\n          this.snackBarWithShortDuration\n        );\n      }\n    });\n    \n    // .subscribe((event: any) => {\n    //   console.log(event);\n    //   this.resetPasswordForm.patchValue({\n    //     login: this.getCodeForm.value.login,\n    //     uid: event.uid,\n    //     // code: event.CODE.toString(),\n    //   })\n    // });\n    \n  }\n\n  onResetPassword(){\n    // this.resetPasswordForm.patchValue({\n    //   code: this.resetPasswordForm.value.code.toString()\n    // })\n    this.userService.userResetPassword({body:this.resetPasswordForm.value})\n    .pipe(\n      tap((services)=>{}),\n      takeUntil(this._destroy$),\n    )\n    .subscribe({\n      next: (e) => {\n        this.snackBar.open(\n          `Пароль успешно изменен`,\n          undefined,\n          this.snackBarWithShortDuration\n        );\n        this.router.navigate(['/login']);\n      },\n      error: (err) => {\n        this.snackBar.open(\n          `Ошибка изменения пароля: ` + err.error.error_message,\n          undefined,\n          this.snackBarWithShortDuration\n        );\n      }\n    });\n    \n  }\n\n}\n","<div class=\"content\">\n  <div class=\"user-module\">\n    <div class=\"auth-bg\">\n      <div class=\"auth-form\">\n        <div class=\"hdr\">\n          <span class=\"logo\"></span>\n        </div>\n        <div class=\"fm-body\">\n\n          <form *ngIf=\"!resetPasswordForm.value.uid\" autocomplete=\"off\" [formGroup]=\"getCodeForm\" (ngSubmit)=\"getCode()\">\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Логин:</div>\n                <div class=\"form-input\">\n                  <input formControlName=\"login\"\n                    type=\"text\"\n                    name=\"login\"\n                    placeholder=\"—\"\n                    autocomplete=\"off\"\n                  >\n                </div>\n              </div>\n            </div>\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n                <span class=\"btn\" (click)=\"getCode()\">Получить код для сменны пароля</span>\n              </div>\n            </div>\n            <button type=\"submit\" style=\"display: none;\">Submit</button>\n          </form>\n\n          <form *ngIf=\"resetPasswordForm.value.uid\" autocomplete=\"off\" [formGroup]=\"resetPasswordForm\" (ngSubmit)=\"onResetPassword()\">\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Логин:</div>\n                <div class=\"form-input\">\n                  <input formControlName=\"login\"\n                    type=\"text\"\n                    name=\"login\"\n                    placeholder=\"—\"\n                    autocomplete=\"off\"\n                    readonly\n                  >\n\n                </div>\n              </div>\n              <div class=\"form-item\">\n                <div class=\"form-label\">Код:</div>\n                <div class=\"form-input\">\n                  <input formControlName=\"code\"\n                    type=\"text\"\n                    name=\"login\"\n                    placeholder=\"—\"\n                    autocomplete=\"off\"\n                  >\n\n                </div>\n              </div>\n            </div>\n            <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Введите новый пароль:</div>\n                <div class=\"form-input\">\n                  <input [type]=\"passwordVisible ? 'text' : 'password'\" autocomplete=\"off\" formControlName=\"password\" placeholder=\"\">\n                  <button type=\"button\" (click)=\"togglePasswordVisibility()\" [class]=\"passwordVisible? 'btn-password password-visible':' btn-password toggle-password'\"></button>\n                </div>\n              </div>\n              <div class=\"form-item\">\n                <div class=\"form-label\">Подтвердите пароль:</div>\n                <div class=\"form-input\">\n                  <input [type]=\"passwordVisible ? 'text' : 'password'\" autocomplete=\"off\" formControlName=\"confirm_password\" placeholder=\"\">\n                  <button type=\"button\" (click)=\"togglePasswordVisibility()\" [class]=\"passwordVisible? 'btn-password password-visible':' btn-password toggle-password'\"></button>\n                </div>\n              </div>\n              <!-- <div class=\"form-item\">\n                <div class=\"form-label\">Введите новый пароль:</div>\n                <div class=\"form-input\">\n                  <input [type]=\"passwordVisible ? 'text' : 'password'\" autocomplete=\"off\" formControlName=\"password\" value=\"\" placeholder=\"\">\n                  <button type=\"button\" (click)=\"togglePasswordVisibility()\" class=\"toggle-password\">\n                    {{ passwordVisible ? 'Скрыть' : 'Показать' }}\n                  </button>\n                </div>\n              </div>\n              <div class=\"form-item\">\n                <div class=\"form-label\">Подтвердите пароль:</div>\n                <div class=\"form-input\">\n                  <input [type]=\"passwordVisible ? 'text' : 'password'\"autocomplete=\"off\" formControlName=\"confirm_password\" value=\"\" placeholder=\"\">\n                  <button type=\"button\" (click)=\"togglePasswordVisibility()\" class=\"toggle-password\">\n                    {{ passwordVisible ? 'Скрыть' : 'Показать' }}\n                  </button>\n                </div>\n              </div> -->\n            </div>\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n                <span class=\"btn\" (click)=\"onResetPassword()\">Изменить пароль</span>\n              </div>\n            </div>\n            <button type=\"submit\" style=\"display: none;\">Submit</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { emailValidator, innValidator } from './../../../validators';\nimport { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {Router} from \"@angular/router\";\nimport {RegisterService} from \"../../services/register.service\";\nimport {PopupDialogData} from \"../../../material/components/popup-dialog/popup-dialog-data\";\nimport {PopupDialogComponent} from \"../../../material/components/popup-dialog/popup-dialog.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport {PopupService} from \"../../../material/services/popup.service\";\nimport {finalize} from \"rxjs\";\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\n\nexport class RegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  loading = false;\n  errorMessage?: string;\n  uid?: string;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    private register: RegisterService,\n    public popup: PopupService,\n    public dialog: MatDialog\n  ) {\n    this.registerForm = this.fb.group({\n      company: ['', [Validators.required] ],\n      fio: ['', [Validators.required] ],\n      phone: ['', [Validators.required] ],\n      inn: ['', [Validators.required, innValidator ] ],\n      email: ['', [Validators.required, emailValidator] ],\n      password: ['', [Validators.required] ],\n      password_confirm: ['', [Validators.required] ],\n    });\n\n  }\n\n  ngOnInit(): void {\n  }\n\n  checkAllFieldsFilled(): boolean {\n    // Проверяем, что все поля формы заполнены\n    return Object.keys(this.registerForm.controls).every(field => {\n      const control = this.registerForm.get(field);\n      return control?.value !== '';\n    });\n  }\n\n  formatPhone(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    let value = input.value.replace(/\\D/g, ''); // Удаляем все нецифровые символы\n\n    // Ограничиваем длину номера (например, 11 цифр для России)\n    if (value.length > 11) {\n      value = value.substring(0, 11);\n    }\n\n    value = '+7' + value.substring(1);\n    this.registerForm.get('phone')?.setValue(value, { emitEvent: false }); // Обновляем форму\n  }\n\n  get _email() {\n    return this.registerForm.get('email')\n  }\n  get _inn() {\n    return this.registerForm.get('inn')\n  }\n\n  doRegister() {\n    console.log(this.registerForm);\n    console.log(this.registerForm.valid);\n\n    if ( !this.checkAllFieldsFilled() ) {\n      let err = {\n        'error': {\n          'error_message': 'Все поля обязательны к заполнению'\n        }\n      }\n      this.popup.error(err);\n      return;\n    }\n\n\n    // if ( !this.registerForm.valid ) {\n    //   let err = {\n    //     'error': {\n    //       'error_message': 'Все поля обязательны к заполнению'\n    //     }\n    //   }\n    //   this.popup.error(err);\n    //   return;\n    // }\n\n    let error_message: string[] = [];\n\n    if ( this._email?.errors?.['email'] ) {\n      error_message.push('E-mail введен не верно');\n    }\n\n    if ( this._inn?.errors?.['inn']  ) {\n      error_message.push('ИНН введен не верно');\n    }\n\n    if( error_message.length > 0 ){\n      let err = {\n        'error': {\n          'error_message': error_message\n        }\n      }\n      this.popup.error(err);\n      return;\n    }\n\n    this.loading = true;\n    const company = this.registerForm.controls['company'].value;\n    const fio = this.registerForm.controls['fio'].value;\n    const phone = this.registerForm.controls['phone'].value;\n    const inn = this.registerForm.controls['inn'].value;\n    const email = this.registerForm.controls['email'].value;\n    const password = this.registerForm.controls['password'].value;\n    const password_confirm = this.registerForm.controls['password_confirm'].value;\n\n    this.register.save( { company, fio, phone, inn, email, password, password_confirm } )\n      .pipe(\n        finalize(() => this.loading = false)\n      ).subscribe({\n      next: ( uid ) => this.processConfirm(uid),\n      error: err => this.popup.error(err)\n    });\n  }\n\n  processConfirm( uid:string ): void {\n    this.router.navigate(['/confirm/'+uid]);\n  }\n\n}\n","<div class=\"content\">\n  <div class=\"user-module\">\n    <div class=\"auth-bg\">\n\n      <div class=\"auth-form\">\n        <div class=\"hdr\">\n          <span class=\"logo\"></span>\n          <span class=\"sep\"></span>\n          <span class=\"back\" [routerLink]=\"['/auth']\">Регистрация</span>\n        </div>\n        <div class=\"fm-body\">\n          <form [formGroup]=\"registerForm\" (ngSubmit)=\"doRegister()\">\n            <div class=\"form-row sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Название компании::</div>\n                <div class=\"form-input\"><input type=\"text\" formControlName=\"company\" value=\"\" placeholder=\"—\"></div>\n              </div>\n            </div>\n            <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Ответственное лицо:</div>\n                <div class=\"form-input\"><input type=\"text\" formControlName=\"fio\" value=\"\" placeholder=\"—\"></div>\n              </div>\n              <div class=\"form-item\">\n                <div class=\"form-label\">Номер телефона:</div>\n                <div class=\"form-input\"><input type=\"text\" (input)=\"formatPhone($event)\" formControlName=\"phone\" value=\"\" placeholder=\"—\" ></div>\n              </div>\n            </div>\n\n            <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">ИНН:</div>\n                <div class=\"form-input\"><input type=\"text\" formControlName=\"inn\" value=\"\" placeholder=\"—\"></div>\n              </div>\n              <div class=\"form-item\">\n                <div class=\"form-label\">E-mail:</div>\n                <div class=\"form-input\"><input type=\"text\" formControlName=\"email\" value=\"\" placeholder=\"—\"></div>\n              </div>\n            </div>\n\n            <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Введите пароль:</div>\n                <div class=\"form-input\"><input type=\"password\" formControlName=\"password\" value=\"\" placeholder=\"\"></div>\n              </div>\n              <div class=\"form-item\">\n                <div class=\"form-label\">Подтвердите пароль:</div>\n                <div class=\"form-input\"><input type=\"password\" formControlName=\"password_confirm\" value=\"\" placeholder=\"\"></div>\n              </div>\n            </div>\n\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n\n              </div>\n              <div class=\"form-item\">\n                <input type=\"submit\" style=\"display: none\">\n                <span class=\"btn alt\" (click)=\"doRegister()\">Зарегистрироваться</span>\n              </div>\n            </div>\n            <button type=\"submit\" style=\"display: none;\">Submit</button>\n          </form>\n        </div>\n      </div>\n\n    </div>\n\n  </div>\n</div>\n","import { TokenInfo } from './../../api/custom_models/token-info';\nimport { UserService } from './../../api/services/user.service';\nimport { map, Observable, of, tap } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\nconst TOKEN_INFO_KEY = 'com.cargodrom.token-info';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private tokenInfo?: TokenInfo;\n  readonly storage = window.localStorage; // window.sessionStorage;\n\n  constructor(\n    private userService: UserService\n  ) {\n    this.loadTokenFromStorage();\n  }\n\n  login(login: string, password: string): Observable<void> {\n    return this.userService.userLogin({ body: { login, password } })\n      .pipe(\n        tap(res => this.tokenInfo = res),\n        tap(() => this.saveTokenToStorage()),\n        map(() => undefined)\n      );\n  }\n\n  isAuthenticated(): boolean {\n    this.loadTokenFromStorage();\n    return typeof this.tokenInfo?.token !== 'undefined';\n  }\n\n  logout(): Observable<void> {\n    this.tokenInfo = undefined;\n    this.removeTokenFromLocalStorage();\n    return of(undefined);\n  }\n\n  getToken(): string | undefined {\n    return this.tokenInfo?.token;\n  }\n\n  private loadTokenFromStorage(): void {\n    const tokenInfoString = this.storage.getItem(TOKEN_INFO_KEY);\n    if (!tokenInfoString) {\n      this.tokenInfo=undefined;\n      return;\n    }\n    try {\n      const tokenInfo = JSON.parse(tokenInfoString);\n      if (tokenInfo) {\n        this.tokenInfo = tokenInfo;\n      }\n    } catch (e) {\n      console.log(`unable to load token from local storage`, e);\n    }\n  }\n\n  private saveTokenToStorage(): void {\n    this.storage.setItem(TOKEN_INFO_KEY, JSON.stringify(this.tokenInfo));\n  }\n\n  private removeTokenFromLocalStorage(): void {\n    this.storage.removeItem(TOKEN_INFO_KEY);\n  }\n\n  isTokenExpired(): boolean {\n    if (this.tokenInfo?.token_expire) {\n      try {\n        const expireDate = new Date(this.tokenInfo?.token_expire);\n        const now = new Date();\n        return (expireDate.getTime() - now.getTime()) < 10000;\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  refreshToken(): Observable<void> {\n    const body = { refresh_token: this.tokenInfo!.refresh_token };\n    return this.userService.userUpdateToken({body}).pipe(\n      tap(res => this.tokenInfo = res as TokenInfo),\n      tap(() => this.saveTokenToStorage()),\n      map(() => undefined)\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport {map, Observable, tap} from \"rxjs\";\nimport {UserService} from \"../../api/services/user.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n\n  public userId:number|undefined;\n\n  constructor(\n    private userService: UserService\n  ) { }\n\n  save( body: { password: string; password_confirm: string; phone: string; inn: string; company: string; fio: string; email: string  }): Observable<string> {\n    return this.userService.userCreate( { body } )\n      .pipe(\n        map(res => res.uid)\n      );\n  }\n\n  confirm( body: { uid: string; code: string; }): Observable<number> {\n    return this.userService.userConfirm( { body } )\n      .pipe(\n        map(res => res.id!)\n      );\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserGuard  {\n\n  constructor(\n    private auth: AuthService,\n    private router: Router,\n  ) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const isAuthenticated = this.auth.isAuthenticated();\n    if (isAuthenticated) {\n      this.router.navigate(['/pages']);\n      return false;\n    }\n    return !isAuthenticated;\n  }\n\n}\n","import { AuthService } from './auth/services/auth.service';\nimport { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { catchError, Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(\n    private auth: AuthService,\n    private router: Router,\n  ) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(catchError(e => {\n      if (e.status === 401) {\n        const currentState = { returnUrl: this.router.url };\n        this.auth.logout().subscribe(\n          () => this.router.navigate(['/login'], { queryParams: currentState })\n        );\n      }\n      else if (e.status === 403) {\n        const currentState = { returnUrl: this.router.url };\n        this.auth.logout().subscribe(\n          () => this.router.navigate(['/pages'], { queryParams: currentState })\n        );\n      }\n      else {\n      }\n      throw e;\n    }));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\nimport { LoaderService } from '../loader/loader.service';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n  constructor(private loadingService: LoaderService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.loadingService.show();\n    return next.handle(req).pipe(\n      finalize(() => this.loadingService.hide()),\n      catchError(err => {\n        this.loadingService.hide();\n        return throwError(() => err);\n      })\n    );\n  }\n}","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\nimport { LoaderService } from './loader.service';\n\n// loader.component.ts\n@Component({\n  selector: 'app-global-loader',\n  template: `\n    <div *ngIf=\"isLoading\" class=\"global-loader\">\n      <div class=\"spinner\"></div>\n      <!-- <div class=\"debug-info\">\n        Debug: {{ debugInfo }}\n      </div> -->\n    </div>\n  `,\n  styleUrls: ['./loader.component.css']\n})\nexport class LoaderComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  debugInfo = '';\n  private subscription?: Subscription;\n\n  constructor(\n    public loadingService: LoaderService,\n  ) {}\n\n  ngOnInit() {\n    console.log('[LoaderComponent] Component initialized');\n    this.subscription = this.loadingService.isLoading$.subscribe(loading => {\n      console.log(`[LoaderComponent] Loading state changed: ${loading}`);\n      this.isLoading = loading;\n      this.debugInfo = `Active: ${loading}`;\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class LoaderService {\n  private activeRequests = 0;\n  private isLoadingSubject = new BehaviorSubject<boolean>(false);\n  public isLoading$ = this.isLoadingSubject.asObservable();\n\n  show(): void {\n    this.activeRequests++;\n    if (this.activeRequests === 1) {\n      this.isLoadingSubject.next(true);\n    }\n  }\n\n  hide(): void {\n    if (this.activeRequests > 0) this.activeRequests--;\n    if (this.activeRequests === 0) {\n      setTimeout(() => {\n        if (this.activeRequests === 0) {\n          this.isLoadingSubject.next(false);\n        }\n      }, 100); // Задержка скрытия\n    }\n  }\n}","import { Location } from '@angular/common';\nimport { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { NavigationHistoryService } from 'src/app/pages/services/navigation-history.service';\n\n@Component({\n  selector: 'app-editor-header',\n  templateUrl: './editor-header.component.html',\n  styleUrls: ['./editor-header.component.scss']\n})\nexport class EditorHeaderComponent implements OnInit {\n\n  @Input() title: string = '';\n  @Input() isEditMode = false;\n  @Input() name?: string;\n  @Output() save = new EventEmitter<void>();\n  @Output() remove = new EventEmitter<void>();\n  @Output() calc = new EventEmitter<void>();\n  @Input() isCalck = false;\n  @Input() content: boolean = false;\n  @Input() request: any={};\n  @Output() send = new EventEmitter<void>();\n  @Input() isSend = false;\n  @Input() backLink:string = '';\n\n  constructor(\n    private location: Location,\n    private navigationHistoryService: NavigationHistoryService,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  onSave(): void {\n    this.save.emit();\n  }\n\n  onRemove(): void {\n    this.remove.emit();\n  }\n\n  goBack(): void {\n    // this.location.back();\n    this.navigationHistoryService.back(this.backLink)\n  }\n\n  goCalc():void{\n    this.calc.emit();\n  }\n\n  onSend():void{\n    this.send.emit();\n  }\n\n}\n","<div class=\"subheader\">\n  <div class=\"placer\">\n    <a (click)=\"goBack()\" class=\"title\" *ngIf=\"!content\">\n      {{ title }}\n      <div class=\"req-fields\" *ngIf=\"!isEditMode\">Обязательные поля: <span class=\"req\">•</span> </div>\n      <div class=\"req-fields\" *ngIf=\"isEditMode\">{{ name }}</div>\n    </a>\n\n    <a (click)=\"goBack()\" class=\"title\" *ngIf=\"content\" style=\"color:#DB563B\">\n      {{ title }}\n      <div class=\"req-fields\" *ngIf=\"!isEditMode\">Обязательные поля: <span class=\"req\">•</span> </div>\n    </a>\n\n    <div class=\"title\" *ngIf=\"content\" style=\"border-left: 1px solid #C3CCD6; padding-left: 24px;\">\n      Запрос №{{request?.id}}\n      <div class=\"req-fields\">{{request?.rate_contractor_name}} </div>\n    </div>\n\n    <div class=\"div\" style=\"margin: 0 auto; width: 1px;\"></div>\n\n\n\n    <ng-content select=\"[btns]\"></ng-content>\n\n    <div class=\"fn\" *ngIf=\"!content\">\n      <span *ngIf=\"isSend\" class=\"btn v send\" (click)=\"onSave()\"><span>отправить</span></span>\n      <span class=\"btn v save\" (click)=\"onSave()\"><span>сохранить</span></span>\n      <span class=\"btn v calc\" *ngIf=\"isEditMode && isCalck\" (click)=\"goCalc()\"><span>расчитать</span></span>\n      <span class=\"btn v del\" *ngIf=\"isEditMode\" (click)=\"onRemove()\"><span>Удалить</span></span>\n      <span class=\"btn v cancel\" (click)=\"goBack()\"><span>отмена</span></span>\n    </div>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'app-paginator',\n  templateUrl: './paginator.component.html',\n  styleUrls: ['./paginator.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class PaginatorComponent implements OnInit, OnChanges {\n  @Input() total = 0;\n  @Input() count = 0;\n  @Input() start = 0;\n  @Input() limits: number[] = [10, 50, 100];\n\n  @Output() startChange = new EventEmitter<number>();\n  @Output() countChange = new EventEmitter<number>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n  }\n\n  get first(): number {\n    return this.start + 1;\n  }\n\n  get last(): number {\n    return Math.min(this.start + this.count, this.total);\n  }\n\n  get currentPage(): number {\n    return Math.ceil(this.start / this.count);\n  }\n\n  get prevPage(): number {\n    return this.currentPage - 1;\n  }\n\n  get nextPage(): number {\n    return this.currentPage + 1;\n  }\n\n  get nextNextPage(): number {\n    return this.currentPage + 2;\n  }\n\n  get prevPrevPage(): number {\n    return this.currentPage - 2;\n  }\n\n  get lastPage(): number {\n    return Math.ceil(this.total / this.count) - 1;\n  }\n\n  goToPage(page: number): void {\n    this.startChange.emit(page * this.count);\n  }\n\n  newCountSelected(count: number | string): void {\n    this.countChange.emit(+count);\n  }\n  \n  userPage(page: number ): number {\n    return page + 1;\n  }\n\n}\n","<div class=\"table-footer\" >\n  <ng-container *ngIf=\"total!=0\">\n    <div class=\"limit\">\n      <!-- <mat-form-field appearance=\"outline\" class=\"ui-select\"> -->\n        <mat-select [ngModel]=\"count\" (ngModelChange)=\"newCountSelected($event)\" style=\"width: 180px;\">\n          <mat-option *ngFor=\"let limit of limits\" [value]=\"limit\">Показывать по {{ limit }}</mat-option>\n        </mat-select>\n      <!-- </mat-form-field> -->\n      <span class=\"note\">Показаны: {{first}} - {{last}} из {{total}}</span>\n    </div>\n    <div class=\"pages\">\n      <div class=\"navigator\">\n        <a class=\"item arrow left icon icon-control-rewind\" (click)=\"goToPage(prevPage)\" *ngIf=\"currentPage > 0\"></a>\n        <a class=\"item first icon icon-control-start\" (click)=\"goToPage(0)\" *ngIf=\"currentPage > 2\">1</a>\n        <span class=\"dot\" *ngIf=\"currentPage > 0\">. . .</span>\n        <a class=\"item\" (click)=\"goToPage(prevPrevPage)\" *ngIf=\"currentPage > 1\">{{ userPage(prevPrevPage) }}</a>\n        <a class=\"item\" (click)=\"goToPage(prevPage)\" *ngIf=\"currentPage > 0\">{{ userPage(prevPage) }}</a>\n        <span class=\"item sel\">{{ userPage(currentPage) }}</span>\n        <a class=\"item\" (click)=\"goToPage(nextPage)\" *ngIf=\"currentPage < lastPage\">{{ userPage(nextPage) }}</a>\n        <a class=\"item\" (click)=\"goToPage(nextNextPage)\" *ngIf=\"currentPage < lastPage - 1\">{{ userPage(nextNextPage) }}</a>\n        <span class=\"dot\" *ngIf=\"currentPage < lastPage\">. . .</span>\n        <a class=\"item last icon icon-control-end\" (click)=\"goToPage(lastPage)\" *ngIf=\"currentPage < lastPage - 1\">{{userPage(lastPage)}}</a>\n        <a class=\"item arrow right icon icon-control-forward\" (click)=\"goToPage(nextPage)\" *ngIf=\"currentPage < lastPage\"></a>\n      </div>\n    </div>\n  </ng-container>\n</div>","import { Component, Inject, OnInit, ViewEncapsulation  } from '@angular/core';\nimport {  MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { PopupDialogData } from './popup-dialog-data';\nimport {DomSanitizer, SafeHtml} from \"@angular/platform-browser\";\n\n@Component({\n  selector: 'app-popup-dialog',\n  templateUrl: './popup-dialog.component.html',\n  styleUrls: ['./popup-dialog.component.scss'],\n  encapsulation : ViewEncapsulation.None\n})\nexport class PopupDialogComponent implements OnInit {\n\n  trustedMessages: SafeHtml[];\n\n  constructor(\n    private sanitizer: DomSanitizer,\n    @Inject(MAT_DIALOG_DATA) public data: PopupDialogData\n  ) {\n    this.trustedMessages = data.messages.map(message => this.sanitizer.bypassSecurityTrustHtml( message ));\n  }\n\n  ngOnInit(): void {\n  }\n\n\n}\n","<h1 mat-dialog-title>{{ data.title }}</h1>\n<span class=\"close\" mat-dialog-close></span>\n<div mat-dialog-content>\n  <p *ngFor=\"let message of trustedMessages\" [innerHTML]=\"message\"></p>\n</div>\n<div mat-dialog-actions>\n  <span class=\"mat-button\" mat-button mat-dialog-close>Закрыть</span>\n</div>\n","import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appFocusInitial]'\n})\nexport class FocusInitialDirective implements AfterViewInit {\n\n  constructor(\n    private element: ElementRef,\n  ) { }\n\n  ngAfterViewInit(): void {\n    this.element.nativeElement.focus();\n  }\n\n}\n","import { Directive, ElementRef, HostListener } from '@angular/core';\n\n@Directive({\n  selector: 'input[appPhoneMask]'\n})\nexport class PhoneMaskDirective {\n  private input: HTMLInputElement;\n\n  constructor(private el: ElementRef) {\n    this.input = el.nativeElement as HTMLInputElement;\n  }\n  \n  private getInputNumbersValue() {\n    // Return stripped input value — just numbers\n    return this.input.value.replace(/\\D/g, '');\n  }\n\n  @HostListener('paste', ['$event'])\n  onPhonePaste(e: ClipboardEvent) {\n    const input = this.input;\n    const inputNumbersValue = this.getInputNumbersValue();\n    const pasted = e.clipboardData || (window as any).clipboardData;\n    if (pasted) {\n      const pastedText = pasted.getData('Text');\n      if (/\\D/g.test(pastedText)) {\n        // Attempt to paste non-numeric symbol — remove all non-numeric symbols,\n        // formatting will be in onPhoneInput handler\n        input.value = inputNumbersValue;\n        return;\n      }\n    }\n  }\n\n  @HostListener('input', ['$event'])\n  onPhoneInput(e: Event): void {\n    const input = this.input;\n    let inputNumbersValue = this.getInputNumbersValue();\n    const selectionStart = input.selectionStart;\n    let formattedInputValue = \"\";\n\n    if (!inputNumbersValue) {\n      input.value = \"\";\n      return;\n    }\n\n    if (input.value.length != selectionStart) {\n      // Editing in the middle of input, not last symbol\n      if ((e as any).data && /\\D/g.test((e as any).data)) {\n        // Attempt to input non-numeric symbol\n        input.value = inputNumbersValue;\n      }\n      return;\n    }\n\n    if ([\"7\", \"8\", \"9\"].indexOf(inputNumbersValue[0]) > -1) {\n      if (inputNumbersValue[0] == \"9\") {\n        inputNumbersValue = \"7\" + inputNumbersValue;\n      }\n      const firstSymbols = (inputNumbersValue[0] == \"8\") ? \"+7\" : \"+7\";\n      formattedInputValue = input.value = firstSymbols + \" \";\n      if (inputNumbersValue.length > 1) {\n        formattedInputValue += '(' + inputNumbersValue.substring(1, 4);\n      }\n      if (inputNumbersValue.length >= 5) {\n        formattedInputValue += ') ' + inputNumbersValue.substring(4, 7);\n      }\n      if (inputNumbersValue.length >= 8) {\n        formattedInputValue += '-' + inputNumbersValue.substring(7, 9);\n      }\n      if (inputNumbersValue.length >= 10) {\n        formattedInputValue += '-' + inputNumbersValue.substring(9, 11);\n      }\n    } else {\n      formattedInputValue = '+' + inputNumbersValue.substring(0, 16);\n    }\n    input.value = formattedInputValue;\n  }\n\n  @HostListener('blur', ['$event'])\n  onPhoneBlur(e: Event) {\n    const input = this.input;\n    const inputNumbersValue = this.getInputNumbersValue();\n\n    if ([\"7\"].indexOf(inputNumbersValue[0]) > -1) {\n      if (inputNumbersValue.length < 11) {\n        input.value = '';\n      }\n    } else {\n      if (inputNumbersValue.length < 16) {\n        input.value = '';\n      }\n    }\n  }\n\n  @HostListener('keydown', ['$event'])\n  onPhoneKeyDown(e: KeyboardEvent) {\n    const input = this.input;\n    // Clear input after remove last symbol\n    var inputValue = input.value.replace(/\\D/g, '');\n    if (e.keyCode == 8 && inputValue.length == 1) {\n      input.value = \"\";\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// Material Modules\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\n\n// CDK Modules\nimport { DragDropModule } from '@angular/cdk/drag-drop'; // <-- Добавьте этот импорт\nimport {OverlayModule} from '@angular/cdk/overlay';\n\n// DateAdapter Configuration\nimport {\n  DateAdapter,\n  MAT_DATE_FORMATS,\n  MAT_DATE_LOCALE,\n  MatNativeDateModule\n} from '@angular/material/core';\nimport { CustomDateAdapter } from '../adapters/custom-date.adapter';\n\n// Components & Directives\nimport { PopupDialogComponent } from './components/popup-dialog/popup-dialog.component';\nimport { PaginatorComponent } from './components/paginator/paginator.component';\nimport { EditorHeaderComponent } from './components/editor-header/editor-header.component';\nimport { FocusInitialDirective } from './directives/focus-initial.directive';\nimport { PhoneMaskDirective } from './directives/phone-mask.directive';\n\nimport {MatIconModule} from '@angular/material/icon';\n\n@NgModule({\n  declarations: [\n    PopupDialogComponent,\n    PaginatorComponent,\n    EditorHeaderComponent,\n    FocusInitialDirective,\n    PhoneMaskDirective,\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    // Material Modules\n    MatDialogModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatSnackBarModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatTableModule,\n    MatButtonToggleModule,\n    MatTabsModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    DragDropModule, // <-- Добавьте этот модуль в imports\n    OverlayModule,\n\n    MatIconModule,\n  ],\n  providers: [\n    {\n      provide: DateAdapter,\n      useClass: CustomDateAdapter,\n      deps: [MAT_DATE_LOCALE]\n    },\n  ],\n  exports: [\n    // Re-export all Material modules\n    MatDialogModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatSnackBarModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatButtonModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatTableModule,\n    MatButtonToggleModule,\n    MatTabsModule,\n    MatMenuModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    \n    DragDropModule, // <-- И экспортируйте его\n    OverlayModule,\n\n    // Your custom components & directives\n    PopupDialogComponent,\n    PaginatorComponent,\n    EditorHeaderComponent,\n    FocusInitialDirective,\n    PhoneMaskDirective,\n\n    MatIconModule,\n  ]\n})\nexport class MaterialModule {}\n\n// import { Injectable, NgModule } from '@angular/core';\n// import { CommonModule } from '@angular/common';\n// import { RouterModule } from '@angular/router';\n// import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// import { MatDialogModule } from '@angular/material/dialog';\n// import { MatFormFieldModule } from '@angular/material/form-field';\n// import { MatSelectModule } from '@angular/material/select';\n// import { MatSnackBarModule } from '@angular/material/snack-bar';\n// import { MatAutocompleteModule } from '@angular/material/autocomplete';\n// import { MatInputModule } from '@angular/material/input';  // Добавлено\n// import { MatCheckboxModule } from '@angular/material/checkbox';\n// import { MatButtonModule } from '@angular/material/button';\n// import { MatDatepickerModule } from '@angular/material/datepicker';\n// import { MatTableModule } from '@angular/material/table';\n// import { MatButtonToggleModule } from '@angular/material/button-toggle';\n// import { MatTabsModule } from '@angular/material/tabs';\n// import { MatMenuModule } from '@angular/material/menu';\n// import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n// import { PopupDialogComponent } from './components/popup-dialog/popup-dialog.component';\n// import { PaginatorComponent } from './components/paginator/paginator.component';\n// import { EditorHeaderComponent } from './components/editor-header/editor-header.component';\n// import { FocusInitialDirective } from './directives/focus-initial.directive';\n// import { PhoneMaskDirective } from './directives/phone-mask.directive';\n// import { MatNativeDateModule, NativeDateAdapter } from '@angular/material/core';  // Опционально, если используется стандартный адаптер\n// import {MatRadioModule} from '@angular/material/radio';\n\n// @Injectable()\n// export class AppDateAdapter extends NativeDateAdapter {\n//   override getFirstDayOfWeek(): number {\n//     return 1;\n//   }\n//   override parse(value: any,): Date | null {\n//     if((typeof value === 'string') && (value.indexOf('/') > -1)) {\n//       const str = value.split('/');\n//       const year = Number(str[0]);\n//       const month = Number(str[1]) - 1;\n//       const date = Number(str[2]);\n//       return new Date(year, month, date);\n//     }\n//     const timestamp = typeof value === 'number' ? value : Date.parse(value);\n//     return isNaN(timestamp) ? null : new Date(timestamp);\n//   }\n//   override format(date: Date, displayFormat: string): string {\n//     if(displayFormat === 'input') {\n//       const day = date.getDate();\n//       const month = date.getMonth() + 1;\n//       const year = date.getFullYear();\n//       return `${year}/${month}/${day}`;\n//     } else if(displayFormat === 'inputMonth') {\n//       const month = date.getMonth() + 1;\n//       const year = date.getFullYear();\n//       return `${year}/${month}`;\n//     } else {\n//       return date.toDateString();\n//     }\n//   }\n\n// }\n\n// @NgModule({\n//   declarations: [\n//     PopupDialogComponent,\n//     PaginatorComponent,\n//     EditorHeaderComponent,\n//     FocusInitialDirective,\n//     PhoneMaskDirective,\n//   ],\n//   imports: [\n//     CommonModule,\n//     RouterModule,\n//     FormsModule,\n//     ReactiveFormsModule,\n//     MatDialogModule,\n//     MatFormFieldModule,\n//     MatSelectModule,\n//     MatSnackBarModule,\n//     MatAutocompleteModule,\n//     MatInputModule,  // Добавлено\n//     MatCheckboxModule,\n//     MatButtonModule,\n//     MatDatepickerModule,\n//     MatTableModule,\n//     MatButtonToggleModule,\n//     MatTabsModule,\n//     MatMenuModule,\n//     MatProgressSpinnerModule,\n//     MatNativeDateModule,  // Только если используете стандартный адаптер\n//     MatRadioModule,\n//   ],\n//   exports: [\n//     MatDialogModule,\n//     MatFormFieldModule,\n//     MatSelectModule,\n//     MatSnackBarModule,\n//     MatAutocompleteModule,\n//     MatInputModule,\n//     MatCheckboxModule,\n//     PopupDialogComponent,\n//     PaginatorComponent,\n//     EditorHeaderComponent,\n//     MatButtonModule,\n//     MatDatepickerModule,\n//     FocusInitialDirective,\n//     MatTableModule,\n//     PhoneMaskDirective,\n//     MatButtonToggleModule,\n//     MatTabsModule,\n//     MatMenuModule,\n//     MatProgressSpinnerModule,\n//     MatNativeDateModule,\n//     MatRadioModule,\n//   ]\n// })\n// export class MaterialModule {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { RouterModule } from '@angular/router';\n// import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n// import { NgModule } from '@angular/core';\n// import { CommonModule } from '@angular/common';\n// import { MatDialogModule } from '@angular/material/dialog';\n// import { MatSelectModule } from '@angular/material/select';\n// import { MatFormFieldModule } from '@angular/material/form-field';\n// // import { MatNativeDateModule } from '@angular/material/core';\n// // import { MatOptionModule } from '@angular/material/core';\n// import { MatSnackBarModule } from '@angular/material/snack-bar';\n// import { PopupDialogComponent } from './components/popup-dialog/popup-dialog.component';\n// import { MatAutocompleteModule } from '@angular/material/autocomplete';\n// import { MatInputModule } from '@angular/material/input';\n// import { MatCheckboxModule } from '@angular/material/checkbox';\n// import { PaginatorComponent } from './components/paginator/paginator.component';\n// import { EditorHeaderComponent } from './components/editor-header/editor-header.component';\n// import { MatButtonModule } from '@angular/material/button';\n// // import { MatDateRangePicker, MatDatepickerModule } from '@angular/material/datepicker';\n// import { FocusInitialDirective } from './directives/focus-initial.directive';\n// import { MatTableModule} from '@angular/material/table';\n// import { PhoneMaskDirective } from './directives/phone-mask.directive';\n// // import { MatButtonToggleModule} from '@angular/material/button-toggle';\n// import { MatTabsModule} from '@angular/material/tabs';\n// import { MatMenuModule} from '@angular/material/menu';\n// import { MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n// // import { MatOptionModule } from '@angular/material/select';\n// // import { MatNativeDateModule } from '@angular/material/datepicker';\n\n// import { MatButtonToggleModule } from '@angular/material/button-toggle';\n// import { MatDatepickerModule, MatDateRangePicker, MatNativeDateModule } from '@angular/material/datepicker';\n// import { MatOptionModule } from '@angular/material/select';\n\n\n\n\n// @NgModule({\n//   declarations: [\n//     PopupDialogComponent,\n//     PaginatorComponent,\n//     EditorHeaderComponent,\n//     FocusInitialDirective,\n//     PhoneMaskDirective,\n//   ],\n//   imports: [\n//     CommonModule,\n//     RouterModule,\n//     FormsModule,\n//     ReactiveFormsModule,\n//     MatDialogModule,\n//     MatFormFieldModule,\n//     MatSelectModule,\n//     MatOptionModule,\n//     MatSnackBarModule,\n//     MatAutocompleteModule,\n//     MatCheckboxModule,\n//     MatButtonModule,\n//     MatDatepickerModule,\n//     MatNativeDateModule,\n//     MatTableModule,\n//     MatButtonToggleModule,\n//     MatTabsModule,\n//     MatMenuModule,\n//     MatProgressSpinnerModule,\n//   ],\n//   exports: [\n//     MatDialogModule,\n//     MatFormFieldModule,\n//     MatSelectModule,\n//     MatOptionModule,\n//     MatSnackBarModule,\n//     MatAutocompleteModule,\n//     MatInputModule,\n//     MatCheckboxModule,\n//     PopupDialogComponent,\n//     PaginatorComponent,\n//     EditorHeaderComponent,\n//     MatButtonModule,\n//     MatDatepickerModule,\n//     MatNativeDateModule,\n//     FocusInitialDirective,\n//     MatTableModule,\n//     PhoneMaskDirective,\n//     MatButtonToggleModule,\n//     MatTabsModule,\n//     MatMenuModule,\n//     MatProgressSpinnerModule,\n\n//   ]\n// })\n// export class MaterialModule { }\n","import { Injectable } from '@angular/core';\nimport { MatDialog} from \"@angular/material/dialog\";\nimport {PopupDialogData} from \"../components/popup-dialog/popup-dialog-data\";\nimport {PopupDialogComponent} from \"../components/popup-dialog/popup-dialog.component\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopupService {\n\n  constructor(\n    public dialog: MatDialog\n  ) { }\n\n  alert( arr: any): void {\n    const data: PopupDialogData = {\n      title: ( arr.title ? arr.title : 'Сообщение системы' ),\n      messages: ( Array.isArray( arr.message ) ? arr.message : [ arr.error.message ] )\n    }\n    this.dialog.open(PopupDialogComponent, {data});\n  }\n\n  error( arr: any): void {\n    let errors;\n    if( arr.error.error_message_description ){\n      errors = {\n        title: (\n          arr.error.error_message ? arr.error.error_message :\n            ( arr.title ? arr.title :\n              'Сообщение системы')\n        ),\n        messages:  ( Array.isArray( arr.error.error_message_description ) ? arr.error.error_message_description : [ arr.error.error_message_description ] )\n      }\n    }else{\n      errors = {\n        title: ( arr.title ? arr.title : 'Сообщение системы' ),\n        messages:  ( Array.isArray( arr.error.error_message ) ? arr.error.error_message : [ arr.error.error_message ] )\n      }\n    }\n\n    const data: PopupDialogData = errors;\n    this.dialog.open(PopupDialogComponent, {data});\n  }\n\n  note( str: any): void {\n    let arr = {\n        'message': str\n    }\n    this.alert(arr);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { RouterStateSnapshot, TitleStrategy } from '@angular/router';\n\n@Injectable()\nexport class PageTitleService extends TitleStrategy {\n\n  constructor(private readonly title: Title) {\n    super();\n  }\n\n  override updateTitle(routerState: RouterStateSnapshot) {\n    const title = this.buildTitle(routerState);\n    if (title !== undefined) {\n      this.title.setTitle(`${title} - Cargodrom`);\n    }\n  }\n}\n","import { emailValidator, innValidator } from './../../../validators';\nimport { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\nimport {PopupDialogData} from \"../../../material/components/popup-dialog/popup-dialog-data\";\nimport {PopupDialogComponent} from \"../../../material/components/popup-dialog/popup-dialog.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport {PopupService} from \"../../../material/services/popup.service\";\nimport {finalize, Subject, takeUntil, tap} from \"rxjs\";\nimport { UserService } from 'src/app/api/services';\n\n@Component({\n  selector: 'app-employee-register',\n  templateUrl: './employee-register.component.html',\n  styleUrls: ['./employee-register.component.scss']\n})\n\nexport class EmployeeRegisterComponent implements OnInit {\n\n  registerForm: FormGroup;\n  loading = false;\n  errorMessage?: string;\n  uid!: string;\n  private _destroy$ = new Subject();\n  hasOldPassword?:boolean=false;\n  isEditMode=true;\n\n  constructor(\n    private fb: FormBuilder,\n    private router: Router,\n    public popup: PopupService,\n    public dialog: MatDialog,\n    private userSevrice: UserService,\n    private route: ActivatedRoute,\n  ) {\n    this.registerForm = this.fb.group({\n      uid: [,[]],\n      login: ['', []],\n      old_password: ['', []],\n      password: ['', [Validators.required] ],\n      password_confirm: ['', [Validators.required] ],\n    });\n  }\n\n  ngOnInit(): void {\n    const segments = this.route.snapshot.url.map(s => s.path);\n    this.uid=segments[1];\n    this.registerForm.patchValue({\n      uid: this.uid,\n    });\n    this.isEditMode = segments[0]==='employee_register' ? false : true;\n    if(this.isEditMode){\n      this.getUserData();\n    }\n  }\n  ngOnDestroy(): void {\n    this._destroy$.next(null);\n    this._destroy$.complete();\n  }\n\n  doRegister() {\n    console.log(this.registerForm);\n    console.log(this.registerForm.valid);\n\n    let error_message: string[] = [];\n\n    // if ( this._email?.errors?.['email'] ) {\n    //   error_message.push('E-mail введен не верно');\n    // }\n\n    // if ( this._inn?.errors?.['inn']  ) {\n    //   error_message.push('ИНН введен не верно');\n    // }\n\n    if( error_message.length > 0 ){\n      let err = {\n        'error': {\n          'error_message': error_message\n        }\n      }\n      this.popup.error(err);\n      return;\n    }\n\n    this.loading = true;\n\n    this.registerUser();\n\n    // this.register.save( { this.registerForm.value } )\n    //   .pipe(\n    //     finalize(() => this.loading = false)\n    //   ).subscribe({\n    //   next: ( uid ) => this.processConfirm(uid),\n    //   error: err => this.popup.error(err)\n    // });\n  }\n\n  processConfirm( uid:string ): void {\n    this.router.navigate(['/confirm/'+uid]);\n  }\n\n  getUserData(){\n    this.userSevrice.userInviteData({body:{uid:this.uid}})\n      .pipe(\n        tap((data)=> this.hasOldPassword=data.has_old_password),\n        takeUntil(this._destroy$))\n      .subscribe({\n        next: (data:any) => {\n          console.log(data);\n          this.registerForm.patchValue({\n            login: data.login,\n          });\n        },\n        error: (err) => {}\n      });\n  }\n\n  registerUser(){\n    const body=this.registerForm.value;\n    this.userSevrice.userRegisterInvite({body})\n      .pipe(\n        tap((data) => {}),\n        takeUntil(this._destroy$))\n      .subscribe({\n        next: (data:any) => {\n        },\n        error: (err) => {}\n      });\n  }\n\n}\n","<div class=\"content\">\n  <div class=\"user-module\">\n    <div class=\"auth-bg\">\n\n      <div class=\"auth-form\">\n        <div class=\"hdr\">\n          <span class=\"logo\"></span>\n          <span class=\"sep\"></span>\n          <span>Регистрация сотрудника</span>\n        </div>\n        <div class=\"fm-body\">\n          <form [formGroup]=\"registerForm\" (ngSubmit)=\"doRegister()\">\n            <!-- <div class=\"form-row sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Название компании::</div>\n                <div class=\"form-input\"><input type=\"text\" formControlName=\"company\" value=\"\" placeholder=\"—\"></div>\n              </div>\n            </div> -->\n            <!-- <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Ответственное лицо:</div>\n                <div class=\"form-input\"><input type=\"text\" formControlName=\"fio\" value=\"\" placeholder=\"—\"></div>\n              </div>\n              <div class=\"form-item\">\n                <div class=\"form-label\">Номер телефона:</div>\n                <div class=\"form-input\"><input type=\"text\" (input)=\"formatPhone($event)\" formControlName=\"phone\" value=\"\" placeholder=\"—\" ></div>\n              </div>\n            </div> -->\n\n            <div class=\"form-row inline sp\" *ngIf=\"hasOldPassword\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Старый пароль:</div>\n                <div class=\"form-input\"><input type=\"password\" formControlName=\"old_password\" value=\"\" placeholder=\"—\"></div>\n              </div>\n            </div>\n\n            <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Пароль: <span class=\"req\">*</span></div>\n                <div class=\"form-input\"><input type=\"password\" formControlName=\"password\" value=\"\" placeholder=\"—\"></div>\n              </div>\n            </div>\n\n            <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Подтвердите пароль: <span class=\"req\">*</span></div>\n                <div class=\"form-input\"><input type=\"password\" formControlName=\"password_confirm\" value=\"\" placeholder=\"\"></div>\n              </div>\n            </div>\n\n            <div class=\"form-row inline sp\">\n              <div class=\"form-item\">\n                <div class=\"form-label\">Логин: </div>\n                <div class=\"form-input\"><input type=\"text\" formControlName=\"login\" value=\"\" placeholder=\"\"></div>\n              </div>\n            </div>\n\n            <div class=\"form-row inline\">\n              <div class=\"form-item\">\n              </div>\n              <div class=\"form-item\">\n                <input type=\"submit\" style=\"display: none\">\n                <span class=\"btn alt\" (click)=\"doRegister()\">Зарегистрироваться</span>\n              </div>\n            </div>\n\n\n          </form>\n        </div>\n      </div>\n\n    </div>\n\n  </div>\n</div>\n","import { Country } from '../../../api/custom_models/country';\nimport { Contact, responsibilityDirections } from '../../../api/custom_models';\nimport { FormBuilder, FormGroup, Validators, ControlValueAccessor, NG_VALUE_ACCESSOR, AbstractControl, ValidationErrors, Validator, NG_VALIDATORS, FormArray, FormControl } from '@angular/forms';\nimport { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { unknownCountry } from 'src/app/constants';\nimport { CargoPackage } from 'src/app/api/custom_models/cargo';\nimport { CargoService, ContractorService, DirectionService, TransportService } from 'src/app/api/services';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { TransportCarrier, TransportRoute } from 'src/app/api/custom_models/transport';\nimport { formatDate } from '@angular/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CalculationsService } from '../../services/calculations.service';\n\n@Component({\n  selector: 'app-rate-editor',\n  templateUrl: './rate-editor.component.html',\n  // styleUrls: ['./rate-editor.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: RateEditorComponent\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: RateEditorComponent,\n      multi: true,\n    },\n  ]\n})\nexport class RateEditorComponent implements OnInit, OnDestroy, OnChanges, ControlValueAccessor, Validator {\n  @Input() requestKindId!:number;\n  @Input() rates?:any;\n  @Input() currentRateNumber?:number;\n  @Input() chargeModel?:any;\n  @Input() weight?:number;\n  @Input() request?:any;\n  @Input() currency?:any;\n\n  @Output() removeRate = new EventEmitter<void>();\n  @Output() addRate = new EventEmitter<void>();\n  @Output() indexRateChange = new EventEmitter<Number>();\n  @Output() duplicateRate = new EventEmitter<void>();\n\n  onChange = (value: Partial<any>) => { };\n  onTouched = () => { };\n  private touched = false;\n\n  snackBarWithShortDuration: MatSnackBarConfig = { duration: 4000 };\n  snackBarWithLongDuration: MatSnackBarConfig = { duration: 8000 };\n\n  private _destroy$ = new Subject();\n  rateForm: FormGroup;\n  transportCarrier: TransportCarrier[]=[];\n  transportRoute: any[]=[];\n  contractorList:any[]=[];\n\n  daysOfTheWeek=[\n    { day:'Monday', id:1, date_id:1 },\n    { day:'Tuesday', id:2, date_id:2 },\n    { day:'Wednesday', id:3, date_id:3 },\n    { day:'Thursday', id:4, date_id:4 },\n    { day:'Friday', id:5, date_id:5 },\n    { day:'Saturday', id:6, date_id:6 },\n    { day:'Sunday', id:7, date_id:0 },\n  ]\n\n  @ViewChild('deleteRateDialogRef') deleteRateDialogRef?: TemplateRef<void>;\n\n  constructor(\n    private calculationsService: CalculationsService,\n    private fb: FormBuilder,\n    private transportService: TransportService,\n    private snackBar: MatSnackBar,\n    private dialog: MatDialog,\n    private contractorService: ContractorService,\n    private directionService: DirectionService,\n  ) {\n    this.rateForm = this.fb.group({\n      carrier_desc: [,[]],\n      carrier_name: [,[]],\n      comment: [,[]],\n      departure_schedule: [[],[]],\n      id: [,[]],\n      nearest_flight: [[],[]],\n      num: [,[]],\n      profit_include: [true,[]],\n      rate_type: ['nodetail',[]],\n      // route_id: [,[]],\n      route_name: ['',[]],\n      total_cost: [,[]],\n      transit_time: this.fb.group({\n        transit_time_from: [, []],\n        transit_time_to: [, []],\n      }),\n      currency: [,[]],\n      values: fb.array([\n        // this.fb.group({\n        //   comment: [,[]],\n        //   cost: [,[]],\n        //   field: [,[]],\n        //   fix: [,[]],\n        //   min: [,[]],\n        //   price: [,[]],\n        //   select: [,[]],\n        //   value: [,[]],\n        // })\n      ], []),\n    });\n  }\n\n  // Методы ЖЦ\n  ngOnInit(): void {\n    this.getTransportCarrier();\n    this.getTransportRoute();\n    \n    this.chargeModel.forEach((i:any)=>{\n      this.charges.push(this.fb.group({\n        comment: [,[]],\n        cost: [,[]],\n        field: [i.field_name,[]],\n        fix: [,[]],\n        min: [,[]],\n        price: [,[]],\n        select: [i.status,[]],\n        value: [i.unit==='kg'?this.weight:1,[]],\n      }));\n      this.rateForm.markAsTouched();\n    });\n\n    this.rateForm.valueChanges.pipe(takeUntil(this._destroy$)).subscribe(value => {\n      this.onChange(value)\n    });\n    this.rateForm.statusChanges.pipe(takeUntil(this._destroy$)).subscribe(() => {\n      if (!this.touched) {\n        this.onTouched();\n        this.touched = true;\n      }\n    });\n    \n    if(this.rateForm.value.currency==null){\n      this.rateForm.patchValue({\n        currency: this.request.currency\n      })\n    }\n    this.rateForm.markAsTouched();\n  }\n  ngOnDestroy(): void {\n    this._destroy$.next(null);\n    this._destroy$.complete();\n  }\n\n  get rateChar(){\n    const i = this.currency?.find((r:any) => r.id === this.rateForm.value.currency);\n    return i?.char?i.char:'?';\n  }\n  get rateCode(){\n    const i = this.currency?.find((r:any) => r.id === this.rateForm.value.currency);\n    return i?.code?i.code:'?';\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if(this.rateForm.value.rate_type==='detail') this.calckTotalCost();\n  }\n\n  // ControlValueAccessor\n  writeValue(contact: any): void {\n    this.rateForm.patchValue(contact);\n  }\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n  validate(control: AbstractControl): ValidationErrors | null {\n    return control.value && this.rateForm.valid ? null : { contact: true };\n  }\n\n  // Rates\n  onDeleteRate(): void {\n    if (!this.deleteRateDialogRef) { return }\n    this.dialog.open(this.deleteRateDialogRef)\n      .afterClosed()\n      .subscribe(res => {\n        if (res) { this.removeRate.emit() }\n    });\n  }\n  onAddRate(): void {\n    this.addRate.emit();\n  }\n  onChangeRate(i:number): void {\n    this.indexRateChange.emit(i);\n  }\n  onDuplicateRate(): void {\n    this.duplicateRate.emit();\n  }\n\n  // Charges\n  addCharge() {\n    this.charges.push(this.fb.group({\n      comment: [,[]],\n      cost: [,[]],\n      field: [,[]],\n      fix: [,[]],\n      min: [,[]],\n      price: [,[]],\n      select: [false,[]],\n      value: [,[]],\n    }));\n    this.rateForm.markAsTouched();\n  }\n  get charges() {\n    return <FormArray>this.rateForm.get('values');\n  }\n\n  // Публичные методы\n\n\n  onRouteChange(route:any){\n    this.rateForm.patchValue({\n      // route_id: route.id,\n      // route_name: route.name,\n      transit_time: {\n        transit_time_from: route.days_min,\n        transit_time_to: route.days_max,\n      },\n    });\n  }\n\n  filterRote(){\n    const filterRoute=this.transportRoute?.filter((option:any) => option.name.toLowerCase().replaceAll(' ', '').includes(this.rateForm.value.route_name?.toLowerCase().replaceAll(' ', '')));\n    return filterRoute.length==0\n    ? []\n    : filterRoute\n  }\n  filterIata(){\n    const filterIata=this.transportCarrier?.filter((option:any) => option.iata.toLowerCase().replaceAll(' ', '').includes(this.rateForm.value.carrier_name?.toLowerCase().replaceAll(' ', '')));\n    return filterIata.length==0\n    ? []\n    : filterIata\n  }\n\n  returnAirlineName(iata:string):string{\n    let name:any='';\n    this.transportCarrier.forEach((i:TransportCarrier)=>{\n      if(iata?.toLowerCase()==i.iata?.toLowerCase()){ name=i.name };\n    });\n    return name;\n  }\n  returnAirlineIata(id:number):string{\n    let name:any='';\n    this.transportCarrier.forEach((i:TransportCarrier)=>{\n      if(id==i.id){ name=i.iata };\n    });\n    return id===undefined?' ? ':name\n  }\n\n  onRateTypeChange(){\n    this.charges.controls.forEach((e:any)=>{\n      e.controls['comment'].reset();\n      e.controls['cost'].reset();\n      e.controls['fix'].reset();\n      e.controls['min'].reset();\n      e.controls['price'].reset();\n    })\n    this.rateForm.controls['total_cost'].reset();\n  }\n  //Calck\n  calck(control: any) {\n    const costValue = this.calculationsService.calculateRate(\n      control.value.price,\n      control.value.value,\n      { min: control.value.min, fix: control.value.fix}\n    );\n    control.patchValue({ cost: costValue });\n  }\n  // calck(control: any) {\n  //   let costValue: number;\n\n  //   if (control.value.min) {\n  //     costValue = control.value.min < control.value.price * control.value.value \n  //     ? control.value.price * control.value.value \n  //     : control.value.min;\n  //   } else if (control.value.fix) {\n  //     costValue = (control.value.price * control.value.value) + control.value.fix;\n  //   } else {\n  //     costValue = control.value.price * control.value.value;\n  //   }\n\n  //   // Округляем до двух знаков после запятой\n  //   const roundedCost = parseFloat(costValue.toFixed(2));\n\n  //   control.patchValue({ cost: roundedCost });\n  // }\n  // calck(control:any){\n  //   if(control.value.min){\n  //     control.patchValue({\n  //       cost: control.value.min<control.value.price * control.value.value?control.value.price * control.value.value:control.value.min\n  //     });\n  //   } else if(control.value.fix) {\n  //     control.patchValue({cost: (control.value.price * control.value.value)+control.value.fix});\n  //   } else {\n  //     control.patchValue({cost: control.value.price * control.value.value});\n  //   }\n  // }\n\n  calckCost(control:any){\n    control.patchValue({\n      value: control.value.cost,\n      price: 1,\n    });\n  }\n  calckTotalCost(){\n    // let cost=0;\n    let cost:any[]=[];\n    // this.rateForm.value.values.forEach((v:any)=>{\n    //   if(v.select)cost=cost+v.cost\n    // });\n    this.rateForm.value.values.forEach((v:any)=>{\n      if(v.select){\n        cost.push(v.cost)\n      }\n    });\n    let sum = this.calculationsService.calculateSum(cost);\n    this.rateForm.patchValue({ total_cost:sum });\n  }\n  // Datepicker multy\n  returnSelectDateText(){\n    let text='';\n    let dateOnj:any=[];\n    this.rateForm.value.nearest_flight?.forEach((e:any)=>{\n      const date = new Date(e);\n      const dateTest ={\n        day: date.toLocaleString('en-US', { day: 'numeric' }),\n        mount: date.toLocaleString('en-US', { month: 'short' }),\n        date: e,\n      }\n      dateOnj?.push(dateTest);\n    })\n    const sortedArray=dateOnj.sort((a:any, b:any) => new Date(a.date) > new Date(b.date)? 1 : -1);\n    sortedArray?.forEach((i:any,index:number)=>{\n      let ind=index+1;\n      if(sortedArray[ind]?.mount===i.mount){\n        text= text + i.day + ',';\n      } else {\n        text= text + i.day + ' ' + i.mount + (sortedArray.length==ind?'':', ');\n      }\n    });\n    return text;\n  }\n  isSelectedDate = (event: any) => {\n    // const dayOfWeek = new Date(event).getDay(); // 0 - воскресенье, 1 - понедельник, 2 - вторник, и т.д.\n    // if (dayOfWeek === 2) { // 2 - вторник\n    //   return \"disabled-date\"; // Класс для недоступных дат\n    // }\n\n    const date=formatDate(event,'yyyy-MM-dd','en-US');\n    return this.rateForm.value.nearest_flight?.find((x:any) => x == date) ? \"selected\" : '';\n  }\n  selectDate(event: any, calendar: any) {\n    console.log(event,calendar);\n    const date=formatDate(event,'yyyy-MM-dd','en-US');\n    if(this.rateForm.value.nearest_flight===null) this.rateForm.value.nearest_flight=[];\n    const index = this.rateForm.value.nearest_flight.findIndex((x:any) => x == date);\n    if (index < 0) {\n      this.rateForm.value.nearest_flight.push(date);\n      const dayOfWeek=new Date(event).getDay();\n      // const istestDate=!this.rateForm.value.departure_schedule?.find((x:any) => x == dayOfWeek)\n      const istestDate=this.rateForm.value.departure_schedule?.find((x:any) =>{\n        if(dayOfWeek==0&&x==7){\n          x=0;\n          return x == dayOfWeek;\n        } else {\n          return x == dayOfWeek;\n        }\n      })\n      // const istestDate=dayOfWeek!=0\n      //   ?this.rateForm.value.departure_schedule?.find((x:any) => x == dayOfWeek)\n      //   :this.rateForm.value.departure_schedule?.find((x:any) => 0 == dayOfWeek)\n      if(!istestDate){\n        this.snackBar.open(\n          `Выбранная дата не соответсвтвует дням недели`,\n          undefined,\n          {\n            duration: 2000,\n            verticalPosition: 'top', // Позиционирование по вертикали\n            horizontalPosition: 'center', // Позиционирование по горизонтали\n            panelClass: ['centered-snackbar'] // Кастомный класс для стилизации\n          }\n        );\n      }\n    } else {\n      this.rateForm.value.nearest_flight.splice(index, 1);\n    }\n    calendar.updateTodaysDate();\n  }\n\n  // Приватные методы\n  // получаем перевозчиков(airline and airline iata controls)\n  private getTransportCarrier():void{\n    this.transportService.transportCarrier({kind_id:this.requestKindId})\n      .pipe(\n        tap(transportCarrier => {\n\n\n          if (!transportCarrier) {\n            throw ({ error: { error_message: `Перевозчиков не существует`} });\n          }\n        }),\n        takeUntil(this._destroy$),\n      )\n      .subscribe({\n        next: (transportCarrier) => {\n          this.transportCarrier=transportCarrier;\n        },\n        error: (err) => {\n          this.snackBar.open(`${err.error.error_message}: ` + err.error.error_message_description, undefined, this.snackBarWithShortDuration);\n        }\n      });\n  }\n  // получаем маршруты(route)\n  private getTransportRoute():void{\n      this.directionService.directionRoute({kind_id: this.requestKindId, arrival_city_id:this.request.arrival_city_id,departure_country_id:this.request.departure_country_id })\n        .pipe(\n          tap(transportRoute => {\n            if (!transportRoute) {\n              throw ({ error: { error_message: `Маршрутов не существует`} });\n            }\n          }),\n          takeUntil(this._destroy$),\n        )\n        .subscribe({\n          next: (transportRoute) => {\n            this.transportRoute=transportRoute;\n          },\n          error: (err) => {\n            this.snackBar.open(`${err.error.error_message}: ` + err.error.error_message_description, undefined, this.snackBarWithShortDuration);\n          }\n        });\n    }\n  // private getTransportRoute():void{\n  //   this.transportService.transportRoute({kind_id:this.requestKindId})\n  //     .pipe(\n  //       tap(transportRoute => {\n  //         if (!transportRoute) {\n  //           throw ({ error: { error_message: `Маршрутов не существует`} });\n  //         }\n  //       }),\n  //       takeUntil(this._destroy$),\n  //     )\n  //     .subscribe({\n  //       next: (transportRoute) => {\n  //         this.transportRoute=transportRoute;\n  //       },\n  //       error: (err) => {\n  //         this.snackBar.open(`Ошибка запроса маршрутов: ` + err.error.error_message, undefined, this.snackBarWithShortDuration);\n  //       }\n  //     });\n  // }\n\n  //получаем контракторов\n    // private getContractor():void{\n    //   this.contractorService.contractorList()\n    //     .pipe(\n    //       tap(contractor => {\n    //         console.log(contractor);\n\n    //         if (!contractor) {\n    //           throw ({ error: { error_message: `Маршрутов не существует`} });\n    //         }\n    //       }),\n    //       takeUntil(this._destroy$),\n    //     )\n    //     .subscribe({\n    //       next: (contractor) => {\n    //         this.contractorList=contractor.items;\n    //         if(this.rate){\n    //           this.setContractorName(this.rate.contractor_id);\n    //         }\n\n    //       },\n    //       error: (err) => {\n    //         this.snackBar.open(`Ошибка запроса маршрутов: ` + err.error.error_message, undefined, this.snackBarWithShortDuration);\n    //       }\n    //     });\n    // }\n}\n","<form [formGroup]=\"rateForm\" >\n\n  <div class=\"form-row bg \">\n\n    <div class=\" rate-block-title\">\n      <div class=\"form-row-title color-blue\">Rates</div>\n\n      <label class=\"radio\">\n        <input type=\"radio\" value=\"detail\" formControlName=\"rate_type\" (change)=\"onRateTypeChange()\">\n        <i></i>\n        <span>With Details</span>\n      </label>\n\n      <label class=\"radio\">\n        <input type=\"radio\" value=\"nodetail\" formControlName=\"rate_type\" (change)=\"onRateTypeChange()\">\n        <i></i>\n        <span>With single Amount</span>\n      </label>\n\n    </div>\n\n    <div class=\"rate_labels\">\n      <div *ngFor=\"let rate of rates; let i=index\"\n        [ngClass]=\"{'active-rate':i===currentRateNumber}\"\n        (click)=\"onChangeRate(i)\"\n        class=\"rate_label\"\n      >\n        Rate #{{i+1}} ({{rate?.carrier_name}})\n      </div>\n      <button class=\"btn-add-rate rate_labels-btns\" (click)=\"onAddRate()\"><span class=\"icon-btn-plus\"></span>Add Rate</button>\n      <button class=\"btn-dup-rate rate_labels-btns\" (click)=\"onDuplicateRate()\"><span class=\"icon-btn-plus\"></span>Duplicate Rate</button>\n      <button class=\"btn-del-rate rate_labels-btns\" (click)=\"onDeleteRate()\"><span class=\"icon-btn-del\"></span>Delete Rate</button>\n    </div>\n\n  </div>\n\n  <div class=\"form-row rate\">\n    <div class=\"form-item-layout\">\n\n      <div class=\"form-item i10\">\n        <div class=\"form-label\">Chargeable weight:</div>\n        <div class=\"form-data\">\n          <span class=\"kg\">\n            <input type=\"text\" readonly [value]=\"weight\">kg\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-item\">\n        <div class=\"form-label\">Airline:</div>\n        <div class=\"form-data\">\n          <input type=\"text\" \n            formControlName=\"carrier_desc\" \n            [readonly]=\"returnAirlineName(rateForm.value.carrier_name)!=''\" \n            [value]=\"returnAirlineName(rateForm.value.carrier_name)\"\n          >\n        </div>\n      </div>\n\n      <div class=\"form-item\" style=\"width: 105px;\">\n        <div class=\"form-label\">Airline (iata):</div>\n        <div class=\"form-data\">\n          <input\n            type=\"text\"\n            style=\"text-transform: uppercase\"\n            formControlName=\"carrier_name\"\n            [matAutocomplete]=\"carrier_name\"\n          >\n          <mat-autocomplete autoActiveFirstOption #carrier_name=\"matAutocomplete\">\n            <mat-option *ngFor=\"let route of filterIata()\" [value]=\"route.iata\">{{route.iata}}</mat-option>\n          </mat-autocomplete>\n        </div>\n      </div>\n\n      <!-- <div class=\"form-item i10\">\n        <div class=\"form-label\">Airline (iata):</div>\n        <div class=\"form-data\">\n          <mat-form-field appearance=\"outline\" class=\"ui-select\">\n           <mat-select formControlName=\"carrier_name\" >\n            <mat-option\n              *ngFor=\"let transportCarrierItem of transportCarrier;\"\n              [value]=\"transportCarrierItem.id\"\n              >\n              {{ transportCarrierItem.iata }}\n            </mat-option>\n           </mat-select>\n         </mat-form-field>\n        </div>\n      </div> -->\n\n      <div class=\"form-item\">\n        <div class=\"form-label\">Route:</div>\n        <div class=\"form-data\">\n          <input\n            type=\"text\"\n            style=\"text-transform: uppercase\"\n            formControlName=\"route_name\"\n            [matAutocomplete]=\"route\"\n          >\n          <mat-autocomplete autoActiveFirstOption #route=\"matAutocomplete\">\n            <!-- <mat-option *ngIf=\"filterRote().length==0\" style=\"text-transform: uppercase\" [value]=\"rateForm.value.route_id\">{{rateForm.value?.route_id}}</mat-option> -->\n            <mat-option (onSelectionChange)=\"onRouteChange(route)\" *ngFor=\"let route of filterRote()\" [value]=\"route.name\">{{route.name}}</mat-option>\n          </mat-autocomplete>\n        </div>\n      </div>\n\n      <!-- <div class=\"form-item\">\n        <div class=\"form-label\">Route:</div>\n        <div class=\"form-data\">\n          <mat-form-field appearance=\"outline\" class=\"ui-select\">\n            <mat-select formControlName=\"route_id\">\n             <mat-option\n               *ngFor=\"let transportRoute of transportRoute;\"\n               [value]=\"transportRoute.id\"\n               >\n               {{ transportRoute.name }}\n             </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div> -->\n\n      <div class=\"form-item\">\n        <div class=\"form-label\">The departure schedule:</div>\n        <div class=\"form-data departure-schedule\">\n          <mat-form-field appearance=\"outline\" class=\"ui-select\">\n            <mat-select formControlName=\"departure_schedule\" multiple>\n              <mat-option\n                *ngFor=\"let day of daysOfTheWeek;\"\n                [value]=\"day.id\"\n                >\n                {{ day.day }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n\n      <div class=\"form-item\">\n        <div class=\"form-label\">The nearest flight etd:</div>\n        <div class=\"form-data\">\n          <button class=\"calendar\" [matMenuTriggerFor]=\"menu\">\n            <div class=\"calendar-value\">{{returnSelectDateText()}}</div>\n            <div class=\"calendar-icon\"></div>\n          </button>\n          <mat-menu #menu=\"matMenu\">\n            <div (click)=\"$event.stopPropagation()\">\n              <mat-calendar\n                #calendar\n                (selectedChange)=\"selectDate($event,calendar)\"\n                [dateClass]=\"isSelectedDate\"\n                >\n              </mat-calendar>\n            </div>\n          </mat-menu>\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"form-item-layout\" >\n      \n      <div class=\"form-item w110\" formGroupName=\"transit_time\">\n        <div class=\"form-label\">Transit time from:</div>\n        <div class=\"form-data\">\n          <input type=\"number\" formControlName=\"transit_time_from\" >\n        </div>\n      </div>\n\n      <div class=\"form-item w110\" formGroupName=\"transit_time\">\n        <div class=\"form-label\">Transit time to:</div>\n        <div class=\"form-data\">\n          <input type=\"number\" formControlName=\"transit_time_to\" >\n        </div>\n      </div>\n\n      <div class=\"form-item w110\">\n      <div class=\"form-label\">Currency:</div>\n        <div class=\"form-data\">\n          <mat-form-field appearance=\"outline\" class=\"ui-select\">\n            <mat-select formControlName=\"currency\">\n              <mat-option\n                *ngFor=\"let transportRoute of currency;\"\n                [value]=\"transportRoute.id\"\n                >\n                {{ transportRoute.code }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n      </div>\n\n    </div>\n\n    <!-- DETAIL MAKET -->\n    <div class=\"charges\" *ngIf=\"rateForm.value.rate_type==='detail'\">\n\n      <div style=\"width: 70%; padding-right: 40px; border-right: 1px dashed #E0E5EB; margin-right: 40px;\">\n        <div class=\"form-block-sub-title\">The rate includes following charges</div>\n        <div formArrayName=\"values\" *ngFor=\"let chargeValue of charges.controls; let i = index;\">\n          <div [formGroupName]=\"i\" [ngSwitch]=\"chargeValue.value.field\">\n            <ng-template *ngFor=\"let chargeModel of chargeModel;let i = index;\" [ngSwitchCase]=\"chargeModel.field_name\">\n\n              <div *ngIf=\"chargeValue.value.select\" class=\"included-fees\" >\n\n                <!-- <mat-checkbox *ngIf=\"!chargeModel.requare\">\n                  <span class=\"charges-title\">{{chargeModel.name}}</span>\n\n                </mat-checkbox>\n\n                <mat-checkbox *ngIf=\"chargeModel.requare\">\n                  <span class=\"charges-title\">{{chargeModel.name}}</span>\n\n                </mat-checkbox> -->\n\n                <label *ngIf=\"!chargeModel.requare\" style=\"display: flex;\">\n                  <input  type=\"checkbox\"  [checked]=\"chargeModel.requare===true\" formControlName=\"select\">\n                  <i></i>\n                  <span class=\"charges-title\">{{chargeModel.name}}</span>\n                </label>\n\n                <label *ngIf=\"chargeModel.requare\" style=\"display: flex;\">\n                  <input  type=\"checkbox\" [checked]=\"chargeModel.requare\" [disabled]=\"chargeModel.requare\">\n                  <i style=\"cursor:auto;\"></i>\n                  <span class=\"charges-title\" style=\"color: #83909E; cursor:auto;\">{{chargeModel.name}}</span>\n                </label>\n\n                <!-- 1) standart inputs + min -->\n                <div *ngIf=\"chargeModel.field_min && !chargeModel.field_comment\" class=\"input-box\">\n\n                  <div class=\"form-item charges-values br\">\n                    <div class=\"form-data\">\n                      <span class=\"unit\">Min {{rateChar}}:</span>\n                      <input type=\"number\" class=\"values-input\"  formControlName=\"min\" (ngModelChange)=\"calck(chargeValue)\">\n                    </div>\n                  </div>\n\n                  <div class=\"form-item charges-values\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" (ngModelChange)=\"calck(chargeValue)\" formControlName=\"price\"><span class=\"unit\">{{rateChar}}/{{chargeModel.unit}}</span>\n                    </div>\n                  </div>\n\n                  <div class=\"cross\"></div>\n\n                  <div class=\"form-item charges-values\" *ngIf=\"chargeModel.unit!=='kg'\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" (ngModelChange)=\"calck(chargeValue)\" formControlName=\"value\"><span class=\"unit\">{{chargeModel.unit}}</span>\n                    </div>\n                  </div>\n\n                  <div class=\"form-item charges-values\" *ngIf=\"chargeModel.unit==='kg'\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" readonly formControlName=\"value\"><span class=\"unit\">{{chargeModel.unit}}</span>\n                    </div>\n                  </div>\n\n                  <div class=\"equal\">═</div>\n\n                  <div class=\"form-item charges-values\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" readonly formControlName=\"cost\"><span class=\"unit\">{{rateChar}}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- 2) standart inputs -->\n                <div *ngIf=\"!chargeModel.field_min && !chargeModel.field_comment && chargeModel.unit\" class=\"input-box\">\n\n                  <div class=\"form-item charges-values\" *ngIf=\"chargeModel.field_fix\">\n                    <div class=\"form-data\">\n                      <span class=\"unit\">Fix {{rateChar}}:</span>\n                      <input type=\"number\" class=\"values-input\"  formControlName=\"fix\" (ngModelChange)=\"calck(chargeValue)\">\n                    </div>\n                  </div>\n\n                  <span *ngIf=\"chargeModel.field_fix\" style=\"text-align: center; margin: 0 5px; width: 11px; box-sizing: border-box;\">+</span>\n\n                  <div class=\"form-item charges-values\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" (ngModelChange)=\"calck(chargeValue)\" formControlName=\"price\"><span class=\"unit\">{{rateChar}}/{{chargeModel.unit}}</span>\n                    </div>\n                  </div>\n\n                  <div class=\"cross\"></div>\n\n                  <div class=\"form-item charges-values\" *ngIf=\"chargeModel.unit!=='kg'\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" (ngModelChange)=\"calck(chargeValue)\" formControlName=\"value\"><span class=\"unit\">{{chargeModel.unit}}</span>\n                    </div>\n                  </div>\n\n                  <div class=\"form-item charges-values\" *ngIf=\"chargeModel.unit==='kg'\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" readonly formControlName=\"value\"><span class=\"unit\">{{chargeModel.unit}}</span>\n                    </div>\n                  </div>\n\n                  <div class=\"equal\">═</div>\n\n                  <div class=\"form-item charges-values\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" readonly formControlName=\"cost\"><span class=\"unit\">{{rateChar}}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- 3) cost + comment -->\n                <div *ngIf=\"!chargeModel.field_min && chargeModel.field_comment && !chargeModel.unit\" class=\"input-box\" style=\"width: 70%;\">\n                  <div class=\"form-item \" style=\"margin-right: 10px;\">\n                    <div class=\"form-data\">\n                      <input type=\"text\"  formControlName=\"comment\">\n                    </div>\n                  </div>\n\n                  <div class=\"form-item charges-values\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" (change)=\"calckCost(chargeValue)\" formControlName=\"cost\"><span class=\"unit\">{{rateChar}}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- 4) only cost-->\n                <div *ngIf=\"!chargeModel.field_min && !chargeModel.field_comment && !chargeModel.unit\" class=\"input-box\">\n                  <div class=\"form-item charges-values\">\n                    <div class=\"form-data\">\n                      <input type=\"number\" class=\"values-input\" (change)=\"calckCost(chargeValue)\" formControlName=\"cost\"><span class=\"unit\">{{rateChar}}</span>\n                    </div>\n                  </div>\n                </div>\n\n              </div>\n\n            </ng-template>\n          </div>\n        </div>\n      </div>\n\n      <div style=\"width: 30%;\">\n        <div class=\"form-block-sub-title \">Additional charges</div>\n        <div formArrayName=\"values\" class=\"additional\" *ngFor=\"let chargeValue of charges.controls; let i = index;\" >\n          <div [formGroupName]=\"i\" [ngSwitch]=\"chargeValue.value.field\">\n            <ng-template *ngFor=\"let chargeModel of chargeModel;let i = index;\" [ngSwitchCase]=\"chargeModel.field_name\">\n              <div *ngIf=\"!chargeValue.value.select\" class=\"list-charges\">\n\n                <label style=\"display: flex;\">\n                  <input  type=\"checkbox\" formControlName=\"select\" >\n                  <i></i>\n                  <span class=\"charges-title\">{{chargeModel.name}}</span>\n                </label>\n\n                <div class=\"form-item charges-values\">\n                  <div class=\"form-data\">\n                    <!-- <span class=\"kg\">\n                      <input type=\"number\" class=\"values-input\" formControlName=\"cost\">\n                      $\n                    </span> -->\n\n                    <input type=\"number\" class=\"values-input\" formControlName=\"cost\"><span class=\"unit\">{{rateChar}}</span>\n\n                  </div>\n                </div>\n\n              </div>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n\n    </div>\n    <!-- NO DETAIL MAKET -->\n    <div class=\"charges\" *ngIf=\"rateForm.value.rate_type==='nodetail'\">\n\n      <div style=\"width: 50%; border-right: 1px dashed #E0E5EB;\">\n        <div class=\"form-block-sub-title\">The rate includes following charges</div>\n        <div formArrayName=\"values\" *ngFor=\"let chargeValue of charges.controls; let i = index;\">\n          <div [formGroupName]=\"i\" [ngSwitch]=\"chargeValue.value.field\">\n            <ng-template *ngFor=\"let chargeModel of chargeModel;let i = index;\" [ngSwitchCase]=\"chargeModel.field_name\">\n              <div *ngIf=\"chargeValue.value.select\" class=\"included-fees\">\n\n                <label *ngIf=\"!chargeModel.requare\">\n                  <input  type=\"checkbox\" [checked]=\"chargeModel.requare===true\" formControlName=\"select\">\n                  <i></i>\n                  <span class=\"charges-title\">{{chargeModel.name}}</span>\n                </label>\n\n                <label *ngIf=\"chargeModel.requare\">\n                  <input  type=\"checkbox\" [checked]=\"chargeModel.requare\" [disabled]=\"chargeModel.requare\">\n                  <i style=\"color: #83909E; cursor:auto;\"></i>\n                  <span class=\"charges-title\" style=\"color: #83909E; cursor:auto;\">{{chargeModel.name}}</span>\n                </label>\n\n              </div>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n\n      <div style=\"width: 50%; padding-left: 40px;\">\n        <div class=\"form-block-sub-title additional\">Additional charges</div>\n        <div formArrayName=\"values\" *ngFor=\"let chargeValue of charges.controls; let i = index;\" >\n          <div [formGroupName]=\"i\" [ngSwitch]=\"chargeValue.value.field\">\n            <ng-template *ngFor=\"let chargeModel of chargeModel;let i = index;\" [ngSwitchCase]=\"chargeModel.field_name\">\n              <div *ngIf=\"!chargeValue.value.select\" class=\"list-charges\">\n\n                <label style=\"display: flex;\">\n                  <input  type=\"checkbox\" formControlName=\"select\" >\n                  <i></i>\n                  <span class=\"charges-title\">{{chargeModel.name}}</span>\n                </label>\n\n              </div>\n            </ng-template>\n          </div>\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"total\">\n      <div class=\"total-detail\" *ngIf=\"rateForm.value.rate_type==='detail'\">\n        <div class=\"\">Total:</div>\n        <div class=\"color-red\">{{rateForm.value.total_cost}}</div>\n        <div class=\"color-red\">{{rateChar}}</div>\n      </div>\n\n      <div class=\"total-nodetail\" *ngIf=\"rateForm.value.rate_type==='nodetail'\">\n        <div>Total, {{rateCode}}:</div>\n        <input type=\"number\" class=\"total-cost\" formControlName=\"total_cost\">\n      </div>\n\n      <label>\n        <input  type=\"checkbox\" formControlName=\"profit_include\" >\n        <i></i>\n        <span class=\"charges-title\">Profit is included</span>\n      </label>\n    </div>\n\n    <div class=\"form-item-layout\" style=\"margin-top: 40px; width: 100%;\">\n      <div class=\"form-item charges-values\" style=\"width: 100%;\">\n        <div class=\"form-data\" style=\"width: 100%;\">\n          <input type=\"text\" class=\"values-input\" formControlName=\"comment\" placeholder=\"Your Comment...\" style=\"max-width: 100%;\">\n        </div>\n      </div>\n    </div>\n\n    <!-- <button (click)=\"addCharge()\">addCharge</button> -->\n\n  </div>\n\n</form>\n\n<ng-template #deleteRateDialogRef let-data>\n  <h1 mat-dialog-title>Delete rate?</h1>\n  <div mat-dialog-content>After deletion, restoration will not be possible</div>\n  <div mat-dialog-actions align=\"end\">\n    <button mat-button [mat-dialog-close]=\"true\" cdkFocusInitial>Delete</button>\n    <button mat-button mat-dialog-close>Cancel</button>\n  </div>\n</ng-template>\n\n\n\n\n\n\n\n\n","import { Component, OnDestroy, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subject, takeUntil, tap } from 'rxjs';\nimport { CargoService, CustomerService, DirectionService, FileService, RequestService, SystemService, TransportService } from 'src/app/api/services';\nimport { Location } from '@angular/common';\nimport { CityService } from '../../services/city.service';\nimport { CountryService } from '../../services/country.service';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-request-rate',\n  templateUrl: './request-rate.component.html',\n  styleUrls: ['./request-rate.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\n\nexport class RequestRateComponent implements OnInit, OnDestroy {\n  //ПЕРЕМЕННЫЕ\n  id: number=0;\n  //снек бар\n  snackBarWithShortDuration: MatSnackBarConfig = { duration: 4000 };\n  snackBarWithLongDuration: MatSnackBarConfig = { duration: 8000 };\n  //отписки\n  private _destroy$ = new Subject();\n  //переменные окружения\n  production = environment.production;\n  requestForm: FormGroup;\n  request: any;\n  files:any\n  currentRateNumber:number=0;\n  chargeModel:any=[];\n  transportCarrier:any=[];\n  currencyList:any;\n  readonly xlsxMimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n  //КОНСТРУКТОР\n  constructor(\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    private requestService: RequestService,\n    private snackBar: MatSnackBar,\n    private fileSevice: FileService,\n    private systemService: SystemService\n  ) {\n    this.requestForm = this.fb.group({\n      uid: [,[]],\n      rates: fb.array([], []),\n    });\n  }\n  // Методы ЖЦ:\n  ngOnDestroy(): void {\n    this._destroy$.next(null);\n    this._destroy$.complete();\n  }\n  ngOnInit(): void {\n    const uid = this.route.snapshot.paramMap.get('uid');\n    this.requestForm.patchValue({\n      uid:uid\n    })\n    this.getRequestRates(uid);\n    this.getCurrency()\n  }\n\n  //ВЛОЖЕННАЯ ФОРМА РЕДАКТИРОВАНИ РЕЙТОВ\n  removeRate(i: number): void {\n    this.rates.removeAt(i);\n    this.requestForm.markAsTouched();\n    this.currentRateNumber=this.rates.length-1;\n    if(this.rates.length<1){\n      this.addRate()\n    }\n  }\n  addRate() {\n    if(this.rates.length<8){\n      this.rates.push(this.fb.control({}));\n      this.currentRateNumber=this.rates.length-1;\n      this.requestForm.markAsTouched();\n    }\n  }\n  duplicateRate(){\n    this.rates.push(this.fb.control(this.requestForm.value.rates[this.currentRateNumber]));\n    this.requestForm.markAsTouched();\n  }\n  get rates() {\n    return <FormArray>this.requestForm.get('rates');\n  }\n\n  // Публичные методы:\n  indexRateChange(e:any){\n    this.currentRateNumber=e;\n  }\n  copyDispatchText(){\n    window.navigator.clipboard.writeText(`${this.request.departure_country_name}, ${this.request.departure_city_name}, ${this.request.departure_address}, ${this.request.departure_point_name}`)\n    this.snackBar.open(`Address copied: ` + `${this.request.departure_country_name}, ${this.request.departure_city_name}, ${this.request.departure_address}, ${this.request.departure_point_name}` , undefined, this.snackBarWithLongDuration);\n  }\n  copyDestinationText(){\n    window.navigator.clipboard.writeText(`${this.request.arrival_country_name}, ${this.request.arrival_city_name}, ${this.request.arrival_address}, ${this.request.arrival_point_name}`)\n    this.snackBar.open(`Address copied: ` + `${this.request.arrival_country_name}, ${this.request.arrival_city_name}, ${this.request.arrival_address}, ${this.request.arrival_point_name}`, undefined, this.snackBarWithLongDuration);\n  }\n\n  getCurrency(){\n    this.systemService.systemCurrency().pipe(\n      tap((currencyList) => {\n      }),\n      takeUntil(this._destroy$)\n    ).subscribe({\n      next: (currencyList) => {\n        console.log('currencyList',currencyList);\n        this.currencyList=currencyList.current;\n      },\n      error: (err) => {\n        console.log('ошибка получения валют в хеадере');\n      }\n    });\n  }\n\n  // Приватные методы:\n  getFile(id:number):void{\n    this.fileSevice.fileDownload({id: id})\n      .pipe(\n        tap((file)=> {\n          // if (!file) {\n          //   throw ({ error: { error_message: `Запрос не существует` } });\n          // }\n        }), takeUntil(this._destroy$))\n      .subscribe({\n        next: ({name, data}) => {\n          const dataUri = `data:${this.xlsxMimeType};base64,${data}`;\n          const a = document.createElement('a');\n          a.href = dataUri;\n          a.download = name!;\n          a.click();\n        },\n        error: (err) => {\n          this.snackBar.open(`Ошибка получения документа: ` + err.error.error_message, undefined, this.snackBarWithShortDuration)}\n      });\n  }\n\n  //получаем данные запроса и рейтов\n  private getRequestRates(uid:any){\n    this.requestService.requestRates({uid:uid})\n      .pipe(\n        tap((rates)=> {\n          console.log('getRequestRates', rates);\n          if (!rates) throw ({ error: { error_message: `Запрос не существует` } });\n          // this.rates.push(this.fb.control({}));\n          rates.rates?.forEach((e:any) => {\n            this.addRate();\n            this.requestForm.patchValue(rates);\n\n          });\n        }),\n        takeUntil(this._destroy$))\n      .subscribe({\n        next: (rates:any) => {\n          this.chargeModel=rates.charges;\n          this.request=rates;\n        },\n        error: (err) => {\n          this.snackBar.open(`${err.error.error_message}: ` + err.error.error_message_description, undefined, this.snackBarWithShortDuration);\n        }\n      });\n  }\n  //сохраняем рейты\n  saveRequestRates(){\n    console.log(this.requestForm.value);\n    this.requestService.requestRatesSave({body:this.requestForm.value})\n      .pipe(\n        tap((res)=> {\n          console.log(res);\n          if (!res) {\n            throw ({ error: { error_message: `Ошибка сохранения` } });\n          }\n        }),\n        takeUntil(this._destroy$))\n      .subscribe({\n        next: (res:any) => {\n          this.snackBar.open(\n            this.requestForm.value.rates.length>1\n            ?`Ваши предложения в количестве ${this.requestForm.value.rates.length}-х ставок были отправлены`\n            :`Ставка была отправлена`,\n            undefined,\n            {\n              duration: 2000,\n              verticalPosition: 'top', // Позиционирование по вертикали\n              horizontalPosition: 'center', // Позиционирование по горизонтали\n              panelClass: ['centered-snackbar'] // Кастомный класс для стилизации\n            }\n          );\n          // this.snackBar.open(`Данные сохранены`, undefined, this.snackBarWithLongDuration);\n        },\n        error: (err) => {\n          this.snackBar.open(`${err.error.error_message}: ` + err.error.error_message_description, undefined, this.snackBarWithShortDuration);\n        }\n      });\n  }\n}\n","<div class=\"logo-box\">\n  <div>\n\n  </div>\n</div>\n\n<div class=\"edit-form title\">\n  Rate Request # {{request?.id}}\n  <div class=\"time-add\">\n    Date:\n    <span>{{request?.time_add}}</span>\n  </div>\n</div>\n\n<form class=\"edit-form\" [formGroup]=\"requestForm\">\n  <div class=\"form-block\">\n\n    <div class=\"form-row df\">\n      <div class=\"form-col\">\n\n        <div class=\"form-col-title\">Route of Transportation</div>\n\n        <div class=\"form-item-layout\">\n          <div class=\"form-item\">\n            <div class=\"form-label\">Dispatch</div>\n            <div class=\"form-data\">\n              <div>\n                {{request?.departure_country_name}},\n                {{request?.departure_city_name}},\n                {{request?.departure_address}}\n              </div>\n              <div class=\"transport-point\">{{request?.departure_point_name}}</div>\n            </div>\n\n            <div class=\"copy-map\">\n              <button (click)=\"copyDispatchText()\" class=\"btn-copy\">Copy</button>\n              <a class=\"btn-map\"\n                title=\"Open dispatch address in Google maps\"\n                href=\"https://www.google.com/maps/search/?api=1&amp;query={{request?.departure_country_name}},{{request?.departure_city_name}},{{request?.departure_address}},{{request?.departure_point_name}}\"\n                target=\"_blank\">\n                On map\n              </a>\n            </div>\n\n          </div>\n        </div>\n\n        <div class=\"form-item-layout\">\n          <div class=\"form-item\">\n            <div class=\"form-label\">Destination</div>\n            <div class=\"form-data\">\n              <div>\n                {{request?.arrival_country_name}},\n                {{request?.arrival_city_name}},\n                {{request?.arrival_address}}\n              </div>\n              <div class=\"transport-point\">{{request?.arrival_point_name}}</div>\n            </div>\n            <div class=\"copy-map\">\n              <button (click)=\"copyDestinationText()\" class=\"btn-copy\">Copy</button>\n              <a class=\"btn-map\"\n                title=\"Open destination address in Google maps\"\n                href=\"https://www.google.com/maps/search/?api=1&amp;query={{request?.arrival_country_name}},{{request?.arrival_city_name}},{{request?.arrival_address}},{{request?.arrival_point_name}}\"\n                target=\"_blank\"\n                > On map\n              </a>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"form-col\">\n\n        <div class=\"form-col-title\">Cargo Details</div>\n\n        <div class=\"form-item-layout\">\n          <div class=\"form-item\">\n            <div class=\"form-label\">Type of cargo:</div>\n            <div class=\"form-data\">\n              <div>{{request?.cargo_type_name}}</div>\n            </div>\n          </div>\n          <div class=\"form-item\">\n            <div class=\"form-label\">Cargo name:</div>\n            <div class=\"form-data\">\n              <div>{{request?.cargo_description}}</div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-item-layout\">\n          <div class=\"form-item\" *ngIf=\"request?.cargo_readiness\">\n            <div class=\"form-label\">Cargo readiness:</div>\n            <div class=\"form-data\">\n              <div>{{request?.cargo_readiness}}</div>\n            </div>\n          </div>\n          <div class=\"form-item\">\n            <div class=\"form-label\">Incoterms</div>\n            <div class=\"form-data\">\n              <div>{{request?.incoterms_name}} {{request?.incoterms_city_name}}</div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-item-layout\">\n          <div class=\"form-item\">\n            <div class=\"form-label\">Details total:</div>\n            <div class=\"form-data\">\n              <div class=\"details-total\">\n                {{request?.cargo_places_count}}<span> pcs </span>\n                <span class=\"space\">/</span>\n                {{request?.cargo_places_volume}}<span> m<sup class=\"sup\">3</sup></span>\n                <span class=\"space\">/</span>\n                {{request?.cargo_places_weight}}<span> kg</span>\n                <span class=\"space\">/</span>\n                {{request?.cargo_places_density  | number:'1.0-1'}}<span> kg/m<sup class=\"sup\">3</sup></span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"form-item-layout\" *ngIf=\"request?.cargo_condition_carriage\">\n          <div class=\"form-item\">\n            <div class=\"form-label\">Conditions of carriage:</div>\n            <div class=\"form-data\">\n              <div>{{request?.cargo_condition_carriage}} </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      <div class=\"form-col\" style=\"display: flex; flex-direction: column;\">\n        <div class=\"form-col-title\">Dimensions</div>\n        <textarea readonly style=\"border: none; flex-grow: 1;\">{{request?.cargo_dimensions}}</textarea>\n      </div>\n\n    </div>\n\n    <div class=\"form-row\" *ngIf=\"request?.comment\">\n      <div class=\"form-row-title\">Comment</div>\n      <div class=\"comment\">{{request?.comment}}</div>\n    </div>\n\n    <div class=\"form-row\" *ngIf=\"request?.documents_file?.length>0 || request?.cargo_file?.length>0\">\n      <div class=\"form-row-title\">Attached Files</div>\n      <div class=\"form-item-layout wrap\">\n        <div class=\"file-box\"\n          *ngFor=\"let documentsFile of request?.documents_file;\"\n          (click)=\"getFile(documentsFile.id)\"\n        >\n          {{documentsFile?.file_name}}\n        </div>\n\n        <div class=\"file-box\"\n          *ngFor=\"let cargoFile of request?.cargo_file;\"\n          (click)=\"getFile(cargoFile.id)\"\n        >\n          {{cargoFile?.file_name}}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"form-row rate\" formArrayName=\"rates\">\n      <div *ngFor=\"let rate of rates.controls; let i=index\" >\n        <app-rate-editor\n          (removeRate)=\"removeRate(i)\"\n          (addRate)=\"addRate()\"\n          (indexRateChange)=\"indexRateChange($event)\"\n          (duplicateRate)=\"duplicateRate()\"\n          [ngClass]=\"{'dn':i!==currentRateNumber}\"\n          [formControlName]=\"i\"\n          [requestKindId]=\"request.transport_kind_id\"\n          [rates]=\"requestForm.value.rates\"\n          [currentRateNumber]=\"currentRateNumber\"\n          [chargeModel]=\"chargeModel\"\n          [weight]=\"request.cargo_places_paid_weight\"\n          [request]=\"request\"\n          [currency]=\"currencyList\"\n        >\n        </app-rate-editor>\n      </div>\n    </div>\n\n    <div class=\"form-row bg\" style=\"display: flex;justify-content: end;\">\n      <button type=\"submit\" class=\"btn-save-rates\" (click)=\"saveRequestRates()\">\n        <span class=\"icon-btn-save-rates\"></span>\n        Send Rates\n      </button>\n    </div>\n\n  </div>\n</form>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CalculationsService {\n\n  constructor() { }\n\n  /**\n   * Вычисляет точную сумму чисел из массива\n   * @param values Массив чисел или строковых представлений чисел\n   * @returns Сумма с точностью до 2 знаков после запятой\n   */\n  calculateSum(values: (number | string | null | undefined)[]): number {\n    const numbers = this._convertToNumbers(values);\n    const sum = numbers.reduce((acc, curr) => this._preciseAdd(acc, curr), 0);\n    return this._roundToTwoDecimals(sum);\n  }\n\n  /**\n   * Вычисляет произведение чисел из массива\n   * @param values Массив чисел или строковых представлений чисел\n   * @returns Произведение с точностью до 2 знаков после запятой\n   */\n  calculateProduct(values: (number | string | null | undefined)[]): number {\n    const numbers = this._convertToNumbers(values);\n    \n    // Если массив пустой или все значения нулевые - возвращаем 0\n    if (numbers.length === 0 || numbers.every(num => num === 0)) {\n      return 0;\n    }\n\n    const product = numbers.reduce((acc, curr) => this._preciseMultiply(acc, curr), 1);\n    return this._roundToTwoDecimals(product);\n  }\n\n  /**\n   * Расчет ставки с учетом минимального и фиксированного значений\n   * @param price Базовое значение (цена)\n   * @param value Множитель\n   * @param options Опциональные параметры {min?: number, fix?: number}\n   * @returns Результат расчета с точностью до 2 знаков после запятой\n   */\n  calculateRate(\n    price: number | string | null | undefined,\n    value: number | string | null | undefined,\n    options: { min?: number | string | null; fix?: number | string | null } = {}\n  ): number {\n    const numPrice = this._safeConvertToNumber(price);\n    const numValue = this._safeConvertToNumber(value);\n    const numMin = options.min !== undefined ? this._safeConvertToNumber(options.min) : undefined;\n    const numFix = options.fix !== undefined ? this._safeConvertToNumber(options.fix) : undefined;\n\n    // Если price или value равны 0 или не переданы - возвращаем 0\n    if (numPrice === 0 || numValue === 0) {\n      return 0;\n    }\n\n    let result = this._preciseMultiply(numPrice, numValue);\n\n    // Применяем минимальное значение (если передано и не равно 0)\n    if (numMin !== undefined && numMin !== 0 && result < numMin) {\n      result = numMin;\n    }\n\n    // Применяем фиксированное значение (если передано и не равно 0)\n    if (numFix !== undefined && numFix !== 0) {\n      result = this._preciseAdd(result, numFix);\n    }\n\n    return this._roundToTwoDecimals(result);\n  }\n\n  // ========== ПРИВАТНЫЕ МЕТОДЫ ==========\n\n  /**\n   * Точное сложение чисел с плавающей запятой\n   */\n  private _preciseAdd(a: number, b: number): number {\n    const aDecimals = (a.toString().split('.')[1] || '').length;\n    const bDecimals = (b.toString().split('.')[1] || '').length;\n    const maxDecimals = Math.max(aDecimals, bDecimals);\n    const factor = Math.pow(10, maxDecimals);\n    \n    return (a * factor + b * factor) / factor;\n  }\n\n  /**\n   * Точное умножение чисел с плавающей запятой\n   */\n  private _preciseMultiply(a: number, b: number): number {\n    const aDecimals = (a.toString().split('.')[1] || '').length;\n    const bDecimals = (b.toString().split('.')[1] || '').length;\n    const factor = Math.pow(10, aDecimals + bDecimals);\n    \n    const aInt = a * Math.pow(10, aDecimals);\n    const bInt = b * Math.pow(10, bDecimals);\n    \n    return (aInt * bInt) / factor;\n  }\n\n  /**\n   * Округление до 2 знаков после запятой\n   */\n  private _roundToTwoDecimals(num: number): number {\n    // Если число целое - возвращаем без дробной части\n    if (Number.isInteger(num)) {\n      return num;\n    }\n    return parseFloat((Math.round((num + Number.EPSILON) * 100) / 100).toFixed(2));\n  }\n\n  /**\n   * Конвертирует массив значений в массив чисел\n   */\n  private _convertToNumbers(values: (number | string | null | undefined)[]): number[] {\n    return values.map(value => this._safeConvertToNumber(value));\n  }\n\n  /**\n   * Безопасная конвертация в число с обработкой null/undefined/некорректных строк\n   */\n  private _safeConvertToNumber(value: number | string | null | undefined): number {\n    if (value === null || value === undefined || value === '') {\n      return 0;\n    }\n\n    // Если уже число - возвращаем как есть\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    // Заменяем запятые на точки и удаляем пробелы\n    const cleanedValue = value.toString()\n      .replace(/,/g, '.')\n      .replace(/\\s/g, '');\n\n    const num = parseFloat(cleanedValue);\n    return isNaN(num) ? 0 : num;\n  }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { forkJoin, Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoaderService {\n  private activeRequests: string[] = [];\n  private isLoading = new BehaviorSubject<boolean>(true);\n  isLoading$ = this.isLoading.asObservable();\n\n  // Основной метод для обработки объекта с запросами\n  wrapRequests<T>(requestsObject: { [key: string]: Observable<any> }): Observable<T> {\n    // Добавляем все ключи в активные запросы\n    const requestKeys = Object.keys(requestsObject);\n    this.addRequests(requestKeys);\n\n    // Создаем обернутые observables с автоматическим удалением ключей\n    const wrappedRequests = {} as { [key: string]: Observable<any> };\n    \n    for (const key of requestKeys) {\n      wrappedRequests[key] = requestsObject[key].pipe(\n        finalize(() => this.removeRequest(key))\n      );\n    }\n\n    // Возвращаем forkJoin с обернутыми запросами\n    return forkJoin(wrappedRequests) as Observable<T>;\n  }\n\n  private addRequests(keys: string[]) {\n    this.activeRequests = [...this.activeRequests, ...keys];\n    this.updateLoadingState();\n    // console.log('Added requests:', keys);\n  }\n\n  private removeRequest(key: string) {\n    this.activeRequests = this.activeRequests.filter(k => k !== key);\n    this.updateLoadingState();\n    // console.log('Removed request:', key);\n  }\n\n  private updateLoadingState() {\n    const shouldBeLoading = this.activeRequests.length > 0;\n    if (shouldBeLoading !== this.isLoading.value) {\n      this.isLoading.next(shouldBeLoading);\n    }\n    // console.log('Current active requests:', this.activeRequests);\n  }\n}","// src/app/pages/services/navigation-history.service.ts\nimport { Injectable } from '@angular/core';\nimport { Router, NavigationEnd, Event } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nexport interface NavigationHistoryEntry {\n  url: string; // Полный URL с query параметрами\n  timestamp: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationHistoryService {\n  private history: NavigationHistoryEntry[] = [];\n  private maxHistoryLength = 50;\n\n  constructor(private router: Router) {\n    this.setupNavigationTracking();\n  }\n\n  private setupNavigationTracking(): void {\n    this.router.events\n      .pipe(\n        filter((event: Event): event is NavigationEnd => event instanceof NavigationEnd)\n      )\n      .subscribe((event: NavigationEnd) => {\n        this.addToHistory(event.urlAfterRedirects);\n        this.printHistoryToConsole();\n      });\n  }\n\n  private addToHistory(fullUrl: string): void {\n    if (!this.isPagesModuleUrl(fullUrl)) {\n      return;\n    }\n\n    // Получаем путь без query параметров для сравнения\n    const pathWithoutParams = this.removeQueryParams(fullUrl);\n    \n    // Проверяем, не является ли этот путь дублем последней записи (без учета query параметров)\n    if (this.isSamePath(pathWithoutParams)) {\n      // Обновляем последнюю запись с новыми query параметрами\n      this.updateLastEntry(fullUrl);\n      return;\n    }\n\n    // Если путь изменился - добавляем новую запись\n    const navigationEntry: NavigationHistoryEntry = {\n      url: fullUrl,\n      timestamp: new Date()\n    };\n\n    this.history.push(navigationEntry);\n\n    if (this.history.length > this.maxHistoryLength) {\n      this.history.shift();\n    }\n  }\n\n  private isPagesModuleUrl(url: string): boolean {\n    return url.startsWith('/pages') || url === '/pages';\n  }\n\n  private removeQueryParams(url: string): string {\n    return url.split('?')[0];\n  }\n\n  private isSamePath(currentPath: string): boolean {\n    if (this.history.length === 0) return false;\n    \n    const lastEntry = this.history[this.history.length - 1];\n    const lastEntryPath = this.removeQueryParams(lastEntry.url);\n    return lastEntryPath === currentPath;\n  }\n\n  private updateLastEntry(newUrl: string): void {\n    if (this.history.length > 0) {\n      this.history[this.history.length - 1].url = newUrl;\n      this.history[this.history.length - 1].timestamp = new Date();\n    }\n  }\n\n  private printHistoryToConsole(): void {\n    console.log('📜 Navigation History Array:', this.history);\n  }\n\n  /**\n   * Возвращает на предыдущую страницу\n   * @param fallbackUrl - альтернативный URL, используется только если история пустая\n   */\n  back(fallbackUrl: string): void {\n    if (this.history.length > 1) {\n      // Удаляем текущую страницу из истории\n      this.history.pop();\n      \n      // Получаем предыдущую страницу\n      const previousEntry = this.history[this.history.length - 1];\n      this.router.navigateByUrl(previousEntry.url);\n    } else if (this.history.length === 1) {\n      // Если в истории только одна запись - удаляем ее и переходим на fallback\n      this.history.pop();\n      this.router.navigateByUrl(fallbackUrl);\n    } else {\n      // Если история полностью пустая - используем fallback\n      this.router.navigateByUrl(fallbackUrl);\n    }\n  }\n\n  /**\n   * Получить всю историю навигации\n   */\n  getHistory(): NavigationHistoryEntry[] {\n    return [...this.history];\n  }\n\n  /**\n   * Получить последнюю запись в истории\n   */\n  getLastEntry(): NavigationHistoryEntry | null {\n    return this.history.length > 0 ? this.history[this.history.length - 1] : null;\n  }\n\n  /**\n   * Очистить историю навигации\n   */\n  clearHistory(): void {\n    this.history = [];\n    console.log('🗑️ Navigation history cleared');\n  }\n\n  /**\n   * Получить количество записей в истории\n   */\n  getHistoryLength(): number {\n    return this.history.length;\n  }\n}","import { NgModule } from '@angular/core';\nimport { IframeStyleDirective } from './iframe-style.directive';\nimport { CommonModule } from '@angular/common';\nimport { IconColorDirective } from './icon-color.directive';\n\n\n@NgModule({\n  declarations: [\n    IframeStyleDirective,\n    IconColorDirective,\n  ],\n  imports: [\n    \n  ],\n  exports: [\n    IframeStyleDirective,\n    IconColorDirective,\n  ]\n})\nexport class DirectivesModule { }","// icon-color.directive.ts\nimport { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[appIconColor]'\n})\nexport class IconColorDirective implements OnInit {\n  @Input('appIconColor') color: string = 'currentColor';\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit() {\n    this.applyStyles();\n  }\n\n  private applyStyles() {\n    const element = this.el.nativeElement;\n    \n    // Устанавливаем CSS переменную\n    element.style.setProperty('--icon-color', this.color);\n    \n    // Добавляем класс для применения стилей\n    element.classList.add('icon-colored');\n  }\n}\n// // icon-color.directive.ts\n// import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n// @Directive({\n//   selector: '[appIconColor]'\n// })\n// export class IconColorDirective implements OnInit {\n//   @Input('appIconColor') color: string = 'currentColor';\n\n//   constructor(private el: ElementRef) {}\n\n//   ngOnInit() {\n//     console.log('IconColorDirective',this.color);\n//     this.applyStyles();\n//   }\n\n//   private applyStyles() {\n//     const element = this.el.nativeElement;\n    \n//     element.style.maskImage = getComputedStyle(element).backgroundImage;\n//     element.style.webkitMaskImage = getComputedStyle(element).backgroundImage;\n//     element.style.backgroundImage = 'none';\n//     element.style.backgroundColor = this.color;\n//     element.style.maskRepeat = 'no-repeat';\n//     element.style.webkitMaskRepeat = 'no-repeat';\n//     element.style.maskPosition = 'center';\n//     element.style.webkitMaskPosition = 'center';\n//   }\n// }","// iframe-style.directive.ts\nimport { Directive, Input, ElementRef, OnChanges, OnDestroy } from '@angular/core';\n\n@Directive({\n  selector: 'iframe[appIframeStyle]'\n})\nexport class IframeStyleDirective implements OnChanges, OnDestroy {\n  @Input('appIframeStyle') styleString: string = '';\n  private isIframeLoaded = false;\n  private resizeObserver: ResizeObserver | null = null;\n  private mutationObserver: MutationObserver | null = null;\n  private lastHeight: number = 0;\n\n  constructor(private element: ElementRef<HTMLIFrameElement>) {\n    this.element.nativeElement.addEventListener('load', () => {\n      console.log('iframe loaded');\n      this.isIframeLoaded = true;\n      this.inject();\n      this.setupHeightObserver();\n    });\n  }\n\n  ngOnChanges(changes: any): void {\n    console.log('ngOnChanges called', this.styleString);\n    \n    if (changes.styleString) {\n      this.styleString = changes.styleString.currentValue;\n    }\n    \n    if (this.isIframeLoaded && this.styleString) {\n      console.log('injecting styles');\n      this.inject();\n    }\n  }\n\n  private inject() {\n    const iframe = this.element.nativeElement;\n    const doc = iframe.contentDocument;\n    if (!doc) return;\n\n    // 1. Добавляем CSS переменные в :root\n    let style = doc.getElementById('dynamic-iframe-styles');\n    if (!style) {\n      style = doc.createElement('style');\n      style.id = 'dynamic-iframe-styles';\n      doc.head.appendChild(style);\n    }\n    \n    // 2. Переопределяем стили у div с классом \"content\"\n    style.textContent = `\n      :root { ${this.styleString} }\n      \n      div.content {\n        ${this.styleString} !important;\n      }\n      \n      .content {\n        ${this.styleString} !important;\n      }\n    `;\n\n    // 3. Принудительно применяем стили к элементу и добавляем класс\n    const contentDiv = doc.querySelector('div.content');\n    if (contentDiv) {\n      const divElement = contentDiv as HTMLElement;\n      \n      // Парсим строку стилей и применяем каждое свойство\n      this.styleString.split(';').forEach(style => {\n        const [property, value] = style.split(':');\n        if (property && value) {\n          divElement.style.setProperty(property.trim(), value.trim());\n        }\n      });\n      \n      // Добавляем класс к элементу\n      divElement.classList.add('demo-page'); // замените 'your-class-name' на нужный класс\n    }\n\n    console.log('styles injected and applied to .content div, class added');\n  }\n\n  private setupHeightObserver() {\n    const iframe = this.element.nativeElement;\n    const doc = iframe.contentDocument;\n    if (!doc) return;\n\n    const userModuleDiv = doc.querySelector('div.user-module') as HTMLElement;\n    if (!userModuleDiv) {\n      console.warn('div.user-module not found in iframe');\n      return;\n    }\n\n    // Функция обновления высоты iframe\n    const updateIframeHeight = () => {\n      const userModuleHeight = userModuleDiv.scrollHeight;\n      const newHeight = userModuleHeight + 1; // +1px как ты просил\n      \n      // Обновляем только если высота изменилась\n      if (this.lastHeight !== newHeight) {\n        this.lastHeight = newHeight;\n        iframe.style.height = newHeight + 'px';\n        console.log('Iframe height updated:', newHeight);\n      }\n    };\n\n    // 1. ResizeObserver для отслеживания изменений размера\n    if ('ResizeObserver' in window) {\n      this.resizeObserver = new ResizeObserver(() => {\n        updateIframeHeight();\n      });\n      this.resizeObserver.observe(userModuleDiv);\n    }\n\n    // 2. MutationObserver для отслеживания изменений DOM\n    this.mutationObserver = new MutationObserver(() => {\n      updateIframeHeight();\n    });\n\n    this.mutationObserver.observe(userModuleDiv, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true\n    });\n\n    // Также отслеживаем изменения во всем документе\n    this.mutationObserver.observe(doc.body, {\n      childList: true,\n      subtree: true\n    });\n\n    // Первоначальная установка высоты\n    setTimeout(() => updateIframeHeight(), 100);\n\n    // Также обновляем при изменении окна\n    iframe.contentWindow?.addEventListener('resize', updateIframeHeight);\n  }\n\n  ngOnDestroy() {\n    // Очищаем observers при уничтожении директивы\n    this.resizeObserver?.disconnect();\n    this.mutationObserver?.disconnect();\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UiModule } from './ui/ui.module';\nimport { DirectivesModule } from './directives/directive.module';\nimport { MaterialModule } from '@cargodrom/material/material.module';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    UiModule,\n    DirectivesModule,\n    MaterialModule,\n    \n  ],\n  exports: [\n    CommonModule,\n    UiModule,\n    DirectivesModule,\n    MaterialModule,\n    \n  ]\n})\nexport class SharedModule { }","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [\n    \n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n\n  ]\n})\nexport class AutocompleteModule { }","import { NgModule } from '@angular/core';\nimport { LayoutComponent } from './layout/layout.component';\nimport { PopupComponent } from './popup/popup.component';\nimport { PanelComponent } from './panel/panel.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    LayoutComponent,\n    PopupComponent,\n    PanelComponent,\n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    LayoutComponent,\n    PopupComponent,\n    PanelComponent,\n  ]\n})\nexport class CdkModule { }","import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss']\n})\nexport class LayoutComponent {\n  @Input() show: boolean = false;\n  @Output() closed = new EventEmitter<void>();\n\n  @HostListener('document:keydown.escape')\n  onEscape() {\n    this.close();\n  }\n\n  close(): void {\n    this.closed.emit();\n  }\n\n  onBackdropClick(event: MouseEvent): void {\n    if (event.target === event.currentTarget) {\n      this.close();\n    }\n  }\n}","<div \n  class=\"layout-backdrop\" \n  *ngIf=\"show\"\n  (click)=\"onBackdropClick($event)\">\n  <div class=\"layout-content\">\n    <ng-content></ng-content>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, HostListener, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\n\nexport type PanelPlacement = 'top' | 'bottom';\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.scss']\n})\nexport class PanelComponent implements AfterViewInit, OnDestroy {\n  @Input() isOpen: boolean = false;\n  @Input() preferredPlacement: PanelPlacement = 'bottom';\n  @Input() closeOnBackdropClick: boolean = true;\n  \n  @Output() closed = new EventEmitter<void>();\n\n  placement: PanelPlacement = 'bottom';\n  private resizeObserver: ResizeObserver | null = null;\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngAfterViewInit(): void {\n    this.setupResizeObserver();\n  }\n\n  ngOnDestroy(): void {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  private setupResizeObserver(): void {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.resizeObserver = new ResizeObserver(() => {\n        if (this.isOpen) {\n          this.updatePanelPosition();\n        }\n      });\n      \n      const container = this.elementRef.nativeElement.querySelector('.panel-container');\n      if (container) {\n        this.resizeObserver.observe(container);\n      }\n    }\n  }\n\n  private updatePanelPosition(): void {\n    const container = this.elementRef.nativeElement.querySelector('.panel-container');\n    if (!container) return;\n\n    const rect = container.getBoundingClientRect();\n    const viewportHeight = window.innerHeight;\n    const panelHeight = 320; // Примерная высота панели\n    \n    const spaceBelow = viewportHeight - rect.bottom;\n    const spaceAbove = rect.top;\n\n    if (this.preferredPlacement === 'bottom' && spaceBelow >= panelHeight) {\n      this.placement = 'bottom';\n    } else if (this.preferredPlacement === 'top' && spaceAbove >= panelHeight) {\n      this.placement = 'top';\n    } else if (spaceBelow >= panelHeight) {\n      this.placement = 'bottom';\n    } else if (spaceAbove >= panelHeight) {\n      this.placement = 'top';\n    } else {\n      this.placement = spaceBelow >= spaceAbove ? 'bottom' : 'top';\n    }\n  }\n\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent): void {\n    if (!this.isOpen || !this.closeOnBackdropClick) return;\n    \n    const target = event.target as HTMLElement;\n    const clickedInside = this.elementRef.nativeElement.contains(target);\n    \n    if (!clickedInside) {\n      this.closePanel();\n    }\n  }\n\n  @HostListener('window:scroll')\n  @HostListener('window:resize')\n  onWindowChange(): void {\n    if (this.isOpen) {\n      this.updatePanelPosition();\n    }\n  }\n\n  closePanel(): void {\n    this.closed.emit();\n  }\n\n  onBackdropClick(event: MouseEvent): void {\n    if (this.closeOnBackdropClick) {\n      this.closePanel();\n    }\n  }\n\n  onContentClick(event: MouseEvent): void {\n    event.stopPropagation();\n  }\n}","<div class=\"panel-container\">\n  <ng-content select=\"[trigger]\"></ng-content>\n  \n  <div class=\"panel-dropdown\" \n       *ngIf=\"isOpen\"\n       [class.dropdown-bottom]=\"placement === 'bottom'\"\n       [class.dropdown-top]=\"placement === 'top'\">\n    <div class=\"panel-backdrop\" (click)=\"onBackdropClick($event)\"></div>\n    <div class=\"panel-content\" (click)=\"onContentClick($event)\">\n      <ng-content select=\"[content]\"></ng-content>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'app-popup',\n  templateUrl: './popup.component.html',\n  styleUrls: ['./popup.component.scss']\n})\nexport class PopupComponent {\n  @Input() show: boolean = false;\n  @Output() closed = new EventEmitter<void>();\n\n  @HostListener('document:keydown.escape')\n  onEscape() {\n    this.close();\n  }\n\n  close(): void {\n    this.closed.emit();\n  }\n\n  onBackdropClick(event: MouseEvent): void {\n    if (event.target === event.currentTarget) {\n      this.close();\n    }\n  }\n}","<app-layout [show]=\"show\" (closed)=\"close()\">\n  <div class=\"popup-content\" (click)=\"$event.stopPropagation()\">\n    <ng-content></ng-content>\n  </div>\n</app-layout>","import { Component, forwardRef, Input, HostListener, ElementRef, ViewChild, AfterViewInit, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\ntype DropdownPlacement = 'top' | 'bottom';\n\n@Component({\n  selector: 'app-color-picker-demo',\n  templateUrl: './color-picker-demo.component.html',\n  styleUrls: ['./color-picker-demo.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ColorPickerDemoComponent),\n      multi: true\n    }\n  ]\n})\nexport class ColorPickerDemoComponent implements ControlValueAccessor, AfterViewInit, OnDestroy, OnInit {\n  @Input() placeholder: string = 'Выберите цвет';\n  @Input() disabled: boolean = false;\n  @Input() preferredPlacement: DropdownPlacement = 'bottom';\n  @Input() standartColor:string=''\n  \n  @ViewChild('container') container!: ElementRef;\n\n  color: string = '#000000';\n  currentColor: any = '#000000';\n  isOpen: boolean = false;\n  placement: DropdownPlacement = 'bottom';\n  history:string[]=[];\n  \n  private resizeObserver: ResizeObserver | null = null;\n  private onChange: (value: string) => void = () => {};\n  private onTouched: () => void = () => {};\n\n  constructor(private elementRef: ElementRef) {}\n\n  ngOnInit(): void {\n    if(this.standartColor!='')this.history.push(this.standartColor);\n    if(this.color!='')this.currentColor=this.color;\n  }\n\n  ngAfterViewInit(): void {\n    this.setupResizeObserver();\n  }\n\n  ngOnDestroy(): void {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  // Публичный метод для вызова onTouched\n  handleTouched(): void {\n    this.onTouched();\n  }\n\n  private setupResizeObserver(): void {\n    if (typeof ResizeObserver !== 'undefined') {\n      this.resizeObserver = new ResizeObserver(() => {\n        if (this.isOpen) {\n          this.updateDropdownPosition();\n        }\n      });\n      \n      this.resizeObserver.observe(this.container.nativeElement);\n    }\n  }\n\n  private updateDropdownPosition(): void {\n    if (!this.container) return;\n\n    const containerElement = this.container.nativeElement;\n    const rect = containerElement.getBoundingClientRect();\n    const viewportHeight = window.innerHeight;\n    const dropdownHeight = 320;\n    \n    const spaceBelow = viewportHeight - rect.bottom;\n    const spaceAbove = rect.top;\n\n    if (this.preferredPlacement === 'bottom' && spaceBelow >= dropdownHeight) {\n      this.placement = 'bottom';\n    } else if (this.preferredPlacement === 'top' && spaceAbove >= dropdownHeight) {\n      this.placement = 'top';\n    } else if (spaceBelow >= dropdownHeight) {\n      this.placement = 'bottom';\n    } else if (spaceAbove >= dropdownHeight) {\n      this.placement = 'top';\n    } else {\n      this.placement = spaceBelow >= spaceAbove ? 'bottom' : 'top';\n    }\n  }\n\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent): void {\n    const target = event.target as HTMLElement;\n    if (!this.isOpen || !target) return;\n    \n    const clickedInside = target.closest('.color-picker-container');\n    if (!clickedInside) {\n      this.closePicker();\n    }\n  }\n\n  @HostListener('window:scroll')\n  @HostListener('window:resize')\n  onWindowChange(): void {\n    if (this.isOpen) {\n      this.updateDropdownPosition();\n    }\n  }\n\n  writeValue(value: string): void {\n    if (value && this.isValidColor(value)) {\n      this.color = value;\n      this.currentColor = value;\n    }\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  togglePicker(): void {\n    if (this.disabled) return;\n    \n    if (!this.isOpen) {\n      this.updateDropdownPosition();\n    }\n    \n    this.isOpen = !this.isOpen;\n    if (this.isOpen) {\n      this.handleTouched();\n    }\n  }\n\n  closePicker(): void {\n    this.isOpen = false;\n  }\n\n  apply(){\n    this.onColorChange(this.currentColor)\n  }\n\n  onColorChange(colorEvent: string|any): void {\n    if (colorEvent && colorEvent!=this.color) {\n      this.addColorInHistory(this.color);\n      this.color = colorEvent;\n      this.onChange(this.color);\n      \n    }\n  }\n\n  addColorInHistory(color:string){\n    // Проверяем, что цвет не равен первому элементу И не содержится в истории\n    if(this.history[0] != color && !this.history.includes(color)) this.history.splice(1, 0, color); // Добавляет color на позицию с индексом 1\n    // Удалем последний элемент из истории если история больше 9\n    if(this.history.length>9) this.history.pop();\n  }\n\n  private isValidColor(color: string): boolean {\n    const s = new Option().style;\n    s.color = color;\n    return s.color !== '';\n  }\n}","<!-- color-picker.component.html -->\n<div class=\"color-picker-container\" #container [style]=\"{'--input-color': color}\">\n  <input \n    type=\"text\"\n    [value]=\"color\" (click)=\"togglePicker()\"\n    readonly\n    class=\"color-input\"\n    [placeholder]=\"placeholder\"\n    (blur)=\"handleTouched()\"\n    \n  >\n    \n  <div class=\"picker-dropdown\" \n       *ngIf=\"isOpen\"\n       [class.dropdown-top]=\"placement === 'top'\"\n       [class.dropdown-bottom]=\"placement === 'bottom'\">\n    <div class=\"picker-backdrop\" (click)=\"closePicker()\"></div>\n    <div class=\"picker-content\">\n      <!-- (colorChange)=\"onColorChange($event)\"> -->\n      <color-chrome\n        [color]=\"currentColor\"\n        [disableAlpha]=\"true\"\n        (colorChange)=\"currentColor=$event\">\n      </color-chrome>\n      <div style=\"display: flex; margin: 0 auto; gap:5px\">\n        <div *ngFor=\"let col of history\" style=\"width: 12px; height: 12px; border-radius: 50%;\" [style]=\"{'background-color': col}\" (click)=\"currentColor=col\"></div>\n      </div>\n      \n      <button type=\"button\" class=\"close-btn apply-btn \" [style]=\"{'background-color': currentColor}\" (click)=\"apply()\" [disabled]=\"currentColor==color\">\n        {{currentColor==color?'Цвет активен':'Применить'}}\n      </button>\n    </div>\n  </div>\n</div>\n\n\n","import { Component, forwardRef, Input, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\n@Component({\n  selector: 'app-color-picker-standart',\n  templateUrl: './color-picker-standart.component.html',\n  styleUrls: ['./color-picker-standart.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ColorPickerStandartComponent),\n      multi: true\n    }\n  ]\n})\nexport class ColorPickerStandartComponent implements ControlValueAccessor, OnInit {\n  @Input() placeholder: string = 'Выберите цвет';\n  @Input() disabled: boolean = false;\n  @Input() preferredPlacement: 'top' | 'bottom' = 'bottom';\n  @Input() standartColor: string = '';\n  \n  color: string = '#000000';\n  currentColor: any = '#000000';\n  isOpen: boolean = false;\n  history: string[] = [];\n  \n  private onChange: (value: string) => void = () => {};\n  private onTouched: () => void = () => {};\n\n  ngOnInit(): void {\n    if (this.standartColor != '') this.history.push(this.standartColor);\n    if (this.color != '') this.currentColor = this.color;\n  }\n\n  writeValue(value: string): void {\n    if (value && this.isValidColor(value)) {\n      this.color = value;\n      this.currentColor = value;\n    }\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  handleTouched(): void {\n    this.onTouched();\n  }\n\n  togglePicker(): void {\n    if (this.disabled) return;\n    \n    this.isOpen = !this.isOpen;\n    if (this.isOpen) {\n      this.handleTouched();\n    }\n  }\n\n  closePicker(): void {\n    this.isOpen = false;\n  }\n\n  apply(): void {\n    this.onColorChange(this.currentColor);\n  }\n\n  onColorChange(colorEvent: string | any): void {\n    if (colorEvent && colorEvent != this.color) {\n      this.addColorInHistory(this.color);\n      this.color = colorEvent;\n      this.onChange(this.color);\n    }\n  }\n\n  addColorInHistory(color: string): void {\n    if (this.history[0] != color && !this.history.includes(color)) {\n      this.history.splice(1, 0, color);\n    }\n    if (this.history.length > 9) this.history.pop();\n  }\n\n  private isValidColor(color: string): boolean {\n    const s = new Option().style;\n    s.color = color;\n    return s.color !== '';\n  }\n}","<app-panel \n  [isOpen]=\"isOpen\" \n  [preferredPlacement]=\"preferredPlacement\"\n  (closed)=\"closePicker()\">\n  \n  <!-- Триггер -->\n  <div trigger class=\"color-picker-trigger\" [style]=\"{'--input-color': color}\">\n    <input \n      type=\"text\"\n      [value]=\"color\" \n      (click)=\"togglePicker()\"\n      readonly\n      class=\"color-input\"\n      [placeholder]=\"placeholder\"\n      (blur)=\"handleTouched()\"\n    >\n  </div>\n\n  <!-- Контент панели -->\n  <div content>\n    <color-chrome\n      [color]=\"currentColor\"\n      [disableAlpha]=\"true\"\n      (colorChange)=\"currentColor = $event\">\n    </color-chrome>\n    \n    <div class=\"color-history\">\n      <div \n        *ngFor=\"let col of history\" \n        class=\"history-color\" \n        [style]=\"{'background-color': col}\" \n        (click)=\"currentColor = col\">\n      </div>\n    </div>\n    \n    <button \n      type=\"button\" \n      class=\"close-btn apply-btn\" \n      [style]=\"{'background-color': currentColor}\" \n      (click)=\"apply()\" \n      [disabled]=\"currentColor == color\">\n      {{ currentColor == color ? 'Цвет активен' : 'Применить' }}\n    </button>\n  </div>\n</app-panel>","// src/app/shared/ui/color-pickers/color-picker/color-picker.module.ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ColorPickerDemoComponent } from './color-picker-demo/color-picker-demo.component';\nimport { NgxColorModule } from './lib/ngx-color.module';\nimport { NgxColorPickerModule } from './lib/ngx-color-picker.module';\nimport { ColorPickerStandartComponent } from './color-picker-standart/color-picker-standart.component';\nimport { CdkModule } from '../cdk/cdk.module';\n\n@NgModule({\n  declarations: [\n    ColorPickerDemoComponent,\n    ColorPickerStandartComponent,\n  ],\n  imports: [\n    CommonModule,\n    NgxColorModule,\n    NgxColorPickerModule,\n    CdkModule,\n  ],\n  exports: [\n    ColorPickerDemoComponent,\n    ColorPickerStandartComponent,\n    // NgxColorModule, \n    // NgxColorPickerModule,\n  ]\n})\nexport class ColorPickerModule { }","import { NgModule } from '@angular/core';\nimport { ColorPickerModule } from 'ngx-color-picker';\n\n@NgModule({\n  imports: [\n    ColorPickerModule\n  ],\n  exports: [\n    ColorPickerModule\n  ]\n})\nexport class NgxColorPickerModule { }","// color-picker.module.ts\nimport { NgModule } from '@angular/core';\nimport { ColorAlphaModule } from 'ngx-color/alpha'; // <color-alpha-picker></color-alpha-picker>\nimport { ColorBlockModule } from 'ngx-color/block'; // <color-block></color-block>\nimport { ColorChromeModule } from 'ngx-color/chrome'; // <color-chrome></color-chrome>\nimport { ColorCircleModule } from 'ngx-color/circle'; // <color-circle></color-circle>\nimport { ColorCompactModule } from 'ngx-color/compact'; // <color-compact></color-compact>\nimport { ColorGithubModule } from 'ngx-color/github'; // <color-github></color-github>\nimport { ColorHueModule } from 'ngx-color/hue'; // <color-hue-picker></color-hue-picker>\nimport { ColorMaterialModule } from 'ngx-color/material'; // <color-material></color-material>\nimport { ColorPhotoshopModule } from 'ngx-color/photoshop'; // <color-photoshop></color-photoshop>\nimport { ColorSketchModule } from 'ngx-color/sketch'; // <color-sketch></color-sketch>\nimport { ColorSliderModule } from 'ngx-color/slider'; // <color-slider></color-slider>\nimport { ColorSwatchesModule } from 'ngx-color/swatches'; // <color-swatches></color-swatches>\nimport { ColorTwitterModule } from 'ngx-color/twitter'; // <color-twitter></color-twitter>\nimport { ColorShadeModule } from 'ngx-color/shade'; // <color-shade-picker></color-shade-picker>\n\n@NgModule({\n  imports: [\n    ColorAlphaModule,\n    ColorBlockModule,\n    ColorChromeModule,\n    ColorCircleModule,\n    ColorCompactModule,\n    ColorGithubModule,\n    ColorHueModule,\n    ColorMaterialModule,\n    ColorPhotoshopModule,\n    ColorSketchModule,\n    ColorSliderModule,\n    ColorSwatchesModule,\n    ColorTwitterModule,\n    ColorShadeModule,\n  ],\n  exports: [\n    ColorAlphaModule,\n    ColorBlockModule,\n    ColorChromeModule,\n    ColorCircleModule,\n    ColorCompactModule,\n    ColorGithubModule,\n    ColorHueModule,\n    ColorMaterialModule,\n    ColorPhotoshopModule,\n    ColorSketchModule,\n    ColorSliderModule,\n    ColorSwatchesModule,\n    ColorTwitterModule,\n    ColorShadeModule,\n  ]\n})\nexport class NgxColorModule { }","import { NgModule } from '@angular/core';\nimport { ColorPickerModule } from './color-picker/color-picker.module';\nimport { AutocompleteModule } from './autocomplete/autocomplete.module';\nimport { LayoutComponent } from './cdk/layout/layout.component';\nimport { PopupComponent } from './cdk/popup/popup.component';\nimport { PanelComponent } from './cdk/panel/panel.component';\nimport { CdkModule } from './cdk/cdk.module';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    ColorPickerModule,\n    AutocompleteModule,\n  ],\n  exports: [\n    ColorPickerModule,\n    AutocompleteModule,\n  ]\n})\nexport class UiModule { }","import { AuthService } from './auth/services/auth.service';\nimport { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, switchMap, tap, finalize, map, BehaviorSubject, Subject } from 'rxjs';\nimport { ApiConfiguration } from './api/api-configuration';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  apiUrl: string;\n  private refreshTokenSubject?: Subject<void>;\n\n  constructor(\n    private auth: AuthService,\n    apiConfig: ApiConfiguration\n  ) {\n    this.apiUrl = apiConfig.rootUrl;\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.requestNotNeedToken(request)) {\n      return next.handle(request);\n    }\n    if (!this.auth.isTokenExpired()) {\n      return next.handle(this.injectToken(request))\n    }\n    if (!this.refreshTokenSubject) {\n      this.refreshTokenSubject = new Subject();\n      this.auth.refreshToken().subscribe(\n        () => {\n          this.refreshTokenSubject!.next();\n          this.refreshTokenSubject!.complete();\n          this.refreshTokenSubject = undefined;\n        }\n      )\n    }\n    return this.refreshTokenSubject.pipe(\n      switchMap(() => next.handle(this.injectToken(request))),\n    );\n  }\n\n  private injectToken(request: HttpRequest<any>) {\n    const token = this.auth.getToken();\n    if (token && request.url.startsWith(this.apiUrl)) {\n      request = request.clone({\n        headers: request.headers.set('Authorization', `Bearer ${token}`)\n      });\n    }\n    return request;\n  }\n\n  requestNotNeedToken(request: HttpRequest<any>): boolean {\n    const whiteList = ['/user_update_token', '/user_logout'];\n    return whiteList.some(path => request.url.endsWith(path))\n  }\n\n}\n","export * from './pattern-validator';","import { ValidatorFn, AbstractControl, ValidationErrors } from \"@angular/forms\";\n\nexport function patternValidator(cause: string, pattern: RegExp): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (isEmptyInputValue(control.value)) {\n      return null;\n    }\n    const allowed = pattern.test(control.value);\n    return allowed ? null : { [cause]: true };\n  };\n}\n\nexport const innValidator = patternValidator('inn', /^([0-9]{10,12})$/);\nexport const emailValidator = patternValidator('email', /^[a-z\\.\\-_0-9]+@[a-z\\.\\-_0-9]+\\.[a-z]{2,}$/i);\n\n\nfunction isEmptyInputValue(value: any): boolean {\n  return value == null ||\n    ((typeof value === 'string' || Array.isArray(value)) && value.length === 0);\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'https://dev.cargodrom.com/api/1.0'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["NativeDateAdapter","CustomDateAdapter","getFirstDayOfWeek","format","date","displayFormat","day","getDate","month","getMonth","year","getFullYear","_to2digit","n","slice","t","factory","ɵfac","ApiConfiguration","constructor","rootUrl","providedIn","BaseService","config","http","_rootUrl","i0","ɵɵinject","i1","i2","HttpClient","HttpRequest","HttpParams","HttpHeaders","ParameterCodec","encodeKey","key","encodeURIComponent","encodeValue","value","decodeKey","decodeURIComponent","decodeValue","ParameterCodecInstance","Parameter","name","options","defaultStyle","defaultExplode","style","undefined","explode","serializeValue","separator","Array","map","v","split","join","array","Object","keys","propVal","push","String","PathParameter","append","path","prefix","alreadySerialized","replace","result","QueryParameter","params","HeaderParameter","headers","RequestBuilder","operationPath","method","_path","Map","_query","_header","set","query","header","body","contentType","Blob","_bodyContentType","type","pairs","val","formValue","formDataValue","_bodyContent","p","formData","FormData","toAppend","JSON","stringify","build","pathParam","values","url","httpParams","encoder","queryParam","httpHeaders","accept","headerParam","toUpperCase","responseType","reportProgress","context","CargoService","CompanyService","ContractorService","CustomerService","DataService","DirectionService","FileService","MessageService","OrderService","RequestService","SettingsService","SystemService","TransportService","UserService","HttpResponse","filter","CargoPackagePath","cargoPackage$Response","rb","request","pipe","r","cargoPackage","CargoTypePath","cargoType$Response","cargoType","CompanyListPath","companyList$Response","start","count","sort","companyList","CompanyInfoPath","companyInfo$Response","id","companyInfo","CompanyCreatePath","companyCreate$Response","companyCreate","CompanyUpdatePath","companyUpdate$Response","companyUpdate","CompanyDeletePath","companyDelete$Response","companyDelete","CompanyDepartmentListPath","companyDepartmentList$Response","companyDepartmentList","CompanyDepartmentInfoPath","companyDepartmentInfo$Response","companyDepartmentInfo","CompanyDepartmentCreatePath","companyDepartmentCreate$Response","companyDepartmentCreate","CompanyDepartmentUpdatePath","companyDepartmentUpdate$Response","companyDepartmentUpdate","CompanyDepartmentDeletePath","companyDepartmentDelete$Response","companyDepartmentDelete","CompanyPositionListPath","companyPositionList$Response","companyPositionList","CompanyPositionInfoPath","companyPositionInfo$Response","companyPositionInfo","CompanyPositionCreatePath","companyPositionCreate$Response","companyPositionCreate","CompanyPositionUpdatePath","companyPositionUpdate$Response","companyPositionUpdate","CompanyPositionDeletePath","companyPositionDelete$Response","companyPositionDelete","CompanyEmployeeListPath","companyEmployeeList$Response","department_id","position_id","companyEmployeeList","CompanyEmployeeInfoPath","companyEmployeeInfo$Response","companyEmployeeInfo","CompanyEmployeeCreatePath","companyEmployeeCreate$Response","companyEmployeeCreate","CompanyEmployeeUpdatePath","companyEmployeeUpdate$Response","companyEmployeeUpdate","CompanyEmployeeDeletePath","companyEmployeeDelete$Response","companyEmployeeDelete","ContractorListPath","contractorList$Response","contractorList","ContractorListParamPath","contractorListParam$Response","contractorListParam","ContractorInfoPath","contractorInfo$Response","contractorInfo","ContractorCreatePath","contractorCreate$Response","contractorCreate","ContractorUpdatePath","contractorUpdate$Response","contractorUpdate","ContractorDeletePath","contractorDelete$Response","contractorDelete","ContractorContactListPath","contractorContactList$Response","contractorContactList","ContractorContactInfoPath","contractorContactInfo$Response","contractorContactInfo","ContractorContactCreatePath","contractorContactCreate$Response","contractorContactCreate","ContractorContactUpdatePath","contractorContactUpdate$Response","contractorContactUpdate","ContractorContactDeletePath","contractorContactDelete$Response","contractorContactDelete","ContractorRequestFormatPath","contractorRequestFormat$Response","contractorRequestFormat","ContractorTypePath","contractorType$Response","contractorType","ContractorExportPath","contractorExport$Response","contractorExport","ContractorImportTemplatePath","contractorImportTemplate$Response","contractorImportTemplate","ContractorImportPath","contractorImport$Response","contractorImport","ContractorImportConfirmPath","contractorImportConfirm$Response","import_key","contractorImportConfirm","ContractorImportResultPath","contractorImportResult$Response","contractorImportResult","CustomerListPath","customerList$Response","customerList","CustomerListParamPath","customerListParam$Response","customerListParam","CustomerInfoPath","customerInfo$Response","customerInfo","CustomerCreatePath","customerCreate$Response","customerCreate","CustomerUpdatePath","customerUpdate$Response","customerUpdate","CustomerDeletePath","customerDelete$Response","customerDelete","CustomerFilesPath","customerFiles$Response","item_id","var","customerFiles","CustomerFileCreatePath","customerFileCreate$Response","customerFileCreate","CustomerFileDeletePath","customerFileDelete$Response","customerFileDelete","CustomerGroupListPath","customerGroupList$Response","customerGroupList","CustomerGroupInfoPath","customerGroupInfo$Response","customerGroupInfo","CustomerGroupCreatePath","customerGroupCreate$Response","customerGroupCreate","CustomerGroupUpdatePath","customerGroupUpdate$Response","customerGroupUpdate","CustomerGroupDeletePath","customerGroupDelete$Response","customerGroupDelete","CustomerExportPath","customerExport$Response","customerExport","CustomerImportTemplatePath","customerImportTemplate$Response","customerImportTemplate","CustomerImportPath","customerImport$Response","customerImport","CustomerImportConfirmPath","customerImportConfirm$Response","customerImportConfirm","CustomerImportResultPath","customerImportResult$Response","customerImportResult","DataInfoPath","dataInfo$Response","dataInfo","DataMakePath","dataMake$Response","dataMake","DataUpdatePath","dataUpdate$Response","dataUpdate","DataDeletePath","dataDelete$Response","dataDelete","DirectionTypePath","directionType$Response","directionType","DirectionCountryPath","directionCountry$Response","directionCountry","DirectionCountryInfoPath","directionCountryInfo$Response","directionCountryInfo","DirectionCityPath","directionCity$Response","country_id","search","directionCity","DirectionCityInfoPath","directionCityInfo$Response","directionCityInfo","DirectionPointPath","directionPoint$Response","city_id","transport_kind_id","directionPoint","DirectionBorderPath","directionBorder$Response","directionBorder","DirectionFlightPath","directionFlight$Response","directionFlight","DirectionRoutePath","directionRoute$Response","kind_id","departure_country_id","departure_city_id","departure_point_id","arrival_country_id","arrival_city_id","arrival_point_id","route_type","directionRoute","FileListPath","fileList$Response","component","fileList","FileInfoPath","fileInfo$Response","fileInfo","FileCreatePath","fileCreate$Response","fileCreate","FileUpdatePath","fileUpdate$Response","fileUpdate","FileDeletePath","fileDelete$Response","fileDelete","FileDownloadPath","fileDownload$Response","fileDownload","MessageListPath","messageList$Response","messageList","MessageListParamPath","messageListParam$Response","messageListParam","MessageFormParamPath","messageFormParam$Response","messageFormParam","MessageSavePath","messageSave$Response","messageSave","MessageSetReadPath","messageSetRead$Response","messageSetRead","MessageGetNewPath","messageGetNew$Response","messageGetNew","MessageDeletePath","messageDelete$Response","messageDelete","OrderListParamPath","orderListParam$Response","orderListParam","OrderFormParamPath","orderFormParam$Response","orderFormParam","OrderListPath","orderList$Response","orderList","OrderInfoPath","orderInfo$Response","orderInfo","OrderMakeFromOfferPath","orderMakeFromOffer$Response","orderMakeFromOffer","OrderMakePath","orderMake$Response","orderMake","OrderUpdatePath","orderUpdate$Response","orderUpdate","OrderDeletePath","orderDelete$Response","orderDelete","RequestListPath","requestList$Response","requestList","RequestListParamPath","requestListParam$Response","requestListParam","RequestInfoPath","requestInfo$Response","requestInfo","RequestCreatePath","requestCreate$Response","requestCreate","RequestUpdatePath","requestUpdate$Response","requestUpdate","RequestDeletePath","requestDelete$Response","requestDelete","RequestFilesPath","requestFiles$Response","requestFiles","RequestFileCreatePath","requestFileCreate$Response","requestFileCreate","RequestFileDeletePath","requestFileDelete$Response","requestFileDelete","RequestContractorSelectGetPath","requestContractorSelectGet$Response","requestContractorSelectGet","RequestContractorSelectUpdatePath","requestContractorSelectUpdate$Response","requestContractorSelectUpdate","RequestSaveBiddingPath","requestSaveBidding$Response","requestSaveBidding","RequestEmployeeSelectGetPath","requestEmployeeSelectGet$Response","requestEmployeeSelectGet","RequestEmployeeSelectUpdatePath","requestEmployeeSelectUpdate$Response","requestEmployeeSelectUpdate","RequestSaveEmployeeBiddingPath","requestSaveEmployeeBidding$Response","requestSaveEmployeeBidding","RequestStatusPath","requestStatus$Response","requestStatus","RequestStatusCrmPath","requestStatusCrm$Response","requestStatusCrm","RequestTypePath","requestType$Response","requestType","RequestServicesPath","requestServices$Response","requestServices","RequestServicesAdditionalPath","requestServicesAdditional$Response","requestServicesAdditional","RequestIncotermsPath","requestIncoterms$Response","requestIncoterms","RequestExportPath","requestExport$Response","requestExport","RequestImportTemplatePath","requestImportTemplate$Response","requestImportTemplate","RequestImportPath","requestImport$Response","requestImport","RequestImportConfirmPath","requestImportConfirm$Response","requestImportConfirm","RequestImportResultPath","requestImportResult$Response","requestImportResult","RequestTranslatePath","requestTranslate$Response","requestTranslate","RequestTranslateSavePath","requestTranslateSave$Response","requestTranslateSave","RequestRatesPath","requestRates$Response","uid","requestRates","RequestRatesSavePath","requestRatesSave$Response","requestRatesSave","RequestRateFormParamPath","requestRateFormParam$Response","request_id","requestRateFormParam","RequestRateListParamPath","requestRateListParam$Response","requestRateListParam","RequestRateDeletePath","requestRateDelete$Response","requestRateDelete","RequestRateDoublePath","requestRateDouble$Response","requestRateDouble","RequestRateCustomsListPath","requestRateCustomsList$Response","requestRateCustomsList","RequestRateCustomsSavePath","requestRateCustomsSave$Response","requestRateCustomsSave","RequestRatePointListPath","requestRatePointList$Response","requestRatePointList","RequestRatePointSavePath","requestRatePointSave$Response","requestRatePointSave","RequestRateTransporterListPath","requestRateTransporterList$Response","requestRateTransporterList","RequestRateTransporterSavePath","requestRateTransporterSave$Response","requestRateTransporterSave","RequestRateFinalListPath","requestRateFinalList$Response","requestRateFinalList","RequestRateFinaleDeletePath","requestRateFinaleDelete$Response","requestRateFinaleDelete","RequestRateOtherListPath","requestRateOtherList$Response","requestRateOtherList","RequestRateOtherSavePath","requestRateOtherSave$Response","requestRateOtherSave","RequestOfferListPath","requestOfferList$Response","requestOfferList","RequestOfferMakePath","requestOfferMake$Response","requestOfferMake","RequestOfferInfoPath","requestOfferInfo$Response","requestOfferInfo","RequestOfferSavePath","requestOfferSave$Response","requestOfferSave","RequestOfferDeletePath","requestOfferDelete$Response","requestOfferDelete","RequestOfferTxtPath","requestOfferTxt$Response","requestOfferTxt","RequestOfferPdfPath","requestOfferPdf$Response","requestOfferPdf","RequestOfferCalcPath","requestOfferCalc$Response","requestOfferCalc","RequestOfferDelRatePath","requestOfferDelRate$Response","rate_id","requestOfferDelRate","RequestOfferCopyPath","requestOfferCopy$Response","requestOfferCopy","RequestOfferSendPath","requestOfferSend$Response","requestOfferSend","RequestOfferStatusesPath","requestOfferStatuses$Response","requestOfferStatuses","RequestOfferSetStatusPath","requestOfferSetStatus$Response","status_id","requestOfferSetStatus","SettingsGetPath","settingsGet$Response","settingsGet","SettingsUpdatePath","settingsUpdate$Response","settingsUpdate","SettingsFilterListPath","settingsFilterList$Response","table","settingsFilterList","SettingsFilterFormParamPath","settingsFilterFormParam$Response","settingsFilterFormParam","SettingsFilterSavePath","settingsFilterSave$Response","settingsFilterSave","SettingsFilterSaveOrderPath","settingsFilterSaveOrder$Response","settingsFilterSaveOrder","SettingsFilterDeletePath","settingsFilterDelete$Response","settingsFilterDelete","SystemTaxSystemPath","systemTaxSystem$Response","systemTaxSystem","SystemCurrencyPath","systemCurrency$Response","systemCurrency","SystemHeadPositionPath","systemHeadPosition$Response","systemHeadPosition","SystemServicesPath","systemServices$Response","systemServices","SystemBusinessPath","systemBusiness$Response","systemBusiness","SystemCounterpartyPath","systemCounterparty$Response","systemCounterparty","SystemInteractionPath","systemInteraction$Response","systemInteraction","SystemContactSourcePath","systemContactSource$Response","systemContactSource","SystemCustomerStatusPath","systemCustomerStatus$Response","systemCustomerStatus","SystemAssociationPath","systemAssociation$Response","systemAssociation","SystemRatingPath","systemRating$Response","systemRating","TransportKindPath","transportKind$Response","transportKind","TransportSubKindPath","transportSubKind$Response","transportSubKind","TransportTypePath","transportType$Response","transportType","TransportLoadingPath","transportLoading$Response","transportLoading","TransportBodyPath","transportBody$Response","transportBody","TransportCarrierPath","transportCarrier$Response","transportCarrier","TransportRoutePath","transportRoute$Response","carrier_id","country_id_departure","country_id_arrival","city_id_departure","city_id_arrival","point_id_departure","point_id_arrival","transportRoute","TransportPointActionPath","transportPointAction$Response","direction","transportPointAction","UserCreatePath","userCreate$Response","userCreate","UserSendCodePath","userSendCode$Response","userSendCode","UserConfirmPath","userConfirm$Response","userConfirm","UserSendResetCodePath","userSendResetCode$Response","userSendResetCode","UserResetPasswordPath","userResetPassword$Response","userResetPassword","UserCreateInvitePath","userCreateInvite$Response","userCreateInvite","UserRegisterInvitePath","userRegisterInvite$Response","userRegisterInvite","UserUpdatePasswordPath","userUpdatePassword$Response","userUpdatePassword","UserInviteDataPath","userInviteData$Response","userInviteData","UserLoginPath","userLogin$Response","userLogin","UserLogoutPath","userLogout$Response","userLogout","UserUpdateTokenPath","userUpdateToken$Response","userUpdateToken","UserSaveTableParamPath","userSaveTableParam$Response","userSaveTableParam","UserResetTableParamPath","userResetTableParam$Response","userResetTableParam","UserGetParamPath","userGetParam$Response","userGetParam","UserSaveParamPath","userSaveParam$Response","userSaveParam","UserFormParamParamPath","userFormParamParam$Response","userFormParamParam","UserGuard","LogoutComponent","RouterModule","LoginComponent","RegisterComponent","ConfirmComponent","RequestRateComponent","EmployeeRegisterComponent","PasswordRecoveryComponent","useHash","scrollPositionRestoration","anchorScrolling","onSameUrlNavigation","routes","loadChildren","then","m","PagesModule","canActivate","title","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","exports","AppComponent","userService","loaderService","ngOnInit","ɵɵdirectiveInject","LoaderService","selectors","decls","vars","template","AppComponent_Template","rf","ctx","ɵɵelement","AuthModule","HttpClientModule","HTTP_INTERCEPTORS","LOCALE_ID","BrowserModule","ErrorInterceptor","TokenInterceptor","BrowserAnimationsModule","registerLocaleData","localeRu","PageTitleService","TitleStrategy","MatDatepickerModule","NgScrollbarModule","LoaderComponent","LoadingInterceptor","SharedModule","AppModule","bootstrap","provide","useClass","multi","useValue","declarations","MaterialModule","CommonModule","FormsModule","ReactiveFormsModule","Validators","finalize","tap","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","formattedTime","ɵɵlistener","ConfirmComponent_p_27_Template_p_click_0_listener","ɵɵrestoreView","_r3","ctx_r2","ɵɵnextContext","ɵɵresetView","reSendCode","route","fb","router","popup","register","loading","remainingTime","checkForm","group","code","required","snapshot","navigate","startTimer","ngOnDestroy","timer","clearInterval","restartTimer","minutes","Math","floor","seconds","onSubmitCode","alert","setInterval","doCheck","valid","err","error","controls","confirm","subscribe","next","processResult","data","ActivatedRoute","FormBuilder","Router","i3","PopupService","i4","RegisterService","i5","consts","ConfirmComponent_Template","ConfirmComponent_Template_form_ngSubmit_10_listener","ConfirmComponent_Template_span_click_23_listener","ɵɵtemplate","ConfirmComponent_p_26_Template","ConfirmComponent_p_27_Template","ɵɵproperty","ɵɵpureFunction0","_c0","auth","dialog","passwordVisible","loginForm","login","password","togglePasswordVisibility","doLogin","console","log","processLogin","returnUrl","queryParams","navigateByUrl","AuthService","MatDialog","LoginComponent_Template","LoginComponent_Template_form_ngSubmit_7_listener","LoginComponent_Template_button_click_19_listener","LoginComponent_Template_span_click_28_listener","ɵɵclassMap","_c1","delay","logout","LogoutComponent_Template","Subject","takeUntil","PasswordRecoveryComponent_form_7_Template_form_ngSubmit_0_listener","getCode","PasswordRecoveryComponent_form_7_Template_span_click_9_listener","ctx_r4","getCodeForm","PasswordRecoveryComponent_form_8_Template_form_ngSubmit_0_listener","_r6","ctx_r5","onResetPassword","PasswordRecoveryComponent_form_8_Template_button_click_18_listener","ctx_r7","PasswordRecoveryComponent_form_8_Template_button_click_24_listener","ctx_r8","PasswordRecoveryComponent_form_8_Template_span_click_27_listener","ctx_r9","ctx_r1","resetPasswordForm","snackBar","snackBarWithShortDuration","duration","snackBarWithLongDuration","_destroy$","confirm_password","services","e","open","patchValue","error_message","i6","i7","MatSnackBar","PasswordRecoveryComponent_Template","PasswordRecoveryComponent_form_7_Template","PasswordRecoveryComponent_form_8_Template","emailValidator","innValidator","registerForm","company","fio","phone","inn","email","password_confirm","checkAllFieldsFilled","every","field","control","get","formatPhone","event","input","target","length","substring","setValue","emitEvent","_email","_inn","doRegister","errors","save","processConfirm","RegisterComponent_Template","RegisterComponent_Template_form_ngSubmit_10_listener","RegisterComponent_Template_input_input_27_listener","$event","RegisterComponent_Template_span_click_54_listener","of","TOKEN_INFO_KEY","storage","window","localStorage","loadTokenFromStorage","res","tokenInfo","saveTokenToStorage","isAuthenticated","token","removeTokenFromLocalStorage","getToken","tokenInfoString","getItem","parse","setItem","removeItem","isTokenExpired","token_expire","expireDate","Date","now","getTime","refreshToken","refresh_token","state","catchError","intercept","handle","status","currentState","throwError","loadingService","req","show","hide","isLoading","debugInfo","subscription","isLoading$","unsubscribe","LoaderComponent_Template","LoaderComponent_div_0_Template","BehaviorSubject","activeRequests","isLoadingSubject","asObservable","setTimeout","EventEmitter","ɵɵtextInterpolate","EditorHeaderComponent_a_2_Template_a_click_0_listener","_r7","ctx_r6","goBack","EditorHeaderComponent_a_2_div_2_Template","EditorHeaderComponent_a_2_div_3_Template","isEditMode","EditorHeaderComponent_a_3_Template_a_click_0_listener","_r10","EditorHeaderComponent_a_3_div_2_Template","rate_contractor_name","EditorHeaderComponent_div_7_span_1_Template_span_click_0_listener","_r15","ctx_r14","onSave","EditorHeaderComponent_div_7_span_5_Template_span_click_0_listener","_r17","ctx_r16","goCalc","EditorHeaderComponent_div_7_span_6_Template_span_click_0_listener","_r19","ctx_r18","onRemove","EditorHeaderComponent_div_7_span_1_Template","EditorHeaderComponent_div_7_Template_span_click_2_listener","_r21","ctx_r20","EditorHeaderComponent_div_7_span_5_Template","EditorHeaderComponent_div_7_span_6_Template","EditorHeaderComponent_div_7_Template_span_click_7_listener","ctx_r22","ctx_r3","isSend","isCalck","EditorHeaderComponent","location","navigationHistoryService","remove","calc","content","send","backLink","emit","back","onSend","Location","NavigationHistoryService","inputs","outputs","ngContentSelectors","EditorHeaderComponent_Template","EditorHeaderComponent_a_2_Template","EditorHeaderComponent_a_3_Template","EditorHeaderComponent_div_4_Template","ɵɵprojection","EditorHeaderComponent_div_7_Template","limit_r12","PaginatorComponent_ng_container_1_a_8_Template_a_click_0_listener","_r14","ctx_r13","goToPage","prevPage","PaginatorComponent_ng_container_1_a_9_Template_a_click_0_listener","_r16","ctx_r15","PaginatorComponent_ng_container_1_a_11_Template_a_click_0_listener","_r18","ctx_r17","prevPrevPage","userPage","PaginatorComponent_ng_container_1_a_12_Template_a_click_0_listener","_r20","ctx_r19","PaginatorComponent_ng_container_1_a_15_Template_a_click_0_listener","_r22","ctx_r21","nextPage","PaginatorComponent_ng_container_1_a_16_Template_a_click_0_listener","_r24","ctx_r23","nextNextPage","PaginatorComponent_ng_container_1_a_18_Template_a_click_0_listener","_r26","ctx_r25","lastPage","ctx_r10","PaginatorComponent_ng_container_1_a_19_Template_a_click_0_listener","_r28","ctx_r27","ɵɵelementContainerStart","PaginatorComponent_ng_container_1_Template_mat_select_ngModelChange_2_listener","_r30","ctx_r29","newCountSelected","PaginatorComponent_ng_container_1_mat_option_3_Template","PaginatorComponent_ng_container_1_a_8_Template","PaginatorComponent_ng_container_1_a_9_Template","PaginatorComponent_ng_container_1_span_10_Template","PaginatorComponent_ng_container_1_a_11_Template","PaginatorComponent_ng_container_1_a_12_Template","PaginatorComponent_ng_container_1_a_15_Template","PaginatorComponent_ng_container_1_a_16_Template","PaginatorComponent_ng_container_1_span_17_Template","PaginatorComponent_ng_container_1_a_18_Template","PaginatorComponent_ng_container_1_a_19_Template","ɵɵelementContainerEnd","limits","ɵɵtextInterpolate3","first","last","total","currentPage","PaginatorComponent","startChange","countChange","ngOnChanges","changes","min","ceil","page","features","ɵɵNgOnChangesFeature","PaginatorComponent_Template","PaginatorComponent_ng_container_1_Template","MAT_DIALOG_DATA","message_r1","ɵɵsanitizeHtml","PopupDialogComponent","sanitizer","trustedMessages","messages","message","bypassSecurityTrustHtml","DomSanitizer","PopupDialogComponent_Template","PopupDialogComponent_p_4_Template","FocusInitialDirective","element","ngAfterViewInit","nativeElement","focus","ElementRef","PhoneMaskDirective","el","getInputNumbersValue","onPhonePaste","inputNumbersValue","pasted","clipboardData","pastedText","getData","test","onPhoneInput","selectionStart","formattedInputValue","indexOf","firstSymbols","onPhoneBlur","onPhoneKeyDown","inputValue","keyCode","hostBindings","PhoneMaskDirective_HostBindings","PhoneMaskDirective_input_HostBindingHandler","PhoneMaskDirective_blur_HostBindingHandler","PhoneMaskDirective_keydown_HostBindingHandler","MatDialogModule","MatFormFieldModule","MatSelectModule","MatSnackBarModule","MatAutocompleteModule","MatInputModule","MatCheckboxModule","MatButtonModule","MatTableModule","MatButtonToggleModule","MatTabsModule","MatMenuModule","MatProgressSpinnerModule","MatRadioModule","DragDropModule","OverlayModule","DateAdapter","MAT_DATE_LOCALE","MatNativeDateModule","MatIconModule","deps","arr","isArray","error_message_description","note","str","updateTitle","routerState","buildTitle","setTitle","Title","userSevrice","hasOldPassword","old_password","segments","s","getUserData","complete","registerUser","has_old_password","EmployeeRegisterComponent_Template","EmployeeRegisterComponent_Template_form_ngSubmit_10_listener","EmployeeRegisterComponent_div_11_Template","EmployeeRegisterComponent_Template_span_click_38_listener","NG_VALUE_ACCESSOR","NG_VALIDATORS","formatDate","RateEditorComponent_div_16_Template_div_click_0_listener","restoredCtx","i_r16","index","onChangeRate","ɵɵpureFunction1","currentRateNumber","ɵɵtextInterpolate2","rate_r15","carrier_name","route_r19","iata","RateEditorComponent_mat_option_55_Template_mat_option_onSelectionChange_0_listener","route_r20","$implicit","onRouteChange","day_r23","transportRoute_r24","chargeModel_r30","requare","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_3_div_12_Template_input_ngModelChange_2_listener","_r46","chargeValue_r27","ctx_r44","calck","unit","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_3_Template_input_ngModelChange_5_listener","_r51","ctx_r49","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_3_Template_input_ngModelChange_8_listener","ctx_r52","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_3_div_12_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_3_div_13_Template","ctx_r36","rateChar","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_4_div_1_Template_input_ngModelChange_4_listener","_r61","ctx_r59","ctx_r55","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_4_div_9_Template_input_ngModelChange_2_listener","_r64","ctx_r62","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_4_div_1_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_4_span_2_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_4_Template_input_ngModelChange_5_listener","_r69","ctx_r67","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_4_div_9_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_4_div_10_Template","field_fix","ctx_r37","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_5_Template_input_change_6_listener","_r73","ctx_r71","calckCost","ctx_r38","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_6_Template_input_change_3_listener","_r76","ctx_r74","ctx_r39","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_label_1_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_label_2_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_3_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_4_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_5_Template","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_div_6_Template","field_min","field_comment","RateEditorComponent_div_94_div_4_2_ng_template_0_div_0_Template","select","RateEditorComponent_div_94_div_4_2_ng_template_0_Template","field_name","RateEditorComponent_div_94_div_4_2_Template","i_r28","chargeModel","chargeModel_r82","ctx_r85","RateEditorComponent_div_94_div_8_2_ng_template_0_div_0_Template","chargeValue_r79","RateEditorComponent_div_94_div_8_2_ng_template_0_Template","RateEditorComponent_div_94_div_8_2_Template","i_r80","ctx_r26","RateEditorComponent_div_94_div_4_Template","RateEditorComponent_div_94_div_8_Template","charges","chargeModel_r93","RateEditorComponent_div_95_div_4_2_ng_template_0_div_0_label_1_Template","RateEditorComponent_div_95_div_4_2_ng_template_0_div_0_label_2_Template","RateEditorComponent_div_95_div_4_2_ng_template_0_div_0_Template","chargeValue_r90","RateEditorComponent_div_95_div_4_2_ng_template_0_Template","RateEditorComponent_div_95_div_4_2_Template","i_r91","ctx_r88","chargeModel_r106","RateEditorComponent_div_95_div_8_2_ng_template_0_div_0_Template","chargeValue_r103","RateEditorComponent_div_95_div_8_2_ng_template_0_Template","RateEditorComponent_div_95_div_8_2_Template","i_r104","ctx_r89","RateEditorComponent_div_95_div_4_Template","RateEditorComponent_div_95_div_8_Template","ctx_r11","rateForm","total_cost","ctx_r12","rateCode","RateEditorComponent","calculationsService","transportService","contractorService","directionService","removeRate","addRate","indexRateChange","duplicateRate","onChange","onTouched","touched","daysOfTheWeek","date_id","isSelectedDate","nearest_flight","find","x","carrier_desc","comment","departure_schedule","num","profit_include","rate_type","route_name","transit_time","transit_time_from","transit_time_to","currency","getTransportCarrier","getTransportRoute","forEach","i","cost","fix","price","weight","markAsTouched","valueChanges","statusChanges","char","calckTotalCost","writeValue","contact","registerOnChange","fn","registerOnTouched","validate","onDeleteRate","deleteRateDialogRef","afterClosed","onAddRate","onDuplicateRate","addCharge","days_min","days_max","filterRote","filterRoute","option","toLowerCase","replaceAll","includes","filterIata","returnAirlineName","returnAirlineIata","onRateTypeChange","reset","costValue","calculateRate","sum","calculateSum","returnSelectDateText","text","dateOnj","dateTest","toLocaleString","mount","sortedArray","a","b","ind","selectDate","calendar","findIndex","dayOfWeek","getDay","istestDate","verticalPosition","horizontalPosition","panelClass","splice","updateTodaysDate","requestKindId","CalculationsService","viewQuery","RateEditorComponent_Query","useExisting","RateEditorComponent_Template","RateEditorComponent_Template_input_change_6_listener","RateEditorComponent_Template_input_change_11_listener","RateEditorComponent_div_16_Template","RateEditorComponent_Template_button_click_17_listener","RateEditorComponent_Template_button_click_20_listener","RateEditorComponent_Template_button_click_23_listener","RateEditorComponent_mat_option_47_Template","RateEditorComponent_mat_option_55_Template","RateEditorComponent_mat_option_62_Template","RateEditorComponent_Template_div_click_73_listener","stopPropagation","RateEditorComponent_Template_mat_calendar_selectedChange_74_listener","_r113","ɵɵreference","RateEditorComponent_mat_option_93_Template","RateEditorComponent_div_94_Template","RateEditorComponent_div_95_Template","RateEditorComponent_div_97_Template","RateEditorComponent_div_98_Template","RateEditorComponent_ng_template_108_Template","ɵɵtemplateRefExtractor","rates","_r1","environment","cargo_readiness","cargo_condition_carriage","RequestRateComponent_div_102_div_4_Template_div_click_0_listener","_r9","documentsFile_r7","getFile","file_name","RequestRateComponent_div_102_div_5_Template_div_click_0_listener","_r12","cargoFile_r10","RequestRateComponent_div_102_div_4_Template","RequestRateComponent_div_102_div_5_Template","documents_file","cargo_file","RequestRateComponent_div_104_Template_app_rate_editor_removeRate_1_listener","i_r14","RequestRateComponent_div_104_Template_app_rate_editor_addRate_1_listener","RequestRateComponent_div_104_Template_app_rate_editor_indexRateChange_1_listener","RequestRateComponent_div_104_Template_app_rate_editor_duplicateRate_1_listener","requestForm","cargo_places_paid_weight","currencyList","requestService","fileSevice","systemService","production","xlsxMimeType","paramMap","getRequestRates","getCurrency","removeAt","copyDispatchText","navigator","clipboard","writeText","departure_country_name","departure_city_name","departure_address","departure_point_name","copyDestinationText","arrival_country_name","arrival_city_name","arrival_address","arrival_point_name","current","file","dataUri","document","createElement","href","download","click","saveRequestRates","RequestRateComponent_Template","RequestRateComponent_Template_button_click_24_listener","RequestRateComponent_Template_button_click_38_listener","RequestRateComponent_div_59_Template","RequestRateComponent_div_95_Template","RequestRateComponent_div_101_Template","RequestRateComponent_div_102_Template","RequestRateComponent_div_104_Template","RequestRateComponent_Template_button_click_106_listener","time_add","ɵɵpropertyInterpolate4","ɵɵsanitizeUrl","cargo_type_name","cargo_description","incoterms_name","incoterms_city_name","cargo_places_count","cargo_places_volume","cargo_places_weight","ɵɵpipeBind2","cargo_places_density","cargo_dimensions","numbers","_convertToNumbers","reduce","acc","curr","_preciseAdd","_roundToTwoDecimals","calculateProduct","product","_preciseMultiply","numPrice","_safeConvertToNumber","numValue","numMin","numFix","aDecimals","toString","bDecimals","maxDecimals","max","factor","pow","aInt","bInt","Number","isInteger","parseFloat","round","EPSILON","toFixed","cleanedValue","isNaN","forkJoin","wrapRequests","requestsObject","requestKeys","addRequests","wrappedRequests","removeRequest","updateLoadingState","k","shouldBeLoading","NavigationEnd","history","maxHistoryLength","setupNavigationTracking","events","addToHistory","urlAfterRedirects","printHistoryToConsole","fullUrl","isPagesModuleUrl","pathWithoutParams","removeQueryParams","isSamePath","updateLastEntry","navigationEntry","timestamp","shift","startsWith","currentPath","lastEntry","lastEntryPath","newUrl","fallbackUrl","pop","previousEntry","getHistory","getLastEntry","clearHistory","getHistoryLength","IframeStyleDirective","IconColorDirective","DirectivesModule","color","applyStyles","setProperty","classList","add","styleString","isIframeLoaded","resizeObserver","mutationObserver","lastHeight","addEventListener","inject","setupHeightObserver","currentValue","iframe","doc","contentDocument","getElementById","head","appendChild","textContent","contentDiv","querySelector","divElement","property","trim","userModuleDiv","warn","updateIframeHeight","userModuleHeight","scrollHeight","newHeight","height","ResizeObserver","observe","MutationObserver","childList","subtree","attributes","characterData","contentWindow","disconnect","UiModule","AutocompleteModule","LayoutComponent","PopupComponent","PanelComponent","CdkModule","LayoutComponent_div_0_Template_div_click_0_listener","_r2","onBackdropClick","closed","onEscape","close","currentTarget","LayoutComponent_HostBindings","ɵɵresolveDocument","LayoutComponent_div_0_Template","PanelComponent_div_2_Template_div_click_1_listener","PanelComponent_div_2_Template_div_click_2_listener","onContentClick","ɵɵclassProp","placement","elementRef","isOpen","preferredPlacement","closeOnBackdropClick","setupResizeObserver","updatePanelPosition","container","rect","getBoundingClientRect","viewportHeight","innerHeight","panelHeight","spaceBelow","bottom","spaceAbove","top","onDocumentClick","clickedInside","contains","closePanel","onWindowChange","PanelComponent_HostBindings","PanelComponent_scroll_HostBindingHandler","ɵɵresolveWindow","PanelComponent_resize_HostBindingHandler","PanelComponent_div_2_Template","PopupComponent_HostBindings","PopupComponent_Template_app_layout_closed_0_listener","PopupComponent_Template_div_click_1_listener","forwardRef","ColorPickerDemoComponent_div_3_div_5_Template_div_click_0_listener","_r5","col_r3","currentColor","ɵɵstyleMap","ColorPickerDemoComponent_div_3_Template_div_click_1_listener","closePicker","ColorPickerDemoComponent_div_3_Template_color_chrome_colorChange_3_listener","ColorPickerDemoComponent_div_3_div_5_Template","ColorPickerDemoComponent_div_3_Template_button_click_6_listener","apply","ColorPickerDemoComponent","placeholder","disabled","standartColor","handleTouched","updateDropdownPosition","containerElement","dropdownHeight","closest","isValidColor","setDisabledState","isDisabled","togglePicker","onColorChange","colorEvent","addColorInHistory","Option","ColorPickerDemoComponent_Query","ColorPickerDemoComponent_scroll_HostBindingHandler","ColorPickerDemoComponent_resize_HostBindingHandler","ColorPickerDemoComponent_Template","ColorPickerDemoComponent_Template_input_click_2_listener","ColorPickerDemoComponent_Template_input_blur_2_listener","ColorPickerDemoComponent_div_3_Template","_c2","ColorPickerStandartComponent_div_6_Template_div_click_0_listener","col_r1","ColorPickerStandartComponent","ɵɵProvidersFeature","ColorPickerStandartComponent_Template","ColorPickerStandartComponent_Template_app_panel_closed_0_listener","ColorPickerStandartComponent_Template_input_click_2_listener","ColorPickerStandartComponent_Template_input_blur_2_listener","ColorPickerStandartComponent_Template_color_chrome_colorChange_4_listener","ColorPickerStandartComponent_div_6_Template","ColorPickerStandartComponent_Template_button_click_7_listener","NgxColorModule","NgxColorPickerModule","ColorPickerModule","ColorAlphaModule","ColorBlockModule","ColorChromeModule","ColorCircleModule","ColorCompactModule","ColorGithubModule","ColorHueModule","ColorMaterialModule","ColorPhotoshopModule","ColorSketchModule","ColorSliderModule","ColorSwatchesModule","ColorTwitterModule","ColorShadeModule","switchMap","apiConfig","apiUrl","requestNotNeedToken","injectToken","refreshTokenSubject","clone","whiteList","some","endsWith","patternValidator","cause","pattern","isEmptyInputValue","allowed","enableProdMode","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}